// Ext type declarations (Typescript 1.4 or newer) generated on Sun Nov 22 2015 12:34:58 GMT-0500 (EST)
// For more information, see: https://github.com/revelation0/typescript-declarations-for-ext
interface ExtConfig {
/**
This object is used to enable or disable debugging for classes or namespaces. 
*/
/**
This object is initialized prior to loading the framework (Ext JS or Sencha
Touch) and contains settings and other in
*/
}
/**
The Ext namespace (global object) encapsulates all classes, singletons, and
utility methods provided by Sencha's libr
*/
declare class Ext {
/**
URL to a 1x1 transparent gif image used by Ext to create inline icons with
CSS background images. 
*/
    static BLANK_IMAGE_URL: string;
/**
URL to a blank file used by Ext when in secure mode for iframe src and onReady src
to prevent the IE insecure content
*/
    static SSL_SECURE_URL: string;
/**
Indicates whether to use native browser parsing for JSON methods. 
*/
    static USE_NATIVE_JSON: boolean;
/**
The base prefix to use for all Ext components. 
*/
    static baseCSSPrefix: string;
/**
The current version of Chrome (0 if the browser is not Chrome).

*/
    static chromeVersion: number;
/**
A reusable empty function.

*/
    static emptyFn: Function;
/**
A zero length string which will pass a truth test. 
*/
    static emptyString: any;
/**
True if the Ext.fx.Anim Class is available. 
*/
    static enableFx: boolean;
/**
True to automatically purge event listeners during garbageCollection. 
*/
    static enableListenerCollection: boolean;
/**
An array containing extra enumerables for old browsers

*/
    static enumerables: string[];
/**
The current version of Firefox (0 if the browser is not Firefox).

*/
    static firefoxVersion: number;
/**
This indicate the start timestamp of current cycle. 
*/
    static frameStartTime: any;
/**
A reusable identity function that simply returns its first argument.

*/
    static identityFn: Function;
/**
The current version of IE (0 if the browser is not IE). 
*/
    static ieVersion: number;
/**
True if the detected browser is Chrome.

*/
    static isChrome: boolean;
/**
true when the document body is ready for use.

*/
    static isDomReady: boolean;
/**
True if the detected browser uses the Gecko layout engine (e.g. 
*/
    static isGecko: boolean;
/**
True if the detected browser is Internet Explorer.

*/
    static isIE: boolean;
/**
True if the detected browser is Internet Explorer 10.x.

*/
    static isIE10: boolean;
/**
True if the detected browser is Internet Explorer 10.x or lower.

*/
    static isIE10m: boolean;
/**
True if the detected browser is Internet Explorer 10.x or higher.

*/
    static isIE10p: boolean;
/**
True if the detected browser is Internet Explorer 11.x.

*/
    static isIE11: boolean;
/**
True if the detected browser is Internet Explorer 11.x or lower.

*/
    static isIE11m: boolean;
/**
True if the detected browser is Internet Explorer 11.x or higher.

*/
    static isIE11p: boolean;
/**
True if the detected browser is Internet Explorer 8.x.

*/
    static isIE8: boolean;
/**
True if the detected browser is Internet Explorer 8.x or lower.

*/
    static isIE8m: boolean;
/**
True if the detected browser is Internet Explorer 8.x or higher.

*/
    static isIE8p: boolean;
/**
True if the detected browser is Internet Explorer 9.x.

*/
    static isIE9: boolean;
/**
True if the detected browser is Internet Explorer 9.x or lower.

*/
    static isIE9m: boolean;
/**
True if the detected browser is Internet Explorer 9.x or higher.

*/
    static isIE9p: boolean;
/**
True if the detected platform is Linux.

*/
    static isLinux: boolean;
/**
True if the detected platform is Mac OS.

*/
    static isMac: boolean;
/**
True if the detected browser is Opera.

*/
    static isOpera: boolean;
/**
true when isDomReady is true and the Framework is ready for use.

*/
    static isReady: boolean;
/**
True if the detected browser is Safari.

*/
    static isSafari: boolean;
/**
True if the page is running over SSL

*/
    static isSecure: boolean;
/**
True if the detected browser uses WebKit.

*/
    static isWebKit: boolean;
/**
True if the detected platform is Windows.

*/
    static isWindows: boolean;
/**
The name of the property in the global namespace (The window in browser environments) which refers to the current ins
*/
    static name: string;
/**
The current version of Opera (0 if the browser is not Opera).

*/
    static operaVersion: number;
/**
This object contains properties that describe the current device or platform. 
*/
    static platformTags: any;
/**
A reusable empty function for use as privates members. 
*/
    static privateFn: Function;
/**
The current version of Safari (0 if the browser is not Safari).

*/
    static safariVersion: number;
/**
The current version of WebKit (0 if the browser does not use WebKit).

*/
    static webKitVersion: number;
/**
Loads Ext.app.Application class and starts it up with given configuration after the
page is ready. 
*/
    static application(config: any):void;
/**
Copies all the properties of config to the specified object. 
*/
    static apply(object: any, config: any, defaults?: any):any;
/**
Copies all the properties of config to object if they don't already exist. 
*/
    static applyIf(object: any, config: any):any;
/**
Utility wrapper that suspends layouts of all components for the duration of a given
function. 
*/
    static batchLayouts(fn: Function, scope?: any):void;
/**
Create a new function from the provided fn, change this to the provided scope,
optionally overrides arguments for the
*/
    static bind(fn: Function, scope?: any, args?: any[], appendArgs?: boolean|number):Function;
/**
Execute a callback function in a particular scope. 
*/
    static callback(callback: Function|string, scope?: any, args?: any[], delay?: number, caller?: any, defaultScope?: any):any;
/**
This method checks the registered package versions against the provided version
specs. 
*/
    static checkVersion(specs: any, matchAll?: boolean):boolean;
/**
Old alias to Ext.Array.clean 
*/
    static clean(array: any[]):any[];
/**
Clone simple variables including array, {}-like objects, DOM nodes and Date without keeping the old reference. 
*/
    static clone(item: any):any;
/**
Coerces the first value if possible so that it is comparable to the second value. 
*/
    static coerce(from: any, to: any):any;
/**
Copies a set of named properties fom the source object to the destination object. 
*/
    static copy(dest: any, source: any, names: string|string[], usePrototypeKeys?: boolean):any;
/**
Copies a set of named properties fom the source object to the destination object
if the destination object does not a
*/
    static copyIf(destination: any, source: any, names: string|string[]):any;
/**
Copies a set of named properties fom the source object to the destination object. 
*/
    static copyTo(dest: any, source: any, names: string|string[], usePrototypeKeys?: boolean):any;
/**
Copies a set of named properties fom the source object to the destination object
if the destination object does not a
*/
    static copyToIf(destination: any, source: any, names: string|string[]):any;
/**
Instantiate a class by either full name, alias or alternate name. 
*/
    static create(name?: string, ...args: any[]):any;
/**
Instantiate a class by its alias. 
*/
    static createByAlias(alias: string, ...args: any[]):any;
/**
Shorthand for Ext.JSON.decode 
*/
    static decode(json: string, safe?: boolean):any;
/**
Calls this function after the number of milliseconds specified, optionally in a specific scope. 
*/
    static defer(fn: Function, millis: number, scope?: any, args?: any[], appendArgs?: boolean|number):number;
/**
Defines a class or override. 
*/
    static define(className: string, data: any, createdFn?: Function):Ext.Base;
/**
Destroys all of the given objects. 
*/
    static destroy(...args: any[]):void;
/**
Destroys the specified named members of the given object using Ext.destroy. 
*/
    static destroyMembers(object: any, ...args: string[]):void;
/**
Iterates an array or an iterable value and invoke the given callback function for each item. 
*/
    static each(iterable: any, fn: (item: any, index: number, allItems: any[]) => boolean, scope?: any, reverse?: boolean):boolean;
/**
Shorthand for Ext.JSON.encode 
*/
    static encode(o: any):string;
/**
Explicitly exclude files from being loaded. 
*/
    static exclude(excludes: string|string[]):any;
/**
This method deprecated. 
*/
    static extend(superclass: Function, overrides: any):Function;
/**
A global factory method to instantiate a class from a config object. 
*/
    static factory(config: any, classReference: string, instance?: any, aliasNamespace?: any):void;
/**
Old alias to Ext.Array.flatten 
*/
    static flatten(array: any[]):any[];
/**
Gets the globally shared flyweight Element, with the passed node as the active
element. 
*/
    static fly(dom: string|HTMLElement, named?: string):Ext.dom.Element;
/**
Retrieves Ext.dom.Element objects. 
*/
    static get(element: string|HTMLElement|Ext.dom.Element):Ext.dom.Element;
/**
Returns the current document body as an Ext.dom.Element. 
*/
    static getBody():Ext.dom.Element;
/**
Get the class of the provided object; returns null if it's not an instance
of any class created with Ext.define. 
*/
    static getClass(object: any):Ext.Class;
/**
Get the name of the class by its reference or its instance. 
*/
    static getClassName(object: any):string;
/**
This is shorthand reference to Ext.ComponentManager.get. 
*/
    static getCmp(id: string):any;
/**
Returns the current HTML document object as an Ext.dom.Element. 
*/
    static getDoc():Ext.dom.Element;
/**
Return the dom node for the passed String (id), dom node, or Ext.Element. 
*/
    static getDom(el: string|HTMLElement|Ext.dom.Element):HTMLElement;
/**
Returns the current document head as an Ext.dom.Element. 
*/
    static getHead():Ext.dom.Element;
/**
 
*/
    static getNamespace(className: string):string;
/**
Returns the size of the browser scrollbars. 
*/
    static getScrollbarSize(force?: boolean):any;
/**
Shortcut to Ext.data.StoreManager.lookup. 
*/
    static getStore(store: any):Ext.data.Store;
/**
Get the version number of the supplied package name; will return the version of
the framework. 
*/
    static getVersion(packageName?: string):Ext.Version;
/**
Returns the current window object as an Ext.dom.Element. 
*/
    static getWin():Ext.dom.Element;
/**
Old alias to Ext.String.htmlDecode 
*/
    static htmlDecode(value: string):string;
/**
Old alias to Ext.String.htmlEncode 
*/
    static htmlEncode(value: string):string;
/**
Generates unique ids. 
*/
    static id(o?: any, prefix?: string):string;
/**
Calls this function repeatedly at a given interval, optionally in a specific scope. 
*/
    static interval(fn: Function, millis: number, scope?: any, args?: any[], appendArgs?: boolean|number):number;
/**
Returns true if the passed value is a JavaScript Array, false otherwise. 
*/
    static isArray(target: any):boolean;
/**
Returns true if the passed value is a boolean. 
*/
    static isBoolean(value: any):boolean;
/**
Returns true if the passed value is a JavaScript Date object, false otherwise. 
*/
    static isDate(object: any):boolean;
/**
This method returns true if debug is enabled for the specified class. 
*/
    static isDebugEnabled(className: string):boolean;
/**
Returns true if the passed value is defined. 
*/
    static isDefined(value: any):boolean;
/**
Returns true if the passed value is an HTMLElement 
*/
    static isElement(value: any):boolean;
/**
Returns true if the passed value is empty, false otherwise. 
*/
    static isEmpty(value: any, allowEmptyString?: boolean):boolean;
/**
Returns true if the passed value is a JavaScript Function, false otherwise. 
*/
    static isFunction(value: any):boolean;
/**
Returns true if the passed value is iterable, that is, if elements of it are addressable using array
notation with nu
*/
    static isIterable(value: any):boolean;
/**
Returns 'true' if the passed value is a String that matches the MS Date JSON
encoding format. 
*/
    static isMSDate(value: string):boolean;
/**
Returns true if the passed value is a number. 
*/
    static isNumber(value: any):boolean;
/**
Validates that a value is numeric. 
*/
    static isNumeric(value: any):boolean;
/**
Returns true if the passed value is a JavaScript Object, false otherwise. 
*/
    static isObject(value: any):boolean;
/**
Returns true if the passed value is a JavaScript 'primitive', a string, number
or boolean. 
*/
    static isPrimitive(value: any):boolean;
/**
Returns trueif the passed value is a string. 
*/
    static isString(value: any):boolean;
/**
Returns true if the passed value is a TextNode 
*/
    static isTextNode(value: any):boolean;
/**
Iterates either an array or an object. 
*/
    static iterate(object: any, fn: Function, scope?: any):void;
/**
Logs a message. 
*/
    static log(options?: any, ...message: string[]):void;
/**
Old alias to Ext.Array.max 
*/
    static max(array: any[]|NodeList, comparisonFn?: (max: any, item: any) => any):any;
/**
Old alias to Ext.Array.mean 
*/
    static mean(array: any[]):number;
/**
A convenient alias method for Ext.Object.merge. 
*/
    static merge(destination: any, ...object: any[]):any;
/**
Old alias to Ext.Array.min 
*/
    static min(array: any[]|NodeList, comparisonFn?: (min: any, item: any) => any):any;
/**
Creates namespaces to be used for scoping variables and classes so that they are not global. 
*/
    static namespace(...namespaces: string[]):any;
/**
Returns the current timestamp. 
*/
    static now():number;
/**
Convenient alias for Ext.namespace. 
*/
    static ns(...namespaces: string[]):any;
/**
Validate that a value is numeric and convert it to a number if necessary. 
*/
    static num(value: any, defaultValue: number):number;
/**
Shorthand for Ext.GlobalEvents.addListener. 
*/
    static on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
/**
Adds a listener to be notified when the document is ready (before onload and before
images are loaded). 
*/
    static onReady(fn: Function, scope?: any, options?: any):void;
/**
Overrides members of the specified target with the given values. 
*/
    static override(target: any, overrides: any):void;
/**
Create a new function from the provided fn, the arguments of which are pre-set to args. 
*/
    static pass(fn: Function, args: any[], scope?: any):Function;
/**
Old alias to Ext.Array.pluck 
*/
    static pluck(array: any[]|NodeList, propertyName: string):any[];
/**
Selects child nodes of a given root based on the passed CSS selector. 
*/
    static query(selector: string, asDom?: boolean, root?: HTMLElement|string):HTMLElement[]|Ext.dom.Element[];
/**
Creates a new store for the given id and config, then registers it with the Store Manager. 
*/
    static regStore(id: string, config: any):void;
/**
Removes an HTMLElement from the document. 
*/
    static removeNode(node: HTMLElement):void;
/**
Loads all classes by the given names and all their direct dependencies; optionally
executes the given callback functi
*/
    static require(expressions: string|string[], fn?: Function, scope?: any):void;
/**
Resumes layout activity in the whole framework. 
*/
    static resumeLayouts(flush?: boolean):void;
/**
A reusable function which returns the value of getId() called upon a single passed parameter. 
*/
    static returnId(o: any):void;
/**
A reusable function which returns true. 
*/
    static returnTrue():void;
/**
Selects elements based on the passed CSS selector to enable
Element methods to be applied to many related
elements in
*/
    static select(selector: string|HTMLElement[], composite?: boolean, root?: HTMLElement|string):Ext.dom.CompositeElementLite|Ext.dom.CompositeElement;
/**
Sets the default font-family to use for components that support a glyph config. 
*/
    static setGlyphFontFamily(fontFamily: string):void;
/**
Set version number for the given package name. 
*/
    static setVersion(packageName: string, version: string|Ext.Version):Ext;
/**
Old alias to Ext.Array.sum 
*/
    static sum(array: any[]):number;
/**
Stops layouts from happening in the whole framework. 
*/
    static suspendLayouts():void;
/**
Synchronously loads all classes by the given names and all their direct dependencies; optionally
executes the given c
*/
    static syncRequire(expressions: string|string[], fn?: Function, scope?: any):void;
/**
Converts any iterable (numeric indices and a length property) into a true array. 
*/
    static toArray(iterable: any, start?: number, end?: number):any[];
/**
Returns the type of the given variable in string format. 
*/
    static typeOf(value: any):string;
/**
Shorthand for Ext.GlobalEvents.removeListener. 
*/
    static un(eventName: string, fn: Function, scope?: any):void;
/**
Old alias to Ext.Array.unique 
*/
    static unique(array: any[]):any[];
/**
Old alias to Ext.String.urlAppend 
*/
    static urlAppend(url: string, string: string):string;
/**
Alias for Ext.Object.fromQueryString. 
*/
    static urlDecode(queryString: string, recursive?: boolean):any;
/**
Takes an object and converts it to an encoded query string. 
*/
    static urlEncode(object: any, recursive?: boolean):string;
/**
Returns the given value itself if it's not empty, as described in isEmpty; returns the default
value (second argument
*/
    static valueFrom(value: any, defaultValue: any, allowBlank?: boolean):any;
/**
Convenient shorthand to create a widget by its xtype or a config object. 
*/
    static widget(name?: string, config?: any):any;
}
declare module Ext {
    /**
    Base Manager class 
    */
    export class AbstractManager extends Ext.Base {
    /**
    Contains all of the items currently managed

    */
        all: Ext.util.HashMap;
    /**
     
    */
        constructor(config: any);
    /**
    Executes the specified function once for each item in the collection. 
    */
        each(fn: (key: string, value: number, length: number) => boolean, scope: any):void;
    /**
    Returns an item by id. 
    */
        get(id: string):any;
    /**
    Gets the number of items in the collection. 
    */
        getCount():number;
    /**
    Checks if an item type is registered. 
    */
        isRegistered(type: string):boolean;
    /**
    Registers a function that will be called when an item with the specified id is added to the manager. 
    */
        onAvailable(id: string, fn: Function, scope: any):void;
    /**
    Registers an item to be managed 
    */
        register(item: any):void;
    /**
    Registers a new item constructor, keyed by a type key. 
    */
        registerType(type: string, cls: Function):void;
    /**
    Unregisters an item by removing it from this manager 
    */
        unregister(item: any):void;
    }
    interface ActionConfig {
    /**
    True to disable all components configured by this Action, false to enable them. 
    */
        disabled?: boolean;
    /**
    The function that will be invoked by each component tied to this Action
when the component's primary event is triggered.

    */
        handler?: Function;
    /**
    True to hide all components configured by this Action, false to show them. 
    */
        hidden?: boolean;
    /**
    The CSS class selector that specifies a background image to be used as the header icon for
all components configured 
    */
        iconCls?: string;
    /**
    See Ext.Component.itemId.

    */
        itemId?: string;
    /**
    The scope (this reference) in which the handler is executed. 
    */
        scope?: any;
    /**
    The text to set for all components configured by this Action. 
    */
        text?: string;
    }
    /**
    An Action is a piece of reusable functionality that can be abstracted out of any particular component so that it
can 
    */
    export class Action extends Ext.Base {
    /**
    true in this class to identify an object as an instantiated Action, or subclass thereof. 
    */
        isAction: boolean;
    /**
    Creates new Action. 
    */
        constructor(config: Ext.ActionConfig);
    /**
    Disables all components configured by this Action. 
    */
        disable():void;
    /**
    Executes the specified function once for each Component currently tied to this Action. 
    */
        each(fn: Function, scope: any):void;
    /**
    Enables all components configured by this Action. 
    */
        enable():void;
    /**
    Executes this Action manually using the handler function specified in the original config object
or the handler funct
    */
        execute(...args: any[]):void;
    /**
    Gets the icon CSS class currently used by all components configured by this Action. 
    */
        getIconCls():void;
    /**
    Gets the text currently displayed by all components configured by this Action. 
    */
        getText():void;
    /**
    Hides all components configured by this Action. 
    */
        hide():void;
    /**
    Returns true if the components using this Action are currently disabled, else returns false. 
    */
        isDisabled():void;
    /**
    Returns true if the components configured by this Action are currently hidden, else returns false. 
    */
        isHidden():void;
    /**
    Sets the disabled state of all components configured by this Action. 
    */
        setDisabled(disabled: boolean):void;
    /**
    Sets the function that will be called by each Component using this action when its primary event is triggered. 
    */
        setHandler(fn: Function, scope: any):void;
    /**
    Sets the hidden state of all components configured by this Action. 
    */
        setHidden(hidden: boolean):void;
    /**
    Sets the icon CSS class for all components configured by this Action. 
    */
        setIconCls(cls: string):void;
    /**
    Sets the text to be displayed by all components configured by this Action. 
    */
        setText(text: string):void;
    /**
    Shows all components configured by this Action. 
    */
        show():void;
    }
    interface AjaxConfig {
    }
    /**
    A singleton instance of an Ext.data.Connection. 
    */
    export class Ajax {
    /**
    Whether a new request should abort any pending requests. 
    */
        static autoAbort: boolean;
    /**
    An object containing request headers which are added to each request made by this object.

    */
        static defaultHeaders: any;
    /**
    True to add a unique cache-buster param to GET requests. 
    */
        static disableCaching: boolean;
    /**
    An object containing properties which are used as extra parameters to each request made
by this object. 
    */
        static extraParams: any;
    /**
    This object holds a key for any event that has a listener. 
    */
        static hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        static isObservable: boolean;
    /**
    The default HTTP method to be used for requests. 
    */
        static method: string;
    /**
    The timeout in milliseconds to be used for requests. 
    */
        static timeout: number;
    /**
    The default URL to be used for requests to the server. 
    */
        static url: string;
    /**
    Aborts an active request. 
    */
        static abort(request?: any):void;
    /**
    Aborts all active requests 
    */
        static abortAll():void;
    /**
    Appends an after-event handler. 
    */
        static addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        static addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        static addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        static addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        static clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        static clearManagedListeners():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        static enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        static fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        static fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        static fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Returns the value of async. 
    */
        static getAsync():boolean;
    /**
    Returns the value of autoAbort. 
    */
        static getAutoAbort():boolean;
    /**
    Returns the value of binary. 
    */
        static getBinary():boolean;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the value of cors. 
    */
        static getCors():boolean;
    /**
    Returns the value of defaultHeaders. 
    */
        static getDefaultHeaders():any;
    /**
    Returns the value of defaultPostHeader. 
    */
        static getDefaultPostHeader():string;
    /**
    Returns the value of defaultXdrContentType. 
    */
        static getDefaultXdrContentType():string;
    /**
    Returns the value of defaultXhrHeader. 
    */
        static getDefaultXhrHeader():string;
    /**
    Returns the value of disableCaching. 
    */
        static getDisableCaching():boolean;
    /**
    Returns the value of disableCachingParam. 
    */
        static getDisableCachingParam():string;
    /**
    Returns the value of extraParams. 
    */
        static getExtraParams():any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Returns the value of isXdr. 
    */
        static getIsXdr():boolean;
    /**
    Returns the value of method. 
    */
        static getMethod():string;
    /**
    Returns the value of password. 
    */
        static getPassword():string;
    /**
    Returns the value of timeout. 
    */
        static getTimeout():number;
    /**
    Returns the value of url. 
    */
        static getUrl():string;
    /**
    Returns the value of useDefaultXhrHeader. 
    */
        static getUseDefaultXhrHeader():boolean;
    /**
    Returns the value of username. 
    */
        static getUsername():string;
    /**
    Returns the value of withCredentials. 
    */
        static getWithCredentials():boolean;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        static hasListener(eventName: string):boolean;
    /**
    Determines whether this object has a request outstanding. 
    */
        static isLoading(request?: any):boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        static isSuspended(event?: string):boolean;
    /**
    Shorthand for addManagedListener. 
    */
        static mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        static mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        static on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        static onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        static onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Checks if the response status was successful 
    */
        static parseStatus(status: number):any;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        static relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        static removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        static removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        static removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        static removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Sends an HTTP request to a remote server. 
    */
        static request(options: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        static resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        static resumeEvents(discardQueue?: boolean):void;
    /**
    Sets the value of async. 
    */
        static setAsync(async: boolean):void;
    /**
    Sets the value of autoAbort. 
    */
        static setAutoAbort(autoAbort: boolean):void;
    /**
    Sets the value of binary. 
    */
        static setBinary(binary: boolean):void;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Sets the value of cors. 
    */
        static setCors(cors: boolean):void;
    /**
    Sets the value of defaultHeaders. 
    */
        static setDefaultHeaders(defaultHeaders: any):void;
    /**
    Sets the value of defaultPostHeader. 
    */
        static setDefaultPostHeader(defaultPostHeader: string):void;
    /**
    Sets the value of defaultXdrContentType. 
    */
        static setDefaultXdrContentType(defaultXdrContentType: string):void;
    /**
    Sets the value of defaultXhrHeader. 
    */
        static setDefaultXhrHeader(defaultXhrHeader: string):void;
    /**
    Sets the value of disableCaching. 
    */
        static setDisableCaching(disableCaching: boolean):void;
    /**
    Sets the value of disableCachingParam. 
    */
        static setDisableCachingParam(disableCachingParam: string):void;
    /**
    Sets the value of extraParams. 
    */
        static setExtraParams(extraParams: any):void;
    /**
    Sets the value of isXdr. 
    */
        static setIsXdr(isXdr: boolean):void;
    /**
    An alias for addListener. 
    */
        static setListeners(listeners: any):void;
    /**
    Sets the value of method. 
    */
        static setMethod(method: string):void;
    /**
    Sets various options such as the url, params for the request 
    */
        static setOptions(options: any, scope: any):any;
    /**
    Sets the value of password. 
    */
        static setPassword(password: string):void;
    /**
    Sets the value of timeout. 
    */
        static setTimeout(timeout: number):void;
    /**
    Sets the value of url. 
    */
        static setUrl(url: string):void;
    /**
    Sets the value of useDefaultXhrHeader. 
    */
        static setUseDefaultXhrHeader(useDefaultXhrHeader: boolean):void;
    /**
    Sets the value of username. 
    */
        static setUsername(username: string):void;
    /**
    Sets the value of withCredentials. 
    */
        static setWithCredentials(withCredentials: boolean):void;
    /**
    Suspends firing of the named event(s). 
    */
        static suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        static suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        static un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        static unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        static unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Uploads a form using a hidden iframe. 
    */
        static upload(form: string|HTMLElement|Ext.dom.Element, url: string, params: string, options: any):void;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    /**
    

    */
    export class AnimationQueue {
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
     
    */
        static start(fn: Function, scope?: any, args?: any):void;
    /**
     
    */
        static stop(fn: Function, scope?: any, args?: any):void;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    /**
    A set of useful static methods to deal with arrays; provide missing methods for
older browsers.

    */
    export class Array {
    /**
    This method returns the index that a given item would be inserted into the
given (sorted) array. 
    */
        static binarySearch(array: any[], item: any, begin?: number, end?: number, compareFn?: Function):number;
    /**
    Filter through an array and remove empty item as defined in Ext.isEmpty. 
    */
        static clean(array: any[]):any[];
    /**
    Clone a flat array without referencing the previous one. 
    */
        static clone(array: any[]):any[];
    /**
    Checks whether or not the given array contains the specified item. 
    */
        static contains(array: any[], item: any):boolean;
    /**
    Perform a set difference A-B by subtracting all items in array B from array A. 
    */
        static difference(arrayA: any[], arrayB: any[]):any[];
    /**
    Iterates an array or an iterable value and invoke the given callback function for each item. 
    */
        static each(iterable: any, fn: (item: any, index: number, allItems: any[]) => boolean, scope?: any, reverse?: boolean):boolean;
    /**
    Shallow compares the contents of 2 arrays using strict equality. 
    */
        static equals(array1: any[], array2: any[]):boolean;
    /**
    Removes items from an array. 
    */
        static erase(array: any[], index: number, removeCount: number):any[];
    /**
    Executes the specified function for each array element until the function returns a falsy value. 
    */
        static every(array: any[], fn: (item: any, index: number, array: any[]) => any, scope: any):boolean;
    /**
    Creates a new array with all of the elements of this array for which
the provided filtering function returns a truthy
    */
        static filter(array: any[], fn: (item: any, index: number, array: any[]) => any, scope: any):any[];
    /**
    Returns the first item in the array which elicits a truthy return value from the
passed selection function. 
    */
        static findBy(array: any[], fn: (item: any, index: string) => any, scope?: any):any;
    /**
    Recursively flattens into 1-d Array. 
    */
        static flatten(array: any[]):any[];
    /**
    Iterates an array and invoke the given callback function for each item. 
    */
        static forEach(array: any[], fn: (item: any, index: number, allItems: any[]) => any, scope?: any):void;
    /**
    Converts a value to an array if it's not already an array; returns:


An empty array if given value is undefined or n
    */
        static from(value: any, newReference?: boolean):any[];
    /**
    Push an item into the array only if the array doesn't contain it yet. 
    */
        static include(array: any[], item: any):void;
    /**
    Get the index of the provided item in the given array, a supplement for the
missing arrayPrototype.indexOf in Interne
    */
        static indexOf(array: any[], item: any, from?: number):number;
    /**
    Inserts items in to an array. 
    */
        static insert(array: any[], index: number, items: any[]):any[];
    /**
    Merge multiple arrays into one with unique items that exist in all of the arrays. 
    */
        static intersect(array1: any[], array2: any[], etc: any[]):any[];
    /**
    Creates a new array with the results of calling a provided function on every element in this array. 
    */
        static map(array: any[], fn: (item: any, index: number, array: any[]) => any, scope?: any):any[];
    /**
    Returns the maximum value in the Array. 
    */
        static max(array: any[]|NodeList, comparisonFn?: (max: any, item: any) => any):any;
    /**
    Calculates the mean of all items in the array. 
    */
        static mean(array: any[]):number;
    /**
    Merge multiple arrays into one with unique items. 
    */
        static merge(array1: any[], array2: any[], etc: any[]):any[];
    /**
    Returns the minimum value in the Array. 
    */
        static min(array: any[]|NodeList, comparisonFn?: (min: any, item: any) => any):any;
    /**
    A function used to sort an array by numeric value. 
    */
        static numericSortFn(a: any, b: any):void;
    /**
    Plucks the value of a property from each item in the Array. 
    */
        static pluck(array: any[]|NodeList, propertyName: string):any[];
    /**
    Pushes new items onto the end of an Array. 
    */
        static push(target: any[], ...elements: any[]):any[];
    /**
    Removes the specified item from the array if it exists. 
    */
        static remove(array: any[], item: any):any[];
    /**
    Removes item/s at the specified index. 
    */
        static removeAt(array: any[], index: number, count?: number):any[];
    /**
    Replaces items in an array. 
    */
        static replace(array: any[], index: number, removeCount: number, insert?: any[]):any[];
    /**
    Returns a shallow copy of a part of an array. 
    */
        static slice(array: any[], begin: number, end: number):any[];
    /**
    Executes the specified function for each array element until the function returns a truthy value. 
    */
        static some(array: any[], fn: (item: any, index: number, array: any[]) => any, scope: any):boolean;
    /**
    Sorts the elements of an Array in a stable manner (equivalently keyed values do not move relative to each other). 
    */
        static sort(array: any[], sortFn?: (a: any, b: any) => number):any[];
    /**
    Replaces items in an array. 
    */
        static splice(array: any[], index: number, removeCount: number, ...elements: any[]):any[];
    /**
    Calculates the sum of all items in the given array. 
    */
        static sum(array: any[]):number;
    /**
    Converts any iterable (numeric indices and a length property) into a true array. 
    */
        static toArray(iterable: any, start?: number, end?: number):any[];
    /**
    Creates a map (object) keyed by the elements of the given array. 
    */
        static toMap(array: any[], getKey?: string|Function, scope?: any):any;
    /**
    Creates a map (object) keyed by a property of elements of the given array. 
    */
        static toValueMap(array: any[], getKey?: string|Function, scope?: any, arrayify?: number):any;
    /**
    Merge multiple arrays into one with unique items. 
    */
        static union(array1: any[], array2: any[], etc: any[]):any[];
    /**
    Returns a new array with unique items. 
    */
        static unique(array: any[]):any[];
    }
    /**
    This class provides help value testing methods useful for diagnostics. 
    */
    export class Assert {
    /**
    Checks that the first argument is falsey and throws an Error if it is not. 
    */
        falsey(b: any, msg: any):void;
    /**
    Checks that the first argument is falsey and throws an Error if it is not. 
    */
        falseyProp(object: any, property: any):void;
    /**
    Checks that the first argument is truthy and throws an Error if it is not. 
    */
        truthy(b: any, msg: any):void;
    /**
    Checks that the first argument is truthy and throws an Error if it is not. 
    */
        truthyProp(object: any, property: any):void;
    }
    /**
    The root of all classes created with Ext.define. 
    */
    export class Base {
    /**
    This property is set to true during the call to initConfig. 
    */
        isConfiguring: boolean;
    /**
    This property is set to true if this instance is the first of its class. 
    */
        isFirstInstance: boolean;
    /**
    This value is true and is used to identify plain objects from instances of
a defined class. 
    */
        isInstance: boolean;
    /**
    Get the reference to the current class from which this object was instantiated. 
    */
        self: Ext.Class;
    /**
    Call the original method that was previously overridden with override

Ext.define('My.Cat', {
    constructor: functi
    */
        callOverridden(args: any):any;
    /**
    Call the "parent" method of the current method. 
    */
        callParent(args: any):any;
    /**
    This method is used by an override to call the superclass method but
bypass any overridden method. 
    */
        callSuper(args: any):any;
    /**
    This method is called to cleanup an object and its resources. 
    */
        destroy():void;
    /**
    Returns a specified config property value. 
    */
        getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        getInitialConfig(name?: string):any;
    /**
    Initialize configuration for this class. 
    */
        initConfig(config: any):Ext.Base;
    /**
    Sets a single/multiple configuration options. 
    */
        setConfig(name: any, value?: any):Ext.Base;
    /**
    Get the reference to the class from which this object was instantiated. 
    */
        statics():Ext.Class;
    /**
    Add methods / properties to the prototype of this class. 
    */
        addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        addStatics(members: any):Ext.Base;
    /**
     
    */
        callParent(args: any):void;
    /**
     
    */
        callSuper(args: any):void;
    /**
    Create a new instance of this Class. 
    */
        create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        getName():string;
    /**
    Override members of this class. 
    */
        override(members: any):Ext.Base;
    }
    interface ClassConfig {
    /**
    List of short aliases for class names. 
    */
        alias?: string|string[];
    /**
    Defines alternate names for this class. 
    */
        alternateClassName?: string|string[];
    /**
    This configuration works in a very similar manner to the config option. 
    */
        cachedConfig?: any;
    /**
    List of configuration options with their default values. 
    */
        config?: any;
    /**
    The parent class that this class extends. 
    */
        extend?: string;
    /**
    List of inheritable static methods for this class. 
    */
        inheritableStatics?: any;
    /**
    List of classes to mix into this class. 
    */
        mixins?: any;
    /**
    Overrides members of the specified target class. 
    */
        override?: string;
    /**
    Allows setting config values for a class based on specific platforms. 
    */
        platformConfig?: any;
    /**
    The privates config is a list of methods intended to be used internally by the
framework. 
    */
        privates?: any;
    /**
    List of classes that have to be loaded before instantiating this class. 
    */
        requires?: string[];
    /**
    When set to true, the class will be instantiated as singleton. 
    */
        singleton?: boolean;
    /**
    List of static methods for this class. 
    */
        statics?: any;
    /**
    List of optional classes to load together with this class. 
    */
        uses?: string[];
    /**
    Note: Only applies to Ext.Component derived classes when used as
a config in Ext.define. 
    */
        xtype?: string;
    }
    /**
    This is a low level factory that is used by Ext.define and should not be used
directly in application code. 
    */
    export class Class {
    /**
    Create a new anonymous class. 
    */
        constructor(data: Ext.ClassConfig, onCreated: Function);
    }
    interface ClassManagerConfig {
    /**
    A collection of diagnostic methods to decorate the real methods of the class. 
    */
    /**
    The object given has properties that describe the versions at which the deprecations
apply. 
    */
    }
    /**
    Ext.ClassManager manages all classes and handles mapping from string class name to
actual class objects throughout th
    */
    export class ClassManager {
    /**
    Adds a batch of class name to alias mappings. 
    */
        static addNameAliasMappings(aliases: any):void;
    /**
     
    */
        static addNameAlternateMappings(alternates: any):void;
    /**
    Retrieve a class by its name. 
    */
        static get(name: string):Ext.Class;
    /**
    Get a reference to the class by its alias. 
    */
        static getByAlias(alias: string):Ext.Class;
    /**
    Get the class of the provided object; returns null if it's not an instance
of any class created with Ext.define. 
    */
        static getClass(object: any):Ext.Class;
    /**
    Returns the displayName property or className or object. 
    */
        static getDisplayName(object: any):string;
    /**
    Get the name of the class by its reference or its instance. 
    */
        static getName(object: any):string;
    /**
    Instantiate a class by either full name, alias or alternate name 
    */
        static instantiate(name: string, args: any):any;
    /**
    Instantiate a class by its alias. 
    */
        static instantiateByAlias(alias: string, ...args: any[]):any;
    /**
    Checks if a class has already been created. 
    */
        static isCreated(className: string):boolean;
    /**
    Sets a name reference to a class. 
    */
        static set(name: string, value: any):Ext.ClassManager;
    /**
    Creates a namespace and assign the value to the created object. 
    */
        static setNamespace(name: string, value: any):void;
    }
    interface ComponentConfig {
    /**
    A Component or Element by which to position this component according to the defaultAlign. 
    */
        alignTarget?: string;
    /**
    A flag indicating that this component should be on the top of the z-index stack for use by the zIndexManager
to sort 
    */
        alwaysOnTop?: boolean|number;
    /**
    This configuration option is to be applied to child items of a container managed
by an Anchor Layout. 
    */
        anchor?: string;
    /**
    true to animate the shadow along with the component while the component is animating. 
    */
        animateShadow?: boolean;
    /**
    A tag name or DomHelper spec used to create the Element which will
encapsulate this Component. 
    */
        autoEl?: any;
    /**
    This config is intended mainly for non-floating Components which may
or may not be shown. 
    */
        autoRender?: boolean|string|HTMLElement|Ext.dom.Element;
    /**
    true to use overflow:'auto' on the components layout element and show scroll bars automatically when necessary,
false
    */
        autoScroll?: boolean;
    /**
    true to automatically show the component upon creation. 
    */
        autoShow?: boolean;
    /**
    The base CSS class to apply to this component's element. 
    */
        baseCls?: string;
    /**
    Setting this config option adds or removes data bindings for other configs. 
    */
        bind?: any;
    /**
    Specifies the border size for this component. 
    */
        border?: number|string|boolean;
    /**
    The canonical form of childEls is an object keyed by child's property name
with values that are objects with the foll
    */
        childEls?: any;
    /**
    An optional extra CSS class that will be added to this component's Element. 
    */
        cls?: string|string[];
    /**
    Defines the column width inside column layout. 
    */
        columnWidth?: number;
    /**
    CSS Class to be added to a components root level element to give distinction to it via styling.

    */
        componentCls?: string;
    /**
    The sizing and positioning of a Component's internal Elements is the responsibility of the Component's layout
manager
    */
        componentLayout?: any;
    /**
    True to constrain this Components within its containing element, false to allow it to fall outside of its containing

    */
        constrain?: boolean;
    /**
    A Region (or an element from which a Region measurement will be read) which is used
to constrain the component. 
    */
        constrainTo?: Ext.util.Region|Ext.dom.Element;
    /**
    An object or a string (in TRBL order) specifying insets from the configured constrain region
within which this compon
    */
        constraintInsets?: any;
    /**
    Specify an existing HTML element, or the id of an existing HTML element to use as the content for this component. 
    */
        contentEl?: string;
    /**
    A string alias, a configuration object or an instance of a ViewController for
this container. 
    */
        controller?: any;
    /**
    The initial set of data to apply to the tpl to update the content
area of the Component.

    */
        data?: any;
    /**
    The default Ext.dom.Element#getAlignToXY anchor position value for this component
relative to its alignTarget (which 
    */
        defaultAlign?: string;
    /**
    If true, this component will be the default scope (this pointer) for events
specified with string names so that the s
    */
        defaultListenerScope?: boolean;
    /**
    true to disable the component. 
    */
        disabled?: boolean;
    /**
    CSS class to add when the Component is disabled. 
    */
        disabledCls?: string;
    /**
    The side of the panel where this component is to be
docked when specified in the panel's
dockedItems config. 
    */
        dock?: any;
    /**
    Specify as true to make a floating Component draggable using the
Component's encapsulating element as the drag handle. 
    */
        draggable?: any;
    /**
    Configure as true to have this Component fixed at its X, Y coordinates in the browser viewport, immune
to scrolling t
    */
        fixed?: boolean;
    /**
    Flex may be applied to child items of a box layout (vbox or
hbox). 
    */
        flex?: number;
    /**
    Specify as true to float the Component outside of the document flow using CSS absolute positioning. 
    */
        floating?: boolean;
    /**
    CSS class that will be added to focused
Component, and removed when Component blurs. 
    */
        focusCls?: string;
    /**
    Specifies whether the floated component should be automatically focused when
it is brought to the front. 
    */
        focusOnToFront?: boolean;
    /**
    When inside FormPanel, any component configured with formBind: true will
be enabled/disabled depending on the validit
    */
        formBind?: boolean;
    /**
    Specify as true to have the Component inject framing elements within the Component at render time to provide a
graphi
    */
        frame?: boolean;
    /**
    The height of this component. 
    */
        height?: number|string;
    /**
    true to hide the component. 
    */
        hidden?: boolean;
    /**
    A String which specifies how this Component's encapsulating DOM element will be hidden. 
    */
        hideMode?: string;
    /**
    An HTML fragment, or a DomHelper specification to use as the layout element content. 
    */
        html?: any;
    /**
    The unique id of this component instance. 
    */
        id?: string;
    /**
    The unique id of this component instance within its container. 
    */
        itemId?: string;
    /**
    Components that achieve their internal layout results using solely CSS with no JS
intervention must set this to true. 
    */
        liquidLayout?: boolean;
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    /**
    True to drag the component itself. 
    */
        liveDrag?: boolean;
    /**
    A configuration object or an instance of a Ext.ComponentLoader to load remote content
for this Component. 
    */
        loader?: any;
    /**
    Specifies the margin for this component. 
    */
        margin?: number|string;
    /**
    Related to the childEls configuration which specifies named properties which correspond to component sub-elements. 
    */
        maskElement?: string;
    /**
    The maximum value in pixels which this Component will set its height to. 
    */
        maxHeight?: number;
    /**
    The maximum value in pixels which this Component will set its width to. 
    */
        maxWidth?: number;
    /**
    The minimum value in pixels which this Component will set its height to. 
    */
        minHeight?: number;
    /**
    The minimum value in pixels which this Component will set its width to. 
    */
        minWidth?: number;
    /**
    True to make the floated component modal and mask everything behind it when displayed, false to display it without
re
    */
        modal?: boolean;
    /**
    This config enables binding to your Ext.data.Model.validators. 
    */
        modelValidation?: boolean;
    /**
    An optional extra CSS class that will be added to this component's Element when the mouse moves over the Element,
and
    */
        overCls?: string;
    /**
    Possible values are:


'auto' to enable automatic horizontal scrollbar (Style overflow-x: 'auto'). 
    */
        overflowX?: string;
    /**
    Possible values are:


'auto' to enable automatic vertical scrollbar (Style overflow-y: 'auto'). 
    */
        overflowY?: string;
    /**
    Specifies the padding for this component. 
    */
        padding?: number|string;
    /**
    An array of plugins to be added to this component. 
    */
        plugins?: any;
    /**
    One or more names of config properties that this component should publish
to its ViewModel. 
    */
        publishes?: any;
    /**
    Specifies a name for this component inside its component hierarchy. 
    */
        reference?: string;
    /**
    Defines the region inside border layout. 
    */
        region?: any;
    /**
    The data used by renderTpl in addition to the following property values of the component:


id
ui
uiCls
baseCls
compo
    */
        renderData?: any;
    /**
    An object containing properties specifying CSS selectors which identify child elements
created by the render process. 
    */
        renderSelectors?: any;
    /**
    Specify the id of the element, a DOM element or an existing Element that this component will be rendered into. 
    */
        renderTo?: string|HTMLElement|Ext.dom.Element;
    /**
    An XTemplate used to create the internal structure inside this Component's encapsulating
Element. 
    */
        renderTpl?: Ext.XTemplate|string|string[];
    /**
    Specify as true to apply a Resizer to this Component after rendering. 
    */
        resizable?: any;
    /**
    A valid Ext.resizer.Resizer handles config string. 
    */
        resizeHandles?: string;
    /**
    True to layout this component and its descendants in "rtl" (right-to-left) mode. 
    */
        rtl?: boolean;
    /**
    A buffer to be applied if many state events are fired within a short period. 
    */
        saveDelay?: number;
    /**
    Configuration options to make this Component scrollable. 
    */
        scrollable?: any;
    /**
    If provided this creates a new Session instance for this component. 
    */
        session?: any;
    /**
    Specifies whether the floating component should be given a shadow. 
    */
        shadow?: string|boolean;
    /**
    Number of pixels to offset the shadow.

    */
        shadowOffset?: number;
    /**
    true to enable an iframe shim for this Component to keep
windowed objects from showing through.

    */
        shim?: boolean;
    /**
    The possible values for shrinkWrap are:


0 (or false): Neither width nor height depend on content. 
    */
        shrinkWrap?: boolean|number;
    /**
    An array of events that, when fired, should trigger this object to
save its state. 
    */
        stateEvents?: string[];
    /**
    The unique id for this object to use for state management purposes. 
    */
        stateId?: string;
    /**
    A flag which causes the object to attempt to restore the state of
internal properties from a saved state on startup. 
    */
        stateful?: boolean;
    /**
    A custom style specification to be applied to this component's Element. 
    */
        style?: any;
    /**
    DOM tabIndex attribute for this Focusable

    */
        tabIndex?: number;
    /**
    True to automatically call toFront when the show method is called on an already visible,
floating component. 
    */
        toFrontOnShow?: boolean;
    /**
    An Ext.Template, Ext.XTemplate or an array of strings to form an Ext.XTemplate. 
    */
        tpl?: Ext.XTemplate|Ext.Template|string|string[];
    /**
    The Ext.(X)Template method to use when updating the content area of the Component. 
    */
        tplWriteMode?: string;
    /**
    This object holds a map of config properties that will update their binding
as they are modified. 
    */
        twoWayBindable?: any;
    /**
    A UI style for a component. 
    */
        ui?: string;
    /**
    The ViewModel is a data provider for this component and its children. 
    */
        viewModel?: any;
    /**
    A value to control how Components are laid out in a Border layout or as docked items. 
    */
        weight?: number;
    /**
    The width of this component. 
    */
        width?: number|string;
    /**
    Note: Only applies to Ext.Component derived classes when used as
a config in Ext.define. 
    */
        xtype?: string;
    }
    /**
    Base class for all Ext components. 
    */
    export class Component extends Ext.Base {
    /**
    Setting this property to true causes the isLayoutRoot method to return
true and stop the search for the top-most comp
    */
        _isLayoutRoot: boolean;
    /**
    The name of the padding property that is used by the layout to manage
padding. 
    */
        contentPaddingProperty: string;
    /**
    This property is used to determine the property of a bind config that is just
the value. 
    */
        defaultBindProperty: string;
    /**
    Only present for floating Components which were inserted as child
items of Containers. 
    */
        floatParent: Ext.container.Container;
    /**
    true for interactive Components, false for static Components. 
    */
        focusable: boolean;
    /**
    Indicates the width of any framing elements which were added within the encapsulating
element to provide graphical, r
    */
        frameSize: any;
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    The config object passed to the constructor during Component creation.

    */
        initialConfig: any;
    /**
    true in this class to identify an object as an instantiated Component, or subclass thereof. 
    */
        isComponent: boolean;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
    This is an internal flag that you use when creating custom components. 
    */
        maskOnDisable: boolean;
    /**
    This Component's owner Container (is set automatically
when this Component is added to a Container). 
    */
        ownerCt: Ext.container.Container;
    /**
    Indicates whether or not the component has been rendered. 
    */
        rendered: boolean;
    /**
    Only present for floating Components after
they have been rendered. 
    */
        zIndexManager: Ext.ZIndexManager;
    /**
    Only present for Ext.Component.floating Components which were
inserted as child items of Containers, and which have a
    */
        zIndexParent: Ext.container.Container;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.ComponentConfig);
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Adds a CSS class to the top level element representing this component. 
    */
        addClass(cls: string|string[]):Ext.Component;
    /**
    Adds a CSS class to the top level element representing this component. 
    */
        addCls(cls: string|string[]):Ext.Component;
    /**
    Adds a cls to the uiCls array, which will also call addUIClsToElement and adds to all elements of this
component. 
    */
        addClsWithUI(classes: string|string[], skip?: boolean):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Save a property to the given state object if it is not its default or configured
value. 
    */
        addPropertyToState(state: any, propName: string, value?: string):any;
    /**
    Add events that will trigger the state to be saved. 
    */
        addStateEvents(events: string|string[]):void;
    /**
    Method which adds a specified UI + uiCls to the components element. 
    */
        addUIClsToElement(uiCls: string):void;
    /**
    Called by the layout system after the Component has been laid out. 
    */
        afterComponentLayout(width: number, height: number, oldWidth: number|void, oldHeight: number|void):void;
    /**
    Invoked after the Component has been hidden. 
    */
        afterHide(callback?: Function, scope?: any):void;
    /**
    Allows additional behavior after rendering is complete. 
    */
        afterRender():void;
    /**
    Template method called after a Component has been positioned. 
    */
        afterSetPosition(x: number, y: number):void;
    /**
    Invoked after the Component is shown (after onShow is called). 
    */
        afterShow(animateTarget?: string|Ext.dom.Element, callback?: Function, scope?: any):void;
    /**
    Aligns the element with another element relative to the specified anchor points. 
    */
        alignTo(element: Ext.util.Positionable|HTMLElement|string, position?: string, offsets?: number[]):Ext.util.Positionable;
    /**
    Performs custom animation on this object. 
    */
        animate(animObj: any):any;
    /**
    Applies the state to the object. 
    */
        applyState(state: any):void;
    /**
    Template method to do any pre-blur processing. 
    */
        beforeBlur(e: Ext.event.Event):void;
    /**
    Occurs before componentLayout is run. 
    */
        beforeComponentLayout(adjWidth: number, adjHeight: number):void;
    /**
    Invoked before the Component is destroyed. 
    */
        beforeDestroy():void;
    /**
    Template method to do any pre-focus processing. 
    */
        beforeFocus(e: Ext.event.Event):void;
    /**
    Occurs before componentLayout is run. 
    */
        beforeLayout():void;
    /**
    Allows additional behavior before rendering. 
    */
        beforeRender():void;
    /**
    Invoked before the Component is shown. 
    */
        beforeShow():void;
    /**
    Bubbles up the component/container hierarchy, calling the specified function with each component. 
    */
        bubble(fn: Function, scope?: any, args?: any[]):Ext.Component;
    /**
    Cancel any deferred focus on this component 
    */
        cancelFocus():void;
    /**
    Center this Component in its container. 
    */
        center():Ext.Component;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Clone the current component using the original config values passed into this instance by default. 
    */
        cloneConfig(overrides: any):Ext.Component;
    /**
    Disable the component. 
    */
        disable(silent?: boolean):void;
    /**
    This method needs to be called whenever you change something on this component that
requires the Component's layout t
    */
        doComponentLayout():Ext.Component;
    /**
    Moves this floating Component into a constrain region. 
    */
        doConstrain(constrainTo?: string|HTMLElement|Ext.dom.Element|Ext.util.Region):void;
    /**
    Enable the component 
    */
        enable(silent?: boolean):void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Ensures that this component is attached to document.body. 
    */
        ensureAttachedToBody(runLayout?: boolean):void;
    /**
    Find a container above this component at any level by a custom function. 
    */
        findParentBy(fn: Function):Ext.container.Container;
    /**
    Find a container above this component at any level by xtype or class

See also the up method. 
    */
        findParentByType(xtype: string|Ext.Class):Ext.container.Container;
    /**
    Retrieves plugin from this component's collection by its ptype. 
    */
        findPlugin(ptype: string):Ext.plugin.Abstract;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Try to focus this component. 
    */
        focus(selectText?: any, delay?: boolean|number, callback?: Function, scope?: Function):Ext.Component;
    /**
    Updates this component's layout. 
    */
        forceComponentLayout(options?: any):void;
    /**
    Returns the current animation if this object has any effects actively running or queued, else returns false. 
    */
        getActiveAnimation():Ext.fx.Anim|boolean;
    /**
    Gets the x,y coordinates to align this element with another element. 
    */
        getAlignToXY(element: Ext.util.Positionable|HTMLElement|string, position?: string, offsets?: number[]):number[];
    /**
    Returns the value of alwaysOnTop. 
    */
        getAlwaysOnTop():boolean|number;
    /**
    Gets the x,y coordinates specified by the anchor position on the element. 
    */
        getAnchorXY(anchor?: string, local?: boolean, size?: any):number[];
    /**
    Returns the value of bind. 
    */
        getBind():any;
    /**
    Return an object defining the area of this Element which can be passed to
setBox to set another Element's size/locati
    */
        getBox(contentBox?: boolean, local?: boolean):any;
    /**
    Implements an upward event bubbling policy. 
    */
        getBubbleTarget():void;
    /**
    Returns the value of childEls. 
    */
        getChildEls():any;
    /**
    Returns the content region of this element for purposes of constraining floating
children. 
    */
        getConstrainRegion():void;
    /**
    Returns the [X, Y] vector by which this Positionable's element must be translated to make a best
attempt to constrain
    */
        getConstrainVector(constrainTo?: Ext.util.Positionable|HTMLElement|string|Ext.util.Region, proposedPosition?: number[], proposedSize?: number[]):number[]|boolean;
    /**
    Returns the Ext.app.ViewController instance associated with this
component via the controller config or setController
    */
        getController():Ext.app.ViewController;
    /**
    Returns the value of data. 
    */
        getData():any;
    /**
    Returns the value of defaultListenerScope. 
    */
        getDefaultListenerScope():boolean;
    /**
    Retrieves the top level element representing this component. 
    */
        getEl():Ext.dom.Element;
    /**
    Returns the focus styling holder element associated with this Focusable. 
    */
        getFocusClsEl():Ext.dom.Element;
    /**
    Returns the focus holder element associated with this Focusable. 
    */
        getFocusEl():Ext.dom.Element;
    /**
    Gets the current height of the component's underlying element. 
    */
        getHeight():number;
    /**
    Retrieves the id of this component. 
    */
        getId():string;
    /**
    This method returns an object containing the inherited properties for this instance. 
    */
        getInherited(inner?: boolean):any;
    /**
    This method returns the value of a config property that may be inherited from some
ancestor. 
    */
        getInheritedConfig(property: string, skipThis?: boolean):any;
    /**
    This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insert
    */
        getInsertPosition(position: string|number|Ext.dom.Element|HTMLElement):HTMLElement;
    /**
    Returns the value of itemId assigned to this component, or when that
is not set, returns the value of id. 
    */
        getItemId():string;
    /**
    Gets the Ext.ComponentLoader for this Component. 
    */
        getLoader():Ext.ComponentLoader;
    /**
    Overridden in Ext.rtl.Component. 
    */
        getLocalX():number;
    /**
    Overridden in Ext.rtl.Component. 
    */
        getLocalXY():number[];
    /**
    Returns the y coordinate of this element reletive to its offsetParent. 
    */
        getLocalY():number;
    /**
    Returns the element which is masked by the mask method, or into which the LoadMask is rendered into. 
    */
        getMaskTarget():void;
    /**
    Returns the value of maxHeight. 
    */
        getMaxHeight():number;
    /**
    Returns the value of maxWidth. 
    */
        getMaxWidth():number;
    /**
    Returns the value of minHeight. 
    */
        getMinHeight():number;
    /**
    Returns the value of minWidth. 
    */
        getMinWidth():number;
    /**
    Returns the offsets of this element from the passed element. 
    */
        getOffsetsTo(offsetsTo: Ext.util.Positionable|HTMLElement|string):number[];
    /**
    Retrieves a plugin from this component's collection by its pluginId. 
    */
        getPlugin(pluginId: string):Ext.plugin.Abstract;
    /**
    Gets the current XY position of the component's underlying element. 
    */
        getPosition(local?: boolean):number[];
    /**
    Returns the value of publishes. 
    */
        getPublishes():any;
    /**
    Used by ComponentQuery, and the up
method to find the owning Component in the linkage hierarchy. 
    */
        getRefOwner():void;
    /**
    Returns the value of reference. 
    */
        getReference():string;
    /**
    Returns a region object that defines the area of this element. 
    */
        getRegion():Ext.util.Region;
    /**
    Returns the "x" scroll position for this component. 
    */
        getScrollX():number;
    /**
    Returns the "y" scroll position for this component. 
    */
        getScrollY():number;
    /**
    Returns the value of scrollable. 
    */
        getScrollable():any;
    /**
    Returns the value of session. 
    */
        getSession():any;
    /**
    Gets the current size of the component's underlying element. 
    */
        getSize(contentSize?: boolean):any;
    /**
    Returns an object that describes how this component's width and height are managed. 
    */
        getSizeModel(ownerCtSizeModel: any):any;
    /**
    The supplied default state gathering method for the Component class. 
    */
        getState():any;
    /**
    Return the actual tabIndex for this Focusable. 
    */
        getTabIndex():number;
    /**
    Returns the value of twoWayBindable. 
    */
        getTwoWayBindable():any;
    /**
    Returns the value of viewModel. 
    */
        getViewModel():any;
    /**
    Returns the content region of this element. 
    */
        getViewRegion():Ext.util.Region;
    /**
    Gets the current width of the component's underlying element. 
    */
        getWidth():number;
    /**
    Gets the current X position of the DOM element based on page coordinates. 
    */
        getX():number;
    /**
    Gets the xtype for this component as registered with Ext.ComponentManager. 
    */
        getXType():string;
    /**
    Returns this Component's xtype hierarchy as a slash-delimited string. 
    */
        getXTypes():string;
    /**
    Gets the current position of the DOM element based on page coordinates. 
    */
        getXY():number[];
    /**
    Gets the current Y position of the DOM element based on page coordinates. 
    */
        getY():number;
    /**
    Returns the current animation if this object has any effects actively running or queued, else returns false. 
    */
        hasActiveFx():Ext.fx.Anim|boolean;
    /**
    Checks if the specified CSS class exists on this element's DOM node. 
    */
        hasCls(className: string):boolean;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Checks if there is currently a specified uiCls. 
    */
        hasUICls(cls: string):void;
    /**
    Hides this Component, setting it to invisible using the configured hideMode. 
    */
        hide(animateTarget?: string|Ext.dom.Element|Ext.Component, callback?: Function, scope?: any):Ext.Component;
    /**
    The initComponent template method is an important initialization step for a Component. 
    */
        initComponent():void;
    /**
    Initialize any events on this component 
    */
        initEvents():void;
    /**
    Template method to do any Focusable related initialization that
does not involve event listeners creation. 
    */
        initFocusable():void;
    /**
    Template method to do any event listener initialization for a Focusable. 
    */
        initFocusableEvents():void;
    /**
    Called by getInherited to initialize the inheritedState the first time it is
requested. 
    */
        initInheritedState(inheritedState: any):void;
    /**
    Initialized the renderData to be used when rendering the renderTpl. 
    */
        initRenderData():any;
    /**
    Tests whether this Component matches a ComponentQuery
selector string. 
    */
        is(selector: string):boolean;
    /**
    Determines whether this Component is an ancestor of the passed Component. 
    */
        isAncestor(possibleDescendant: Ext.Component):void;
    /**
    Determines whether this component is the descendant of a passed component. 
    */
        isDescendantOf(ancestor: Ext.Component):boolean;
    /**
    Method to determine whether this Component is currently disabled. 
    */
        isDisabled():boolean;
    /**
    Method to determine whether this Component is draggable. 
    */
        isDraggable():boolean;
    /**
    Method to determine whether this Component is droppable. 
    */
        isDroppable():boolean;
    /**
    Method to determine whether this Component is floating. 
    */
        isFloating():boolean;
    /**
    Determine if this Focusable can receive focus at this time. 
    */
        isFocusable(deep?: boolean):boolean;
    /**
    Method to determine whether this Component is currently set to hidden. 
    */
        isHidden():boolean;
    /**
    Determines whether this Component is the root of a layout. 
    */
        isLayoutRoot():void;
    /**
    Returns true if layout is suspended for this component. 
    */
        isLayoutSuspended():boolean;
    /**
    Returns masked state for this Component. 
    */
        isMasked(deep?: boolean):boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Returns true if this component is visible. 
    */
        isVisible(deep?: boolean):boolean;
    /**
    Tests whether or not this Component is of a specific xtype. 
    */
        isXType(xtype: string, shallow?: boolean):boolean;
    /**
    Gets the controller that controls this view. 
    */
        lookupController(skipThis?: boolean):Ext.app.ViewController;
    /**
    Returns the Ext.data.Session for this instance. 
    */
        lookupSession(skipThis?: boolean):Ext.data.Session;
    /**
    Returns the Ext.app.ViewModel for this instance. 
    */
        lookupViewModel(skipThis?: boolean):Ext.app.ViewModel;
    /**
    Masks this component with a semi-opaque layer and makes the contents unavailable to clicks. 
    */
        mask(msg?: string, msgCls?: string):void;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Move the element relative to its current position. 
    */
        move(direction: string, distance: number):void;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Returns the next node in the Component tree in tree traversal order. 
    */
        nextNode(selector?: string):Ext.Component;
    /**
    Returns the next sibling of this Component. 
    */
        nextSibling(selector?: string):Ext.Component;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Method to manage awareness of when components are added to their
respective Container, firing an added event. 
    */
        onAdded(container: Ext.container.Container, pos: number, instanced: boolean):void;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Invoked when this component has first achieved size. 
    */
        onBoxReady(width: number, height: number):void;
    /**
    Allows addition of behavior to the destroy operation. 
    */
        onDestroy():void;
    /**
    Allows addition of behavior to the disable operation. 
    */
        onDisable():void;
    /**
    Allows addition of behavior to the enable operation. 
    */
        onEnable():void;
    /**
    Called when focus enters this Component's hierarchy 
    */
        onFocusEnter(e: Ext.event.Event):void;
    /**
    Called when focus exits from this Component's hierarchy 
    */
        onFocusLeave(e: Ext.event.Event):void;
    /**
    Allows addition of behavior to the hide operation. 
    */
        onHide(animateTarget?: string|Ext.dom.Element|Ext.Component, callback?: Function, scope?: any):void;
    /**
    Called after the component is moved, this method is empty by default but can be implemented by any
subclass that need
    */
        onPosition(x: number, y: number):void;
    /**
    Method to manage awareness of when components are removed from their
respective Container, firing a removed event. 
    */
        onRemoved(destroying: boolean):void;
    /**
    Template method called when this Component's DOM structure is created. 
    */
        onRender(parentNode: Ext.dom.Element, containerIdx: number):void;
    /**
    Called when the component is resized. 
    */
        onResize(width: any, height: any, oldWidth: any, oldHeight: any):void;
    /**
    Invoked when a scroll operation is completed via this component's scroller. 
    */
        onScrollEnd(x: number, y: number):void;
    /**
    Invoked when this component is scrolled via its scroller. 
    */
        onScrollMove(x: number, y: number):void;
    /**
    Invoked when a scroll is initiated on this component via its scroller. 
    */
        onScrollStart(x: number, y: number):void;
    /**
    Allows addition of behavior to the show operation. 
    */
        onShow(animateTarget?: string|Ext.dom.Element, callback?: Function, scope?: any):void;
    /**
    Invoked after the afterShow method is complete. 
    */
        onShowComplete(callback?: Function, scope?: any):void;
    /**
    Template method to do any post-blur processing. 
    */
        postBlur(e: Ext.event.Event):void;
    /**
    Template method to do any post-focus processing. 
    */
        postFocus(e: Ext.event.Event):void;
    /**
    Returns the previous node in the Component tree in tree traversal order. 
    */
        previousNode(selector?: string):Ext.Component;
    /**
    Returns the previous sibling of this Component. 
    */
        previousSibling(selector?: string):Ext.Component;
    /**
    Publish this components state to the ViewModel. 
    */
        publishState(property?: string, value?: any):void;
    /**
    Called by Component#doAutoRender

Register a Container configured floating: true with this Component's ZIndexManager. 
    */
        registerFloatingItem(cmp: any):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a CSS class from the top level element representing this component. 
    */
        removeClass(cls: string|string[]):Ext.Component;
    /**
    Removes a CSS class from the top level element representing this component. 
    */
        removeCls(cls: string|string[]):Ext.Component;
    /**
    Removes a cls to the uiCls array, which will also call removeUIClsFromElement and removes it from all
elements of thi
    */
        removeClsWithUI(cls: string|string[]):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Method which removes a specified UI + uiCls from the components element. 
    */
        removeUIClsFromElement(uiCls: string):void;
    /**
    Renders the Component into the passed HTML element. 
    */
        render(container?: Ext.dom.Element|HTMLElement|string, position?: string|number):void;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Returns the default listener scope for a "satellite" of this component. 
    */
        resolveSatelliteListenerScope(satellite: Ext.mixin.Observable, defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    Conditionally saves a single property from this object to the given state object. 
    */
        savePropToState(propName: string, state: any, stateName?: string):boolean;
    /**
    Gathers additional named properties of the instance and adds their current values
to the passed state object. 
    */
        savePropsToState(propNames: string|string[], state: any):any;
    /**
    Saves the state of the object to the persistence store. 
    */
        saveState():void;
    /**
    Scrolls this Component by the passed delta values, optionally animating. 
    */
        scrollBy(deltaX: any, deltaY: any, animate: any):void;
    /**
    Scrolls this component to the specified x and y coordinates. 
    */
        scrollTo(x: number, y: number, animate?: any):void;
    /**
    Ensures that all effects queued after sequenceFx is called on this object are run in sequence. 
    */
        sequenceFx():any;
    /**
    Sets the value of alwaysOnTop. 
    */
        setAlwaysOnTop(alwaysOnTop: boolean|number):void;
    /**
    Sets the overflow on the content element of the component. 
    */
        setAutoScroll(scroll: boolean):Ext.Component;
    /**
    Sets the value of bind. 
    */
        setBind(bind: any):void;
    /**
     
    */
        setBorder(border: string|number):void;
    /**
    Sets the element's box. 
    */
        setBox(box: any):Ext.util.Positionable;
    /**
    Sets the value of childEls. 
    */
        setChildEls(childEls: any):void;
    /**
    Sets the value of controller. 
    */
        setController(controller: any):void;
    /**
    Sets the value of data. 
    */
        setData(data: any):void;
    /**
    Sets the value of defaultListenerScope. 
    */
        setDefaultListenerScope(defaultListenerScope: boolean):void;
    /**
    Enable or disable the component. 
    */
        setDisabled(disabled: boolean):void;
    /**
    Sets the dock position of this component in its parent panel. 
    */
        setDock(dock: any):Ext.Component;
    /**
    Sets the dock position of this component in its parent panel. 
    */
        setDocked(dock: any):Ext.Component;
    /**
    Sets the height of the component. 
    */
        setHeight(height: number):Ext.Component;
    /**
    Sets the hidden state of this component. 
    */
        setHidden(hidden: boolean):Ext.Component;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    This method allows you to show or hide a LoadMask on top of this component. 
    */
        setLoading(load: any):Ext.LoadMask;
    /**
    Overridden in Ext.rtl.Component. 
    */
        setLocalX(x: any):Ext.util.Positionable;
    /**
    Overridden in Ext.rtl.Component. 
    */
        setLocalXY(x: any, y: any):Ext.util.Positionable;
    /**
    Sets the local y coordinate of this element using CSS style. 
    */
        setLocalY(y: any):Ext.util.Positionable;
    /**
    Sets the margin on the target element. 
    */
        setMargin(margin: number|string):void;
    /**
    Sets the value of maxHeight. 
    */
        setMaxHeight(maxHeight: number):void;
    /**
    Sets the value of maxWidth. 
    */
        setMaxWidth(maxWidth: number):void;
    /**
    Sets the value of minHeight. 
    */
        setMinHeight(minHeight: number):void;
    /**
    Sets the value of minWidth. 
    */
        setMinWidth(minWidth: number):void;
    /**
    Sets the overflow x/y on the content element of the component. 
    */
        setOverflowXY(overflowX: string, overflowY: string):Ext.Component;
    /**
    Sets the page XY position of the component. 
    */
        setPagePosition(x: number|number[], y?: number, animate?: any):Ext.Component;
    /**
    Sets the left and top of the component. 
    */
        setPosition(x: any, y?: number, animate?: any):Ext.Component;
    /**
    Sets the value of publishes. 
    */
        setPublishes(publishes: any):void;
    /**
    Sets the value of reference. 
    */
        setReference(reference: string):void;
    /**
    This method changes the region config property for this border region. 
    */
        setRegion(region: string):string;
    /**
    Sets the "x" scroll position for this component. 
    */
        setScrollX(x: number, animate?: any):void;
    /**
    Sets the "y" scroll position for this component. 
    */
        setScrollY(y: number, animate?: any):void;
    /**
    Sets the value of scrollable. 
    */
        setScrollable(scrollable: any):void;
    /**
    Sets the value of session. 
    */
        setSession(session: any):void;
    /**
    Sets the width and height of this Component. 
    */
        setSize(width: any, height: number|string):Ext.Component;
    /**
    Sets the style for this Component's primary element. 
    */
        setStyle(property: any, value?: string):Ext.Component;
    /**
    Set the tabIndex property for this Focusable. 
    */
        setTabIndex(newTabIndex: number):void;
    /**
    Sets the value of twoWayBindable. 
    */
        setTwoWayBindable(twoWayBindable: any):void;
    /**
    Sets the UI for the component. 
    */
        setUI(ui: string):void;
    /**
    Sets the value of viewModel. 
    */
        setViewModel(viewModel: any):void;
    /**
    Convenience function to hide or show this component by Boolean. 
    */
        setVisible(visible: boolean):Ext.Component;
    /**
    Sets the weight config property for this component. 
    */
        setWeight(weight: number):number;
    /**
    Sets the width of the component. 
    */
        setWidth(width: number):Ext.Component;
    /**
    Sets the X position of the DOM element based on page coordinates. 
    */
        setX(x: any, animate: any):Ext.util.Positionable;
    /**
    Sets the position of the DOM element in page coordinates. 
    */
        setXY(xy: any, animate: any):Ext.util.Positionable;
    /**
    Sets the Y position of the DOM element based on page coordinates. 
    */
        setY(y: any, animate: any):Ext.util.Positionable;
    /**
    Shows this Component, rendering it first if autoRender or
floating are true. 
    */
        show(animateTarget?: string|Ext.dom.Element, callback?: Function, scope?: any):Ext.Component;
    /**
    Displays component at specific xy position. 
    */
        showAt(x: number|number[], y?: number, animate?: any):Ext.Component;
    /**
    Shows this component by the specified Component or Element. 
    */
        showBy(component: Ext.Component|Ext.dom.Element, position?: string, offsets?: number[]):Ext.Component;
    /**
    Stops any running effects and clears this object's internal effects queue if it contains any additional effects
that 
    */
        stopAnimation():Ext.dom.Element;
    /**
    Stops any running effects and clears this object's internal effects queue if it contains any additional effects
that 
    */
        stopFx():Ext.dom.Element;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Ensures that all effects queued after syncFx is called on this object are run concurrently. 
    */
        syncFx():any;
    /**
    Sends this Component to the back of (lower z-index than) any other visible windows 
    */
        toBack():Ext.Component;
    /**
    Brings this floating Component to the front of any other visible, floating Components managed by the same
ZIndexManag
    */
        toFront(preventFocus?: boolean):Ext.Component;
    /**
    Translates the passed page coordinates into left/top css values for the element 
    */
        translatePoints(x: number|any[], y?: number):any;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes the mask applied by mask 
    */
        unmask():void;
    /**
    Navigates up the ownership hierarchy searching for an ancestor Container which matches any passed selector or component. 
    */
        up(selector?: string|Ext.Component, limit?: string|number|Ext.Component):Ext.container.Container;
    /**
    Update the content area of a component. 
    */
        update(htmlOrData: any, loadScripts?: boolean, callback?: Function, scriptScope?: any):void;
    /**
    Sets the current box measurements of the component's underlying element. 
    */
        updateBox(box: any):Ext.Component;
    /**
    Updates this component's layout. 
    */
        updateLayout(options?: any):void;
    /**
    Cancels layout of a component. 
    */
        cancelLayout(comp: Ext.Component):void;
    /**
    Performs all pending layouts that were scheduled while
suspendLayouts was in effect. 
    */
        flushLayouts():void;
    /**
    Find a Component that the given Element belongs to. 
    */
        fromElement(el: Ext.dom.Element|HTMLElement, topmost?: Ext.dom.Element|HTMLElement):Ext.Component|void;
    /**
    Resumes layout activity in the whole framework. 
    */
        resumeLayouts(flush?: boolean):void;
    /**
    Stops layouts from happening in the whole framework. 
    */
        suspendLayouts():void;
    /**
    Updates layout of a component. 
    */
        updateLayout(comp: Ext.Component, defer?: boolean):void;
    }
    interface ComponentLoaderConfig extends Ext.ElementLoaderConfig {
    /**
    true to have the loader make a request when the target is rendered. 
    */
        loadOnRender?: any;
    }
    /**
    This class is used to load content via Ajax into a Ext.Component. 
    */
    export class ComponentLoader extends Ext.ElementLoader {
    }
    /**
    Provides a registry of all Components (instances of Ext.Component or any subclass
thereof) on a page so that they can
    */
    export class ComponentManager {
    /**
    Creates a new Component from the specified config object using the config object's
xtype to determine the class to in
    */
        static create(config: any, defaultType?: string):Ext.Component;
    /**
    Executes the specified function once for each item in the collection. 
    */
        static each(fn: (key: string, value: number, length: number) => boolean, scope: any):void;
    /**
    Returns an item by id. 
    */
        static get(id: string):any;
    /**
    Returns an array of all components 
    */
        static getAll():any[];
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Gets the number of items in the collection. 
    */
        static getCount():number;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Checks if an item is registered. 
    */
        static isRegistered(component: string):boolean;
    /**
    Registers a function that will be called (a single time) when an item with the specified id is added to the manager. 
    */
        static onAvailable(id: string, fn: Function, scope: any):void;
    /**
    Registers a new item constructor, keyed by a type key. 
    */
        static registerType(type: string, cls: Function):void;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    /**
    Provides searching of Components within Ext.ComponentManager (globally) or a specific
Ext.container.Container on the 
    */
    export class ComponentQuery {
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Tests whether the passed Component matches the selector string. 
    */
        static is(component: Ext.Component, selector: string):boolean;
    /**
    Returns an array of matched Components from within the passed root object. 
    */
        static query(selector: string, root?: Ext.container.Container):Ext.Component[];
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Traverses the tree rooted at the passed root in post-order mode, calling the passed function on the nodes at each level. 
    */
        static visitPostOrder(selector: any, root: string, fn: (node: any) => any, scope?: any, extraArgs?: any[]):void;
    /**
    Traverses the tree rooted at the passed root in pre-order mode, calling the passed function on the nodes at each level. 
    */
        static visitPreOrder(selector: any, root: string, fn: (node: any) => any, scope?: any, extraArgs?: any[]):void;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface ConfigConfig {
    /**
    This function if supplied will be called as classes or instances provide values
that need to be combined with inherit
    */
        merge?: Function;
    }
    /**
    This class manages a config property. 
    */
    export class Config {
    /**
    Returns the name of the property that stores this config on the given instance or
class prototype. 
    */
        getInternalName(target: any):string;
    }
    /**
    This class manages the config properties for a class.

    */
    export class Configurator {
    }
    /**
    This class defines some basic methods for handling dates. 
    */
    export class Date {
    /**
    Date interval constant. 
    */
        static DAY: string;
    /**
    Date interval constant. 
    */
        static HOUR: string;
    /**
    Date interval constant. 
    */
        static MILLI: string;
    /**
    Date interval constant. 
    */
        static MINUTE: string;
    /**
    Date interval constant. 
    */
        static MONTH: string;
    /**
    Date interval constant. 
    */
        static SECOND: string;
    /**
    Date interval constant. 
    */
        static YEAR: string;
    /**
    An array of textual day names. 
    */
        static dayNames: string[];
    /**
    The date format string that the Ext.util.Format.dateRenderer
and Ext.util.Format.date functions use. 
    */
        static defaultFormat: string;
    /**
    An object hash containing default date values used during date parsing. 
    */
        static defaults: any;
    /**
    The base format-code to formatting-function hashmap used by the format method. 
    */
        static formatCodes: any;
    /**
    An object hash in which each property is a date formatting function. 
    */
        static formatFunctions: any;
    /**
    An array of textual month names. 
    */
        static monthNames: string[];
    /**
    An object hash of zero-based JavaScript month numbers (with short month names as keys). 
    */
        static monthNumbers: any;
    /**
    An object hash in which each property is a date parsing function. 
    */
        static parseFunctions: any;
    /**
    Global flag which determines if strict date parsing should be used. 
    */
        static useStrict: boolean;
    /**
    Provides a convenient method for performing basic date arithmetic. 
    */
        static add(date: Date, interval: string, value: number):Date;
    /**
    Align the date to unit. 
    */
        static align(date: Date, unit: string):Date;
    /**
    Checks if a date falls on or between the given start and end dates. 
    */
        static between(date: Date, start: Date, end: Date):boolean;
    /**
    Attempts to clear all time information from this Date by setting the time to midnight of the same day,
automatically 
    */
        static clearTime(date: Date, clone?: boolean):Date;
    /**
    Creates and returns a new Date instance with the exact same date value as the called instance. 
    */
        static clone(date: Date):Date;
    /**
    Calculate how many units are there between two time. 
    */
        static diff(min: Date, max: Date, unit: string):number;
    /**
    Formats a date given the supplied format string. 
    */
        static format(date: Date, format: string):string;
    /**
    Checks if the specified format contains information about
anything other than the time. 
    */
        static formatContainsDateInfo(format: string):boolean;
    /**
    Checks if the specified format contains hour information 
    */
        static formatContainsHourInfo(format: string):boolean;
    /**
    Get the numeric day number of the year, adjusted for leap year. 
    */
        static getDayOfYear(date: Date):number;
    /**
    Get the number of days in the current month, adjusted for leap year. 
    */
        static getDaysInMonth(date: Date):number;
    /**
    Returns the number of milliseconds between two dates. 
    */
        static getElapsed(dateA: Date, dateB?: Date):number;
    /**
    Get the date of the first day of the month in which this date resides. 
    */
        static getFirstDateOfMonth(date: Date):Date;
    /**
    Get the first day of the current month, adjusted for leap year. 
    */
        static getFirstDayOfMonth(date: Date):number;
    /**
    Get the offset from GMT of the current date (equivalent to the format specifier 'O'). 
    */
        static getGMTOffset(date: Date, colon?: boolean):string;
    /**
    Get the date of the last day of the month in which this date resides. 
    */
        static getLastDateOfMonth(date: Date):Date;
    /**
    Get the last day of the current month, adjusted for leap year. 
    */
        static getLastDayOfMonth(date: Date):number;
    /**
    Get the zero-based JavaScript month number for the given short/full month name. 
    */
        static getMonthNumber(name: string):number;
    /**
    Get the short day name for the given day number. 
    */
        static getShortDayName(day: number):string;
    /**
    Get the short month name for the given month number. 
    */
        static getShortMonthName(month: number):string;
    /**
    Get the English ordinal suffix of the current day (equivalent to the format specifier 'S'). 
    */
        static getSuffix(date: Date):string;
    /**
    Get the timezone abbreviation of the current date (equivalent to the format specifier 'T'). 
    */
        static getTimezone(date: Date):string;
    /**
    Get the numeric ISO-8601 week number of the year. 
    */
        static getWeekOfYear(date: Date):number;
    /**
    Checks if the current date is affected by Daylight Saving Time (DST). 
    */
        static isDST(date: Date):boolean;
    /**
    Compares if two dates are equal by comparing their values. 
    */
        static isEqual(date1: Date, date2: Date):boolean;
    /**
    Checks if the current date falls within a leap year. 
    */
        static isLeapYear(date: Date):boolean;
    /**
    Checks if the passed Date parameters will cause a JavaScript Date "rollover". 
    */
        static isValid(year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number):boolean;
    /**
    Parses the passed string using the specified date format. 
    */
        static parse(input: string, format: string, strict?: boolean):Date|void;
    /**
    Provides a convenient method for performing basic date arithmetic. 
    */
        static subtract(date: Date, interval: string, value: number):Date;
    /**
    Removes all escaping for a date format string. 
    */
        static unescapeFormat(format: string):string;
    }
    interface EditorConfig extends Ext.container.ContainerConfig {
    /**
    The position to align to (see Ext.util.Positionable.alignTo for more details). 
    */
        alignment?: string;
    /**
    True to complete the editing process if in edit mode when focus exits from this Editor's hierarchy. 
    */
        allowBlur?: boolean;
    /**
    True for the editor to automatically adopt the size of the underlying field. 
    */
        autoSize?: any;
    /**
    True to cancel the edit when the escape key is pressed. 
    */
        cancelOnEsc?: boolean;
    /**
    True to complete the edit when the enter key is pressed. 
    */
        completeOnEnter?: boolean;
    /**
    The Field object (or descendant) or config object for field

    */
        field?: Ext.form.field.Field;
    /**
    False to keep the bound element visible while the editor is displayed 
    */
        hideEl?: boolean;
    /**
    True to skip the edit completion process (no save, no events fired) if the user completes an edit and
the value has n
    */
        ignoreNoChange?: boolean;
    /**
    The offsets to use when aligning (see Ext.util.Positionable.alignTo for more details. 
    */
        offsets?: number[];
    /**
    An element to render to. 
    */
        parentEl?: string|HTMLElement|Ext.dom.Element;
    /**
    True to automatically revert the field value and cancel the edit when the user completes an edit and the field
valida
    */
        revertInvalid?: boolean;
    /**
    Handle the keydown/keypress events so they don't propagate 
    */
        swallowKeys?: boolean;
    /**
    True to update the innerHTML of the bound element when the update completes 
    */
        updateEl?: boolean;
    /**
    The data value of the underlying field 
    */
        value?: any;
    }
    /**
    The Editor class is used to provide inline editing for elements on the page. 
    */
    export class Editor extends Ext.container.Container {
    /**
    True if this editor is currently active. 
    */
        editing: boolean;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.EditorConfig);
    /**
    Cancels the editing process and hides the editor without persisting any changes. 
    */
        cancelEdit(remainVisible?: boolean):void;
    /**
    Ends the editing process, persists the changed value to the underlying field, and hides the editor. 
    */
        completeEdit(remainVisible?: boolean):void;
    /**
    Gets the data value of the editor 
    */
        getValue():any;
    /**
    Realigns the editor to the bound field based on the current alignment config value. 
    */
        realign(autoSize?: boolean):void;
    /**
    Sets the data value of the editor 
    */
        setValue(value: any):void;
    /**
    Starts the editing process and shows the editor. 
    */
        startEdit(el: string|HTMLElement|Ext.dom.Element, value?: string):void;
    }
    interface ElementLoaderConfig {
    /**
    Any additional options to be passed to the request, for example timeout or headers.

    */
        ajaxOptions?: any;
    /**
    true to have the loader make a request as soon as it is created. 
    */
        autoLoad?: any;
    /**
    Params that will be attached to every request. 
    */
        baseParams?: any;
    /**
    A function to be called when a load request finishes. 
    */
        callback?: Function|string;
    /**
    A function to be called when a load request fails. 
    */
        failure?: Function|string;
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    /**
    True or a string to show when the element is loading. 
    */
        loadMask?: boolean|string;
    /**
    Any params to be attached to the Ajax request. 
    */
        params?: any;
    /**
    A custom function to render the content to the element. 
    */
        renderer?: Function;
    /**
    The scope to execute the renderer function in.

    */
        rendererScope?: any;
    /**
    The scope to execute the success and failure functions in.

    */
        scope?: any;
    /**
    True to parse any inline script tags in the response. 
    */
        scripts?: boolean;
    /**
    A function to be called when a load request is successful. 
    */
        success?: Function|string;
    /**
    The target element for the loader. 
    */
        target?: HTMLElement|Ext.dom.Element|string;
    /**
    The url to retrieve the content from.

    */
        url?: string;
    }
    /**
    A class used to load remote content to an Element. 
    */
    export class ElementLoader extends Ext.Base {
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated ElementLoader, or subclass thereof. 
    */
        isLoader: boolean;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
    Aborts the active load request 
    */
        abort():void;
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Returns the target of this loader. 
    */
        getTarget():Ext.Component;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Checks whether the loader is automatically refreshing. 
    */
        isAutoRefreshing():boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Loads new data from the server. 
    */
        load(options: any):void;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Sets an Ext.dom.Element as the target of this loader. 
    */
        setTarget(target: string|HTMLElement|Ext.dom.Element):void;
    /**
    Automatically refreshes the content over a specified period. 
    */
        startAutoRefresh(interval: number, options?: any):void;
    /**
    Clears any auto refresh. 
    */
        stopAutoRefresh():void;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    }
    /**
    A helper class for the native JavaScript Error object that adds a few useful capabilities for handling
errors in an a
    */
    export class Error {
    /**
    Static flag that can be used to globally disable error reporting to the browser if set to true
(defaults to false). 
    */
        ignore: boolean;
    /**
    Globally handle any Ext errors that may be raised, optionally providing custom logic to
handle different errors indiv
    */
        handle(err: any):void;
    /**
    Raise an error that can include additional data and supports automatic console logging if available. 
    */
        raise(err: any):void;
    }
    /**
    Registers event handlers on DOM elements. 
    */
    export class EventManager {
    /**
    Appends an event handler to an element. 
    */
        static addListener(el: any, eventName: string, handler?: ((event: Ext.event.Event, target: Ext.dom.Element, options: any) => any)|string, scope?: any, options?: any):void;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Get the id of the element. 
    */
        static getId(element: HTMLElement|Ext.dom.Element):string;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Gets the x coordinate from the event 
    */
        static getPageX(event: any):number;
    /**
    Gets the x &amp; y coordinate from the event 
    */
        static getPageXY(event: any):number[];
    /**
    Gets the y coordinate from the event 
    */
        static getPageY(event: any):number;
    /**
    Gets the related target from the event. 
    */
        static getRelatedTarget(event: any):HTMLElement;
    /**
    Gets the target of the event. 
    */
        static getTarget(event: any):HTMLElement;
    /**
    Appends an event handler to an element. 
    */
        static on(el: any, eventName: string, handler?: ((event: Ext.event.Event, target: Ext.dom.Element, options: any) => any)|string, scope?: any, options?: any):void;
    /**
    Adds a listener to be notified when the browser window is resized and provides resize event buffering (100 millisecon
    */
        static onWindowResize(fn: Function, scope: any, options?: boolean):void;
    /**
    Adds a listener to be notified when the browser window is unloaded. 
    */
        static onWindowUnload(fn: Function, scope: any, options: boolean):void;
    /**
    Prevents the browsers default handling of the event. 
    */
        static preventDefault(event: Event):void;
    /**
    Recursively removes all previous added listeners from an element and its children. 
    */
        static purgeElement(el: any, eventName?: string):void;
    /**
    Removes all event handers from an element. 
    */
        static removeAll(el: any):void;
    /**
    Removes an event handler from an element. 
    */
        static removeListener(el: any, eventName: string, fn: Function, scope: any):void;
    /**
    Removes the passed window resize listener. 
    */
        static removeResizeListener(fn: Function, scope: any):void;
    /**
    Removes the passed window unload listener. 
    */
        static removeUnloadListener(fn: Function, scope: any):void;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Stop the event (preventDefault and stopPropagation) 
    */
        static stopEvent(event: Event):void;
    /**
    Cancels bubbling of the event. 
    */
        static stopPropagation(event: Event):void;
    /**
    Removes an event handler from an element. 
    */
        static un(el: any, eventName: string, fn: Function, scope: any):void;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface EventedConfig {
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    }
    /**
    

    */
    export class Evented extends Ext.Base {
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
     
    */
        constructor(config: Ext.EventedConfig);
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    }
    interface FactoryConfig {
    /**
    The prefix to apply to type values to form a complete alias. 
    */
        aliasPrefix?: string;
    /**
    The config property to set when the factory is given a config that is a string. 
    */
        defaultProperty?: string;
    /**
    An optional type to use if none is given to the factory at invocation. 
    */
        defaultType?: string;
    /**
    The property that identifies an object as instance vs a config. 
    */
        instanceProp?: string;
    /**
    The full classname of the type of instance to create when none is provided to the
factory. 
    */
        xclass?: string;
    }
    /**
    Manages factories for families of classes (classes with a common alias prefix). 
    */
    export class Factory {
    /**
    Creates an instance of this class family given configuration options. 
    */
        create(config?: any, defaultType?: string):any;
    /**
    Returns an instance of an ID generator based on the ID you pass in. 
    */
        dataIdentifier(id: string):any;
    /**
    For example, the layout alias family could be defined like this:

 Ext.Factory.define('layout', {
     defaultType: '
    */
        define(type: string, config?: any):Function;
    }
    /**
    Ext.FocusManager singleton is deprecated since Ext JS 5.1. 
    */
    export class FocusManager {
    /**
    Whether or not the FocusManager is currently enabled 
    */
        static enabled: boolean;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    /**
    A collection of useful static methods to deal with function callbacks.

    */
    export class Function {
    /**
    Create an alias to the provided method property with name methodName of object. 
    */
        static alias(object: any, methodName: string):Function;
    /**
    Create a new function from the provided fn, change this to the provided scope,
optionally overrides arguments for the
    */
        static bind(fn: Function, scope?: any, args?: any[], appendArgs?: boolean|number):Function;
    /**
    Captures the given parameters for a later call to Ext.callback. 
    */
        static bindCallback(callback: any, scope: any, args: any, delay: any, caller: any):Function;
    /**
    Create a "clone" of the provided method. 
    */
        static clone(method: Function):Function;
    /**
    Wraps the passed function in a barrier function which will call the passed function after the passed number of invoca
    */
        static createBarrier(count: number, fn: Function, scope: any):void;
    /**
    Creates a delegate function, optionally with a bound scope which, when called, buffers
the execution of the passed fu
    */
        static createBuffered(fn: Function, buffer: number, scope?: any, args?: any[]):Function;
    /**
    Creates a delegate (callback) which, when called, executes after a specific delay. 
    */
        static createDelayed(fn: Function, delay: number, scope?: any, args?: any[], appendArgs?: boolean|number):Function;
    /**
    Creates an interceptor function. 
    */
        static createInterceptor(origFn: Function, newFn: Function, scope?: any, returnValue?: any):Function;
    /**
    Create a combined function call sequence of the original function + the passed function. 
    */
        static createSequence(originalFn: Function, newFn: Function, scope?: any):Function;
    /**
    Creates a throttled version of the passed function which, when called repeatedly and
rapidly, invokes the passed func
    */
        static createThrottled(fn: Function, interval: number, scope?: any):Function;
    /**
    Calls this function after the number of milliseconds specified, optionally in a specific scope. 
    */
        static defer(fn: Function, millis: number, scope?: any, args?: any[], appendArgs?: boolean|number):number;
    /**
    A very commonly used method throughout the framework. 
    */
        static flexSetter(setter: (name: string, value: any) => any):Function;
    /**
    Adds behavior to an existing method that is executed after the
original behavior of the function. 
    */
        static interceptAfter(object: any, methodName: string, fn: Function, scope?: any):Function;
    /**
    Adds behavior to an existing method that is executed before the
original behavior of the function. 
    */
        static interceptBefore(object: any, methodName: string, fn: Function, scope?: any):Function;
    /**
    Calls this function repeatedly at a given interval, optionally in a specific scope. 
    */
        static interval(fn: Function, millis: number, scope?: any, args?: any[], appendArgs?: boolean|number):number;
    /**
    Create a new function from the provided fn, the arguments of which are pre-set to args. 
    */
        static pass(fn: Function, args: any[], scope?: any):Function;
    }
    interface GlobalEventsConfig {
    }
    /**
    An Observable through which Ext fires global events. 
    */
    export class GlobalEvents {
    /**
    This object holds a key for any event that has a listener. 
    */
        static hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        static isObservable: boolean;
    /**
    Appends an after-event handler. 
    */
        static addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        static addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        static addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        static addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        static clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        static clearManagedListeners():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        static enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        static fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        static fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        static fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        static hasListener(eventName: string):boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        static isSuspended(event?: string):boolean;
    /**
    Shorthand for addManagedListener. 
    */
        static mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        static mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        static on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        static onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        static onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        static relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        static removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        static removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        static removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        static removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Resumes firing of the named event(s). 
    */
        static resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        static resumeEvents(discardQueue?: boolean):void;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    An alias for addListener. 
    */
        static setListeners(listeners: any):void;
    /**
    Suspends firing of the named event(s). 
    */
        static suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        static suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        static un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        static unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        static unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface ImgConfig extends Ext.ComponentConfig {
    /**
    The descriptive text for non-visual UI description. 
    */
        alt?: string;
    /**
    A numeric unicode character code to serve as the image. 
    */
        glyph?: number|string;
    /**
    Optional CSS classes to add to the img element. 
    */
        imgCls?: string;
    /**
    The image src. 
    */
        src?: string;
    /**
    Specifies addtional information about the image. 
    */
        title?: string;
    }
    /**
    Simple helper class for easily creating image components. 
    */
    export class Img extends Ext.Component {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.ImgConfig);
    /**
    Updates the glyph of the image. 
    */
        setGlyph(glyph: number|string):void;
    /**
    Updates the src of the image. 
    */
        setSrc(src: string):void;
    }
    /**
    

    */
    export class Inventory {
    /**
    Get the aliases of a class by the class name 
    */
        getAliasesByName(name: string):any[];
    /**
    Get the name of a class by its alias. 
    */
        getNameByAlias(alias: string):string;
    /**
    Get the name of a class by its alternate name. 
    */
        getNameByAlternate(alternate: string):string;
    /**
    Converts a string expression to an array of matching class names. 
    */
        getNamesByExpression(expression: string|string[], exclude?: any, accumulate?: boolean):string[];
    /**
    This method returns a selector object that produces a selection of classes and
delivers them to the desired receiver. 
    */
        select(receiver: any, scope?: any):any;
    /**
    Sets the path of a namespace. 
    */
        setPath(name: any, path?: string):Ext.Inventory;
    }
    /**
    Modified version of Douglas Crockford's JSON.js that doesn't
mess with the Object prototype.

    */
    export class JSON {
    /**
    Decodes (parses) a JSON string to an object. 
    */
        static decode(json: string, safe?: boolean):any;
    /**
    Encodes an Object, Array or other value. 
    */
        static encode(o: any):string;
    /**
    Encodes a Date. 
    */
        static encodeDate(d: Date):string;
    /**
    Encodes a String. 
    */
        static encodeString(s: string):string;
    /**
    The function which encode uses to encode all javascript values to their JSON representations
when Ext.USE_NATIVE_JSON
    */
        static encodeValue(o: any):string;
    }
    interface LoadMaskConfig extends Ext.ComponentConfig {
    /**
    The text to display in a centered loading message box. 
    */
        msg?: string;
    /**
    Optional Store to which the mask is bound. 
    */
        store?: Ext.data.Store;
    /**
    The Component you wish to mask. 
    */
        target?: Ext.Component;
    /**
    Whether or not to use a loading message class or simply mask the bound element. 
    */
        useMsg?: boolean;
    /**
    True to mask the targetEl of the bound Component. 
    */
        useTargetEl?: boolean;
    }
    /**
    A modal, floating Component which may be shown above a specified Component while loading data. 
    */
    export class LoadMask extends Ext.Component {
    /**
    true in this class to identify an object as an instantiated LoadMask, or subclass thereof. 
    */
        isLoadMask: boolean;
    /**
    Creates new LoadMask. 
    */
        constructor(config?: Ext.LoadMaskConfig);
    /**
    Changes the data store bound to this LoadMask. 
    */
        bindStore(store: Ext.data.Store):void;
    /**
    Binds listeners for this component to the store. 
    */
        bindStoreListeners(store: Ext.data.AbstractStore):void;
    /**
    Gets the current store instance. 
    */
        getStore():Ext.data.AbstractStore;
    /**
    Gets the listeners to bind to a new store. 
    */
        getStoreListeners(store: any):any;
    /**
    Template method, it is called when a new store is bound
to the current instance. 
    */
        onBindStore(store: Ext.data.AbstractStore, initial: boolean):void;
    /**
    Template method, it is called when an existing store is unbound
from the current instance. 
    */
        onUnbindStore(store: Ext.data.AbstractStore, initial: boolean):void;
    /**
    Sets the store to the specified store. 
    */
        setStore(store: any):void;
    /**
    Unbinds listeners from this component to the store. 
    */
        unbindStoreListeners(store: Ext.data.AbstractStore):void;
    }
    interface LoaderConfig {
    /**
    Appends current timestamp to script files to prevent caching. 
    */
    /**
    The get parameter name for the cache buster's timestamp. 
    */
    /**
    Whether or not to enable the dynamic dependency loading feature. 
    */
    /**
    The mapping from namespaces to file paths

{
    'Ext': '.', // This is set by default, Ext.layout.container.Containe
    */
    /**
    false to remove asynchronously loaded scripts, true to retain script
element for browser debugger compatibility and i
    */
    /**
    millisecond delay between asynchronous script injection (prevents stack
overflow on some user agents) 'false' disable
    */
    /**
    Optional charset to specify encoding of dynamic script content.

    */
    }
    /**
    Ext.Loader is the heart of the new dynamic dependency loading capability in Ext JS 4+. 
    */
    export class Loader {
    /**
    An array of class names to keep track of the dependency loading order. 
    */
        static history: any[];
    /**
    fixes up loader path configs by prepending Ext.Boot#baseUrl to the beginning
of the path, then delegates to Ext.Loade
    */
        static addBaseUrlClassPathMappings(pathConfig: any):void;
    /**
    Sets a batch of path entries 
    */
        static addClassPathMappings(paths: any):Ext.Loader;
    /**
    Get the config value corresponding to the specified name. 
    */
        static getConfig(name: string):any;
    /**
    Translates a className to a file path by adding the
the proper prefix and converting the .'s to /'s. 
    */
        static getPath(className: string):string;
    /**
    Loads the specified script URL and calls the supplied callbacks. 
    */
        static loadScript(options: any):void;
    /**
    Add a new listener to be executed when all required scripts are fully loaded 
    */
        static onReady(fn: Function, scope: any, withDomReady?: boolean, options?: any):void;
    /**
    Set the configuration for the loader. 
    */
        static setConfig(config: any):Ext.Loader;
    /**
    Sets the path of a namespace. 
    */
        static setPath(name: any, path?: string):Ext.Loader;
    }
    interface MessageBoxConfig {
    }
    /**
    Utility class for generating different styles of message boxes. 
    */
    export class MessageBox {
    /**
    Button config that displays a single Cancel button 
    */
        static CANCEL: number;
    /**
    The CSS class that provides the ERROR icon image 
    */
        static ERROR: string;
    /**
    The CSS class that provides the INFO icon image 
    */
        static INFO: string;
    /**
    Button config that displays a single No button 
    */
        static NO: number;
    /**
    Button config that displays a single OK button 
    */
        static OK: number;
    /**
    Button config that displays OK and Cancel buttons 
    */
        static OKCANCEL: number;
    /**
    The CSS class that provides the QUESTION icon image 
    */
        static QUESTION: string;
    /**
    The CSS class that provides the WARNING icon image 
    */
        static WARNING: string;
    /**
    Button config that displays a single Yes button 
    */
        static YES: number;
    /**
    Button config that displays Yes and No buttons 
    */
        static YESNO: number;
    /**
    Button config that displays Yes, No and Cancel buttons 
    */
        static YESNOCANCEL: number;
    /**
    The Panel's body Element which may be used to contain HTML content. 
    */
        static body: Ext.dom.Element;
    /**
    An object containing the default button text strings that can be overriden for localized language support. 
    */
        static buttonText: any;
    /**
    The name of the padding property that is used by the layout to manage
padding. 
    */
        static contentPaddingProperty: string;
    /**
    If this Window is configured draggable, this property will contain an instance of
Ext.util.ComponentDragger (A subcla
    */
        static dd: Ext.util.ComponentDragger;
    /**
    The default height in pixels of the message box's multiline textarea if displayed. 
    */
        static defaultTextHeight: number;
    /**
    Only present for floating Components which were inserted as child
items of Containers. 
    */
        static floatParent: Ext.container.Container;
    /**
    The MixedCollection containing all the floating child items of this container.

    */
        static floatingItems: Ext.util.MixedCollection;
    /**
    true for interactive Components, false for static Components. 
    */
        static focusable: boolean;
    /**
    Indicates the width of any framing elements which were added within the encapsulating
element to provide graphical, r
    */
        static frameSize: any;
    /**
    This object holds a key for any event that has a listener. 
    */
        static hasListeners: any;
    /**
    The config object passed to the constructor during Component creation.

    */
        static initialConfig: any;
    /**
    true in this class to identify an object as an instantiated Component, or subclass thereof. 
    */
        static isComponent: boolean;
    /**
    true in this class to identify an object as an instantiated Container, or subclass thereof. 
    */
        static isContainer: boolean;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        static isObservable: boolean;
    /**
    true in this class to identify an object as an instantiated Panel, or subclass thereof. 
    */
        static isPanel: boolean;
    /**
    true in this class to identify an object as an instantiated Window, or subclass thereof. 
    */
        static isWindow: boolean;
    /**
    The MixedCollection containing all the child items of this container.

    */
        static items: Ext.util.AbstractMixedCollection;
    /**
    This is an internal flag that you use when creating custom components. 
    */
        static maskOnDisable: boolean;
    /**
    The minimum width in pixels of the message box if it is a progress-style dialog. 
    */
        static minProgressWidth: number;
    /**
    The minimum width in pixels of the message box if it is a prompt dialog. 
    */
        static minPromptWidth: number;
    /**
    This Component's owner Container (is set automatically
when this Component is added to a Container). 
    */
        static ownerCt: Ext.container.Container;
    /**
    Indicates whether or not the component has been rendered. 
    */
        static rendered: boolean;
    /**
    Only present for floating Components after
they have been rendered. 
    */
        static zIndexManager: Ext.ZIndexManager;
    /**
    Only present for Ext.Component.floating Components which were
inserted as child items of Containers, and which have a
    */
        static zIndexParent: Ext.container.Container;
    /**
    Adds Component(s) to this Container. 
    */
        static add(...component: any[]):Ext.Component[]|Ext.Component;
    /**
    Appends an after-event handler. 
    */
        static addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        static addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Adds a CSS class to the body element. 
    */
        static addBodyCls(cls: string):Ext.panel.Panel;
    /**
    Adds a CSS class to the top level element representing this component. 
    */
        static addClass(cls: string|string[]):Ext.Component;
    /**
    Adds a CSS class to the top level element representing this component. 
    */
        static addCls(cls: string|string[]):Ext.Component;
    /**
    Adds a cls to the uiCls array, which will also call addUIClsToElement and adds to all elements of this
component. 
    */
        static addClsWithUI(classes: string|string[], skip?: boolean):void;
    /**
    Adds docked item(s) to the container. 
    */
        static addDocked(items: any, pos?: number):Ext.Component[];
    /**
    The on method is shorthand for
addListener. 
    */
        static addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        static addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Add events that will trigger the state to be saved. 
    */
        static addStateEvents(events: string|string[]):void;
    /**
    Add tools to this panel 
    */
        static addTool(tools: any[]|Ext.panel.Tool[]):void;
    /**
    Method which adds a specified UI + uiCls to the components element. 
    */
        static addUIClsToElement(uiCls: string):void;
    /**
    Displays a standard read-only message box with an OK button (comparable to the basic JavaScript alert prompt). 
    */
        static alert(title: string, message: string, fn?: Function, scope?: any):Ext.window.MessageBox;
    /**
    Aligns the element with another element relative to the specified anchor points. 
    */
        static alignTo(element: Ext.util.Positionable|HTMLElement|string, position?: string, offsets?: number[]):Ext.util.Positionable;
    /**
    Performs custom animation on this object. 
    */
        static animate(animObj: any):any;
    /**
    Applies the state to the object. 
    */
        static applyState(state: any):void;
    /**
    Bubbles up the component/container hierarchy, calling the specified function with each component. 
    */
        static bubble(fn: Function, scope?: any, args?: any[]):Ext.Component;
    /**
    Cascades down the component/container heirarchy from this component (passed in
the first call), calling the specified
    */
        static cascade(fn: Function, scope?: any, args?: any[]):Ext.container.Container;
    /**
    Center this Component in its container. 
    */
        static center():Ext.Component;
    /**
    Retrieves the first direct child of this container which matches the passed selector or component. 
    */
        static child(selector?: string|Ext.Component):any;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        static clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        static clearManagedListeners():void;
    /**
    Clone the current component using the original config values passed into this instance by default. 
    */
        static cloneConfig(overrides: any):Ext.Component;
    /**
    Closes the Panel. 
    */
        static close():void;
    /**
    Collapses the panel body so that the body becomes hidden. 
    */
        static collapse(direction?: string, animate?: boolean):Ext.panel.Panel;
    /**
    Displays a confirmation message box with Yes and No buttons (comparable to JavaScript's confirm). 
    */
        static confirm(title: string, message: string, fn?: Function, scope?: any):Ext.window.MessageBox;
    /**
    Determines whether the passed Component is either an immediate child of this Container,
or whether it is a descendant. 
    */
        static contains(comp: Ext.Component, deep?: boolean):boolean;
    /**
    converts a collapsdDir into an anchor argument for Element.slideIn
overridden in rtl mode to switch "l" and "r" 
    */
        static convertCollapseDir(collapseDir: any):void;
    /**
    Disables all child input fields and buttons. 
    */
        static disable(silent: any, fromParent: any):void;
    /**
    This method needs to be called whenever you change something on this component that
requires the Component's layout t
    */
        static doComponentLayout():Ext.Component;
    /**
    Moves this floating Component into a constrain region. 
    */
        static doConstrain(constrainTo?: string|HTMLElement|Ext.dom.Element|Ext.util.Region):void;
    /**
    Manually force this container's layout to be recalculated. 
    */
        static doLayout():Ext.container.Container;
    /**
    Retrieves the first descendant of this container which matches the passed selector. 
    */
        static down(selector?: string|Ext.Component):any;
    /**
    Enables all child input fields and buttons. 
    */
        static enable(silent: any, fromParent: any):void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        static enableBubble(eventNames: string|string[]):void;
    /**
    Ensures that this component is attached to document.body. 
    */
        static ensureAttachedToBody(runLayout?: boolean):void;
    /**
    Expands the panel body so that it becomes visible. 
    */
        static expand(animate?: boolean):Ext.panel.Panel;
    /**
    Find a container above this component at any level by a custom function. 
    */
        static findParentBy(fn: Function):Ext.container.Container;
    /**
    Find a container above this component at any level by xtype or class

See also the up method. 
    */
        static findParentByType(xtype: string|Ext.Class):Ext.container.Container;
    /**
    Retrieves plugin from this component's collection by its ptype. 
    */
        static findPlugin(ptype: string):Ext.plugin.Abstract;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        static fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        static fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        static fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Try to focus this component. 
    */
        static focus(selectText?: any, delay?: boolean|number, callback?: Function, scope?: Function):Ext.Component;
    /**
    Updates this component's layout. 
    */
        static forceComponentLayout(options?: any):void;
    /**
    Returns the current animation if this object has any effects actively running or queued, else returns false. 
    */
        static getActiveAnimation():Ext.fx.Anim|boolean;
    /**
    Gets the x,y coordinates to align this element with another element. 
    */
        static getAlignToXY(element: Ext.util.Positionable|HTMLElement|string, position?: string, offsets?: number[]):number[];
    /**
    Returns the value of alwaysOnTop. 
    */
        static getAlwaysOnTop():boolean|number;
    /**
    Gets the x,y coordinates specified by the anchor position on the element. 
    */
        static getAnchorXY(anchor?: string, local?: boolean, size?: any):number[];
    /**
    Returns the value of bind. 
    */
        static getBind():any;
    /**
    Return an object defining the area of this Element which can be passed to
setBox to set another Element's size/locati
    */
        static getBox(contentBox?: boolean, local?: boolean):any;
    /**
    Return the immediate child Component in which the passed element is located. 
    */
        static getChildByElement(el: Ext.dom.Element|HTMLElement|string, deep: boolean):Ext.Component;
    /**
    Returns the value of childEls. 
    */
        static getChildEls():any;
    /**
    Returns the current collapsed state of the panel. 
    */
        static getCollapsed():boolean|string;
    /**
    Attempts a default component lookup (see Ext.container.Container.getComponent). 
    */
        static getComponent(comp: string|number):Ext.Component;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the content region of this element for purposes of constraining floating
children. 
    */
        static getConstrainRegion():void;
    /**
    Returns the [X, Y] vector by which this Positionable's element must be translated to make a best
attempt to constrain
    */
        static getConstrainVector(constrainTo?: Ext.util.Positionable|HTMLElement|string|Ext.util.Region, proposedPosition?: number[], proposedSize?: number[]):number[]|boolean;
    /**
    Returns the Ext.app.ViewController instance associated with this
component via the controller config or setController
    */
        static getController():Ext.app.ViewController;
    /**
    Returns the value of data. 
    */
        static getData():any;
    /**
    Gets the configured default focus item. 
    */
        static getDefaultFocus():void;
    /**
    Returns the value of defaultListenerScope. 
    */
        static getDefaultListenerScope():boolean;
    /**
    Finds a docked component by id, itemId or position. 
    */
        static getDockedComponent(comp: string|number):Ext.Component;
    /**
    Retrieves an array of all currently docked Components. 
    */
        static getDockedItems(selector: string, beforeBody: boolean):Ext.Component[];
    /**
    Retrieves the top level element representing this component. 
    */
        static getEl():Ext.dom.Element;
    /**
    Returns the value of glyph. 
    */
        static getGlyph():any;
    /**
    Gets the Header for this panel. 
    */
        static getHeader():Ext.panel.Header;
    /**
    Returns the value of headerPosition. 
    */
        static getHeaderPosition():any;
    /**
    Gets the current height of the component's underlying element. 
    */
        static getHeight():number;
    /**
    Returns the value of icon. 
    */
        static getIcon():any;
    /**
    Returns the value of iconAlign. 
    */
        static getIconAlign():any;
    /**
    Returns the value of iconCls. 
    */
        static getIconCls():any;
    /**
    Retrieves the id of this component. 
    */
        static getId():string;
    /**
    This method returns an object containing the inherited properties for this instance. 
    */
        static getInherited(inner?: boolean):any;
    /**
    This method returns the value of a config property that may be inherited from some
ancestor. 
    */
        static getInheritedConfig(property: string, skipThis?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insert
    */
        static getInsertPosition(position: string|number|Ext.dom.Element|HTMLElement):HTMLElement;
    /**
    Returns the value of itemId assigned to this component, or when that
is not set, returns the value of id. 
    */
        static getItemId():string;
    /**
    Returns the layout instance currently associated with this Container. 
    */
        static getLayout():Ext.layout.container.Container;
    /**
    Gets the Ext.ComponentLoader for this Component. 
    */
        static getLoader():Ext.ComponentLoader;
    /**
    Overridden in Ext.rtl.Component. 
    */
        static getLocalX():number;
    /**
    Overridden in Ext.rtl.Component. 
    */
        static getLocalXY():number[];
    /**
    Returns the y coordinate of this element reletive to its offsetParent. 
    */
        static getLocalY():number;
    /**
    Returns the value of maxHeight. 
    */
        static getMaxHeight():number;
    /**
    Returns the value of maxWidth. 
    */
        static getMaxWidth():number;
    /**
    Returns the value of minHeight. 
    */
        static getMinHeight():number;
    /**
    Returns the value of minWidth. 
    */
        static getMinWidth():number;
    /**
    Returns the offsets of this element from the passed element. 
    */
        static getOffsetsTo(offsetsTo: Ext.util.Positionable|HTMLElement|string):number[];
    /**
    Retrieves a plugin from this component's collection by its pluginId. 
    */
        static getPlugin(pluginId: string):Ext.plugin.Abstract;
    /**
    Gets the current XY position of the component's underlying element. 
    */
        static getPosition(local?: boolean):number[];
    /**
    Returns the value of publishes. 
    */
        static getPublishes():any;
    /**
    Returns the value of reference. 
    */
        static getReference():string;
    /**
    Returns an object holding the descendants of this view keyed by their
reference. 
    */
        static getReferences():any;
    /**
    Returns a region object that defines the area of this element. 
    */
        static getRegion():Ext.util.Region;
    /**
    Returns the "x" scroll position for this component. 
    */
        static getScrollX():number;
    /**
    Returns the "y" scroll position for this component. 
    */
        static getScrollY():number;
    /**
    Returns the value of scrollable. 
    */
        static getScrollable():any;
    /**
    Returns the value of session. 
    */
        static getSession():any;
    /**
    Gets the current size of the component's underlying element. 
    */
        static getSize(contentSize?: boolean):any;
    /**
    Return the actual tabIndex for this Focusable. 
    */
        static getTabIndex():number;
    /**
    Returns the value of title. 
    */
        static getTitle():string;
    /**
    Returns the value of titleAlign. 
    */
        static getTitleAlign():any;
    /**
    Returns the value of titleRotation. 
    */
        static getTitleRotation():any;
    /**
    Returns the value of twoWayBindable. 
    */
        static getTwoWayBindable():any;
    /**
    Returns the value of viewModel. 
    */
        static getViewModel():any;
    /**
    Returns the content region of this element. 
    */
        static getViewRegion():Ext.util.Region;
    /**
    Gets the current width of the component's underlying element. 
    */
        static getWidth():number;
    /**
    Gets the current X position of the DOM element based on page coordinates. 
    */
        static getX():number;
    /**
    Gets the xtype for this component as registered with Ext.ComponentManager. 
    */
        static getXType():string;
    /**
    Returns this Component's xtype hierarchy as a slash-delimited string. 
    */
        static getXTypes():string;
    /**
    Gets the current position of the DOM element based on page coordinates. 
    */
        static getXY():number[];
    /**
    Gets the current Y position of the DOM element based on page coordinates. 
    */
        static getY():number;
    /**
    Returns the current animation if this object has any effects actively running or queued, else returns false. 
    */
        static hasActiveFx():Ext.fx.Anim|boolean;
    /**
    Checks if the specified CSS class exists on this element's DOM node. 
    */
        static hasCls(className: string):boolean;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        static hasListener(eventName: string):boolean;
    /**
    Checks if there is currently a specified uiCls. 
    */
        static hasUICls(cls: string):void;
    /**
    Hides this Component, setting it to invisible using the configured hideMode. 
    */
        static hide():Ext.Component;
    /**
    Inserts a Component into this Container at a specified index. 
    */
        static insert(index: number, component: any):Ext.Component;
    /**
    Inserts docked item(s) to the panel at the indicated position. 
    */
        static insertDocked(pos: number, items: any):void;
    /**
    Tests whether this Component matches a ComponentQuery
selector string. 
    */
        static is(selector: string):boolean;
    /**
    Determines whether this Component is an ancestor of the passed Component. 
    */
        static isAncestor(possibleDescendant: Ext.Component):void;
    /**
    Determines whether this component is the descendant of a passed component. 
    */
        static isDescendantOf(ancestor: Ext.Component):boolean;
    /**
    Method to determine whether this Component is currently disabled. 
    */
        static isDisabled():boolean;
    /**
    Method to determine whether this Component is draggable. 
    */
        static isDraggable():boolean;
    /**
    Method to determine whether this Component is droppable. 
    */
        static isDroppable():boolean;
    /**
    Method to determine whether this Component is floating. 
    */
        static isFloating():boolean;
    /**
    Determine if this Focusable can receive focus at this time. 
    */
        static isFocusable(deep?: boolean):boolean;
    /**
    Method to determine whether this Component is currently set to hidden. 
    */
        static isHidden():boolean;
    /**
    Returns true if layout is suspended for this component. 
    */
        static isLayoutSuspended():boolean;
    /**
    Returns masked state for this Component. 
    */
        static isMasked(deep?: boolean):boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        static isSuspended(event?: string):boolean;
    /**
    Returns true if this component is visible. 
    */
        static isVisible(deep: any):boolean;
    /**
    Tests whether or not this Component is of a specific xtype. 
    */
        static isXType(xtype: string, shallow?: boolean):boolean;
    /**
    Gets the controller that controls this view. 
    */
        static lookupController(skipThis?: boolean):Ext.app.ViewController;
    /**
    Gets a reference to a child specified using the reference configuration. 
    */
        static lookupReference(key: string):Ext.Component;
    /**
    Returns the Ext.data.Session for this instance. 
    */
        static lookupSession(skipThis?: boolean):Ext.data.Session;
    /**
    Returns the Ext.app.ViewModel for this instance. 
    */
        static lookupViewModel(skipThis?: boolean):Ext.app.ViewModel;
    /**
    Masks this component with a semi-opaque layer and makes the contents unavailable to clicks. 
    */
        static mask(msg?: string, msgCls?: string):void;
    /**
    Fits the window within its current container and automatically replaces the &#39;maximize&#39; tool
button with the '
    */
        static maximize(animate?: boolean):Ext.window.Window;
    /**
    Placeholder method for minimizing the window. 
    */
        static minimize():Ext.window.Window;
    /**
    Shorthand for addManagedListener. 
    */
        static mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Moves a Component within the Container. 
    */
        static move(fromIdx: number|Ext.Component, toIdx: number):Ext.Component;
    /**
    Moves the given item(s) into this container following after. 
    */
        static moveAfter(item: Ext.Component|Ext.Component[], after: Ext.Component):Ext.Component|Ext.Component[];
    /**
    Moves the given item(s) into this container in front of before. 
    */
        static moveBefore(item: Ext.Component|Ext.Component[], before: Ext.Component):Ext.Component|Ext.Component[];
    /**
    Shorthand for removeManagedListener. 
    */
        static mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    A method to find a child component after the passed child parameter. 
    */
        static nextChild(child: Ext.Component, selector?: string):Ext.Component;
    /**
    Returns the next node in the Component tree in tree traversal order. 
    */
        static nextNode(selector?: string):Ext.Component;
    /**
    Returns the next sibling of this Component. 
    */
        static nextSibling(selector?: string):Ext.Component;
    /**
    The on method is shorthand for
addListener. 
    */
        static on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        static onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        static onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Method to manage awareness of when components are removed from their
respective Container, firing a removed event. 
    */
        static onRemoved(destroying: any):void;
    /**
    A method to find a child component before the passed child parameter. 
    */
        static prevChild(child: Ext.Component, selector?: string):Ext.Component;
    /**
    Returns the previous node in the Component tree in tree traversal order. 
    */
        static previousNode(selector?: string):Ext.Component;
    /**
    Returns the previous sibling of this Component. 
    */
        static previousSibling(selector?: string):Ext.Component;
    /**
    Displays a message box with a progress bar. 
    */
        static progress(title: string, message: string, progressText?: string):Ext.window.MessageBox;
    /**
    Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to JavaScript's p
    */
        static prompt(title: string, message: string, fn?: Function, scope?: any, multiline?: boolean|number, value?: string):Ext.window.MessageBox;
    /**
    Retrieves all descendant components which match the passed selector. 
    */
        static query(selector?: string):Ext.Component[];
    /**
    Retrieves all descendant components which match the passed function. 
    */
        static queryBy(fn: Function, scope?: any):Ext.Component[];
    /**
    Finds a component at any level under this container matching the id/itemId. 
    */
        static queryById(id: string):Ext.Component;
    /**
    Called by Component#doAutoRender

Register a Container configured floating: true with this Component's ZIndexManager. 
    */
        static registerFloatingItem(cmp: any):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        static relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a component from this container. 
    */
        static remove(component: any, autoDestroy: any):Ext.Component;
    /**
    Removes a before-event handler. 
    */
        static removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes all components from this container. 
    */
        static removeAll(autoDestroy?: boolean):Ext.Component[];
    /**
    Removes a before-event handler. 
    */
        static removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a CSS class from the body element. 
    */
        static removeBodyCls(cls: string):Ext.panel.Panel;
    /**
    Removes a CSS class from the top level element representing this component. 
    */
        static removeClass(cls: string|string[]):Ext.Component;
    /**
    Removes a CSS class from the top level element representing this component. 
    */
        static removeCls(cls: string|string[]):Ext.Component;
    /**
    Removes a cls to the uiCls array, which will also call removeUIClsFromElement and removes it from all
elements of thi
    */
        static removeClsWithUI(cls: string|string[]):void;
    /**
    Removes the docked item from the panel. 
    */
        static removeDocked(item: Ext.Component, autoDestroy?: boolean):void;
    /**
    Removes an event handler. 
    */
        static removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        static removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Renders the Component into the passed HTML element. 
    */
        static render(container?: Ext.dom.Element|HTMLElement|string, position?: string|number):void;
    /**
    Restores a maximized window back to its original size and position prior to being maximized
and also replaces the 're
    */
        static restore(animate?: boolean):Ext.window.Window;
    /**
    Resumes firing of the named event(s). 
    */
        static resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        static resumeEvents(discardQueue?: boolean):void;
    /**
    Conditionally saves a single property from this object to the given state object. 
    */
        static savePropToState(propName: string, state: any, stateName?: string):boolean;
    /**
    Gathers additional named properties of the instance and adds their current values
to the passed state object. 
    */
        static savePropsToState(propNames: string|string[], state: any):any;
    /**
    Saves the state of the object to the persistence store. 
    */
        static saveState():void;
    /**
    Scrolls this Component by the passed delta values, optionally animating. 
    */
        static scrollBy(deltaX: any, deltaY: any, animate: any):void;
    /**
    Scrolls this component to the specified x and y coordinates. 
    */
        static scrollTo(x: number, y: number, animate?: any):void;
    /**
    Ensures that all effects queued after sequenceFx is called on this object are run in sequence. 
    */
        static sequenceFx():any;
    /**
    Sets a component as the active layout item. 
    */
        static setActiveItem(item: Ext.Component|number|string):Ext.Component;
    /**
    Sets the value of alwaysOnTop. 
    */
        static setAlwaysOnTop(alwaysOnTop: boolean|number):void;
    /**
    Sets the overflow on the content element of the component. 
    */
        static setAutoScroll(scroll: boolean):Ext.Component;
    /**
    Sets the value of bind. 
    */
        static setBind(bind: any):void;
    /**
    Sets the body style according to the passed parameters. 
    */
        static setBodyStyle(style: any, value: string):Ext.panel.Panel;
    /**
     
    */
        static setBorder(border: string|number):void;
    /**
    Sets the element's box. 
    */
        static setBox(box: any):Ext.util.Positionable;
    /**
    Sets the value of childEls. 
    */
        static setChildEls(childEls: any):void;
    /**
    Collapses or expands the panel. 
    */
        static setCollapsed(collapsed: boolean):void;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Sets the value of controller. 
    */
        static setController(controller: any):void;
    /**
    Sets the value of data. 
    */
        static setData(data: any):void;
    /**
    Sets the value of defaultListenerScope. 
    */
        static setDefaultListenerScope(defaultListenerScope: boolean):void;
    /**
    Enable or disable the component. 
    */
        static setDisabled(disabled: boolean):void;
    /**
    Sets the dock position of this component in its parent panel. 
    */
        static setDock(dock: any):Ext.Component;
    /**
    Sets the dock position of this component in its parent panel. 
    */
        static setDocked(dock: any):Ext.Component;
    /**
    Sets the value of headerPosition. 
    */
        static setHeaderPosition(headerPosition: any):void;
    /**
    Sets the height of the component. 
    */
        static setHeight(height: number):Ext.Component;
    /**
    Sets the hidden state of this component. 
    */
        static setHidden(hidden: boolean):Ext.Component;
    /**
    Adds the specified icon to the dialog. 
    */
        static setIcon(icon: string, width?: number, height?: number):Ext.window.MessageBox;
    /**
    Sets the value of iconAlign. 
    */
        static setIconAlign(iconAlign: any):void;
    /**
    Reconfigures the initially configured layout. 
    */
        static setLayout(configuration: any):void;
    /**
    An alias for addListener. 
    */
        static setListeners(listeners: any):void;
    /**
    This method allows you to show or hide a LoadMask on top of this component. 
    */
        static setLoading(load: any):Ext.LoadMask;
    /**
    Overridden in Ext.rtl.Component. 
    */
        static setLocalX(x: any):Ext.util.Positionable;
    /**
    Overridden in Ext.rtl.Component. 
    */
        static setLocalXY(x: any, y: any):Ext.util.Positionable;
    /**
    Sets the local y coordinate of this element using CSS style. 
    */
        static setLocalY(y: any):Ext.util.Positionable;
    /**
    Sets the margin on the target element. 
    */
        static setMargin(margin: number|string):void;
    /**
    Sets the value of maxHeight. 
    */
        static setMaxHeight(maxHeight: number):void;
    /**
    Sets the value of maxWidth. 
    */
        static setMaxWidth(maxWidth: number):void;
    /**
    Sets the value of minHeight. 
    */
        static setMinHeight(minHeight: number):void;
    /**
    Sets the value of minWidth. 
    */
        static setMinWidth(minWidth: number):void;
    /**
    Sets the overflow x/y on the content element of the component. 
    */
        static setOverflowXY(overflowX: string, overflowY: string):Ext.Component;
    /**
    Sets the page XY position of the component. 
    */
        static setPagePosition(x: number|number[], y?: number, animate?: any):Ext.Component;
    /**
    Sets the left and top of the component. 
    */
        static setPosition(x: any, y?: number, animate?: any):Ext.Component;
    /**
    Sets the value of publishes. 
    */
        static setPublishes(publishes: any):void;
    /**
    Sets the value of reference. 
    */
        static setReference(reference: string):void;
    /**
    This method changes the region config property for this border region. 
    */
        static setRegion(region: string):string;
    /**
    Sets the "x" scroll position for this component. 
    */
        static setScrollX(x: number, animate?: any):void;
    /**
    Sets the "y" scroll position for this component. 
    */
        static setScrollY(y: number, animate?: any):void;
    /**
    Sets the value of scrollable. 
    */
        static setScrollable(scrollable: any):void;
    /**
    Sets the value of session. 
    */
        static setSession(session: any):void;
    /**
    Sets the width and height of this Component. 
    */
        static setSize(width: any, height: number|string):Ext.Component;
    /**
    Sets the style for this Component's primary element. 
    */
        static setStyle(property: any, value?: string):Ext.Component;
    /**
    Set the tabIndex property for this Focusable. 
    */
        static setTabIndex(newTabIndex: number):void;
    /**
    Sets the title of this panel. 
    */
        static setTitle(title: string):void;
    /**
    Sets the value of titleAlign. 
    */
        static setTitleAlign(titleAlign: any):void;
    /**
    Sets the value of titleRotation. 
    */
        static setTitleRotation(titleRotation: any):void;
    /**
    Sets the value of twoWayBindable. 
    */
        static setTwoWayBindable(twoWayBindable: any):void;
    /**
    Sets the UI for the component. 
    */
        static setUI(ui: string):void;
    /**
    Sets the value of viewModel. 
    */
        static setViewModel(viewModel: any):void;
    /**
    Convenience function to hide or show this component by Boolean. 
    */
        static setVisible(visible: boolean):Ext.Component;
    /**
    Sets the weight config property for this component. 
    */
        static setWeight(weight: number):number;
    /**
    Sets the width of the component. 
    */
        static setWidth(width: number):Ext.Component;
    /**
    Sets the X position of the DOM element based on page coordinates. 
    */
        static setX(x: any, animate: any):Ext.util.Positionable;
    /**
    Sets the position of the DOM element in page coordinates. 
    */
        static setXY(xy: any, animate: any):Ext.util.Positionable;
    /**
    Sets the Y position of the DOM element based on page coordinates. 
    */
        static setY(y: any, animate: any):Ext.util.Positionable;
    /**
    Displays a new message box, or reinitializes an existing message box, based on the config options passed in. 
    */
        static show(config: any):Ext.window.MessageBox;
    /**
    Displays component at specific xy position. 
    */
        static showAt(x: number|number[], y?: number, animate?: any):Ext.Component;
    /**
    Shows this component by the specified Component or Element. 
    */
        static showBy(component: Ext.Component|Ext.dom.Element, position?: string, offsets?: number[]):Ext.Component;
    /**
    Stops any running effects and clears this object's internal effects queue if it contains any additional effects
that 
    */
        static stopAnimation():Ext.dom.Element;
    /**
    Stops any running effects and clears this object's internal effects queue if it contains any additional effects
that 
    */
        static stopFx():Ext.dom.Element;
    /**
    Suspends firing of the named event(s). 
    */
        static suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        static suspendEvents(queueSuspended: boolean):void;
    /**
    Ensures that all effects queued after syncFx is called on this object are run concurrently. 
    */
        static syncFx():any;
    /**
    Sends this Component to the back of (lower z-index than) any other visible windows 
    */
        static toBack():Ext.Component;
    /**
    Brings this floating Component to the front of any other visible, floating Components managed by the same
ZIndexManag
    */
        static toFront(preventFocus?: boolean):Ext.Component;
    /**
    Shortcut for performing an expand or collapse based on the current state of the panel. 
    */
        static toggleCollapse():Ext.panel.Panel;
    /**
    A shortcut method for toggling between maximize and restore based on the current maximized
state of the window. 
    */
        static toggleMaximize():Ext.window.Window;
    /**
    Translates the passed page coordinates into left/top css values for the element 
    */
        static translatePoints(x: number|any[], y?: number):any;
    /**
    Shorthand for removeListener. 
    */
        static un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        static unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        static unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes the mask applied by mask 
    */
        static unmask():void;
    /**
    Navigates up the ownership hierarchy searching for an ancestor Container which matches any passed selector or component. 
    */
        static up(selector?: string|Ext.Component, limit?: string|number|Ext.Component):Ext.container.Container;
    /**
    Update the content area of a component. 
    */
        static update(htmlOrData: any, loadScripts?: boolean, callback?: Function, scriptScope?: any):void;
    /**
    Sets the current box measurements of the component's underlying element. 
    */
        static updateBox(box: any):Ext.Component;
    /**
    Updates this component's layout. 
    */
        static updateLayout(options?: any):void;
    /**
    Updates a progress-style message box's text and progress bar. 
    */
        static updateProgress(value?: number, progressText?: string, message?: string):Ext.window.MessageBox;
    /**
    Traverses the tree rooted at this node in post-order mode, calling the passed function on the nodes at each level. 
    */
        static visitPostOrder(selector: any, fn: (node: any) => any, scope?: any, extraArgs?: any[]):void;
    /**
    Traverses the tree rooted at this node in pre-order mode, calling the passed function on the nodes at each level. 
    */
        static visitPreOrder(selector: any, fn: (node: any) => any, scope?: any, extraArgs?: any[]):void;
    /**
    Displays a message box with an infinitely auto-updating progress bar. 
    */
        static wait(message: string, title?: string, config?: any):Ext.window.MessageBox;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    /**
    This class is a base class for mixins. 
    */
    export class Mixin extends Ext.Base {
    }
    /**
    A collection of useful static methods to deal with numbers

    */
    export class Number {
    /**
    Coerces a given index into a valid index given a length. 
    */
        static clipIndices(length: number, indices: number[], options?: any):number[];
    /**
    Checks whether or not the passed number is within a desired range. 
    */
        static constrain(number: number, min: number, max: number):number;
    /**
    Corrects floating point numbers that overflow to a non-precise
value because of their floating nature, for example 0.
    */
        static correctFloat(n: number):number;
    /**
    Validate that a value is numeric and convert it to a number if necessary. 
    */
        static from(value: any, defaultValue: number):number;
    /**
    Returns a random integer between the specified range (inclusive) 
    */
        static randomInt(from: number, to: number):number;
    /**
    Returns the sign of the given number. 
    */
        static sign(x: number):number;
    /**
    Snaps the passed number between stopping points based upon a passed increment value. 
    */
        static snap(value: number, increment: number, minValue: number, maxValue: number):number;
    /**
    Snaps the passed number between stopping points based upon a passed increment value. 
    */
        static snapInRange(value: number, increment: number, minValue?: number, maxValue?: number):number;
    /**
    Formats a number using fixed-point notation 
    */
        static toFixed(value: number, precision: number):void;
    }
    /**
    A collection of useful static methods to deal with objects.

    */
    export class Object {
    /**
    Returns a new object with the given object as the prototype chain. 
    */
        static chain(object: any):void;
    /**
    This method removes all keys from the given object. 
    */
        static clear(object: any):any;
    /**
    Iterates through an object and invokes the given callback function for each iteration. 
    */
        static each(object: any, fn: (key: string, value: any, object: any) => any, scope?: any):void;
    /**
    Iterates through an object and invokes the given callback function for each iteration. 
    */
        static eachValue(object: any, fn: (value: any) => any, scope?: any):void;
    /**
    Shallow compares the contents of 2 objects using strict equality. 
    */
        static equals(object1: any, object2: any):boolean;
    /**
    Freezes the given object making it immutable. 
    */
        static freeze(obj: any, deep?: boolean):any;
    /**
    Converts a query string back into an object. 
    */
        static fromQueryString(queryString: string, recursive?: boolean):any;
    /**
    Returns all keys of the given object as an array. 
    */
        static getAllKeys(object: any):string[];
    /**
    Returns the first matching key corresponding to the given value. 
    */
        static getKey(object: any, value: any):void;
    /**
    Returns the hasOwnProperty keys of the given object as an array. 
    */
        static getKeys(object: any):string[];
    /**
    Gets the total number of this object's own properties

var size = Ext.Object.getSize({
    name: 'Jacky',
    loves: 
    */
        static getSize(object: any):number;
    /**
    Gets all values of the given object as an array. 
    */
        static getValues(object: any):any[];
    /**
    Checks if there are any properties on this object. 
    */
        static isEmpty(object: any):boolean;
    /**
    Merges any number of objects recursively without referencing them or their children. 
    */
        static merge(destination: any, ...object: any[]):any;
    /**
    Converts a name - value pair to an array of objects with support for nested structures. 
    */
        static toQueryObjects(name: string, value: any, recursive?: boolean):any[];
    /**
    Takes an object and converts it to an encoded query string. 
    */
        static toQueryString(object: any, recursive?: boolean):string;
    }
    interface ProgressBarConfig extends Ext.ComponentConfig {
    /**
    The text shown in the progress bar. 
    */
        text?: string;
    /**
    The element to render the progress text to (defaults to the progress bar's internal text element)

    */
        textEl?: string|HTMLElement|Ext.dom.Element;
    /**
    A template used to create this ProgressBar's background text given two values:

   `value  ' - The raw progress value
    */
        textTpl?: string|Ext.XTemplate;
    /**
    A floating point value between 0 and 1 (e.g., .5) 
    */
        value?: number;
    }
    /**
    An updateable progress bar component. 
    */
    export class ProgressBar extends Ext.Component {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.ProgressBarConfig);
    /**
    Returns the value of textTpl. 
    */
        getTextTpl():string|Ext.XTemplate;
    /**
    Returns the value of value. 
    */
        getValue():number;
    /**
    Returns true if the progress bar is currently in a wait operation 
    */
        isWaiting():boolean;
    /**
    Resets the progress bar value to 0 and text to empty string. 
    */
        reset(hide?: boolean):Ext.ProgressBar;
    /**
    Sets the value of textTpl. 
    */
        setTextTpl(textTpl: string|Ext.XTemplate):void;
    /**
    Sets the value of value. 
    */
        setValue(value: number):void;
    /**
    Updates the progress bar value, and optionally its text. 
    */
        updateProgress(value?: number, text?: string, animate?: boolean):Ext.ProgressBar;
    /**
    Updates the progress bar text. 
    */
        updateText(text?: string):Ext.ProgressBar;
    /**
    Initiates an auto-updating progress bar. 
    */
        wait(config?: any):Ext.ProgressBar;
    }
    interface ProgressBarWidgetConfig extends Ext.WidgetConfig {
    /**
    Specify as true to have this progress bar animate to new extent when updated. 
    */
        animate?: boolean;
    /**
    The base CSS class to apply to the progress bar's wrapper element. 
    */
        baseCls?: string;
    /**
    The background text

    */
        text?: string;
    /**
    A template used to create this ProgressBar's background text given two values:

   `value  ' - The raw progress value
    */
        textTpl?: string|Ext.XTemplate;
    /**
    A floating point value between 0 and 1 (e.g., .5) 
    */
        value?: number;
    }
    /**
    An update-able progress bar widget. 
    */
    export class ProgressBarWidget extends Ext.Widget {
    /**
     
    */
        constructor(config: Ext.ProgressBarWidgetConfig);
    /**
    Returns the value of animate. 
    */
        getAnimate():boolean;
    /**
    Returns the value of baseCls. 
    */
        getBaseCls():string;
    /**
    Returns the value of text. 
    */
        getText():string;
    /**
    Returns the value of textCls. 
    */
        getTextCls():string;
    /**
    Returns the value of textTpl. 
    */
        getTextTpl():string|Ext.XTemplate;
    /**
    Returns the value of ui. 
    */
        getUi():string;
    /**
    Returns the value of value. 
    */
        getValue():number;
    /**
    Sets the value of animate. 
    */
        setAnimate(animate: boolean):void;
    /**
    Sets the value of baseCls. 
    */
        setBaseCls(baseCls: string):void;
    /**
    Sets the value of text. 
    */
        setText(text: string):void;
    /**
    Sets the value of textCls. 
    */
        setTextCls(textCls: string):void;
    /**
    Sets the value of textTpl. 
    */
        setTextTpl(textTpl: string|Ext.XTemplate):void;
    /**
    Sets the value of ui. 
    */
        setUi(ui: string):void;
    /**
    Sets the value of value. 
    */
        setValue(value: number):void;
    }
    /**
    A collection of useful static methods to deal with strings.

    */
    export class String {
    /**
    Adds a set of character entity definitions to the set used by
htmlEncode and htmlDecode. 
    */
        static addCharacterEntities(newEntities: any):void;
    /**
    Capitalize the first letter of the given string. 
    */
        static capitalize(string: string):string;
    /**
    Creates a RegExp given a string value and optional flags. 
    */
        static createRegex(value: string|RegExp, startsWith?: boolean, endsWith?: boolean, ignoreCase?: boolean):RegExp;
    /**
    Converts a string of characters into a legal, parse-able JavaScript var name as long as the passed
string contains at
    */
        static createVarName(s: string):string;
    /**
    Truncate a string and add an ellipsis ('') to the end if it exceeds the specified length. ...
    */
        static ellipsis(value: string, length: number, word?: boolean):string;
    /**
    Checks if a string ends with a substring 
    */
        static endsWith(s: string, end: string, ignoreCase?: boolean):void;
    /**
    Escapes the passed string for ' and . 
    */
        static escape(string: string):string;
    /**
    Escapes the passed string for use in a regular expression. 
    */
        static escapeRegex(string: string):string;
    /**
    Allows you to define a tokenized string and pass an arbitrary number of arguments to replace the tokens. 
    */
        static format(string: string, ...values: any[]):string;
    /**
    Convert certain characters (&amp;, &lt;, >, ', and ") from their HTML character equivalents. 
    */
        static htmlDecode(value: string):string;
    /**
    Convert certain characters (&amp;, &lt;, >, ', and ") to their HTML character equivalents for literal display in web 
    */
        static htmlEncode(value: string):string;
    /**
    Inserts a substring into a string. 
    */
        static insert(s: string, value: string, index: number):string;
    /**
    Pads the left side of a string with a specified character. 
    */
        static leftPad(string: string, size: number, character?: string):string;
    /**
    Returns a string with a specified number of repetitions a given string pattern. 
    */
        static repeat(pattern: string, count: number, sep: string):void;
    /**
    Resets the set of character entity definitions used by
htmlEncode and htmlDecode back to the
default state. 
    */
        static resetCharacterEntities():void;
    /**
    Splits a string of space separated words into an array, trimming as needed. 
    */
        static splitWords(words: string|any[]):void;
    /**
    Checks if a string starts with a substring 
    */
        static startsWith(s: string, start: string, ignoreCase?: boolean):void;
    /**
    Utility function that allows you to easily switch a string between two alternating values. 
    */
        static toggle(string: string, value: string, other: string):string;
    /**
    Trims whitespace from either end of a string, leaving spaces within the string intact. 
    */
        static trim(string: string):string;
    /**
    Uncapitalize the first letter of a given string. 
    */
        static uncapitalize(string: string):string;
    /**
    Appends content to the query string of a URL, handling logic for whether to place
a question mark or ampersand. 
    */
        static urlAppend(url: string, string: string):string;
    }
    /**
    Handle batch read / write of DOMs, currently used in SizeMonitor + PaintMonitor

    */
    export class TaskQueue {
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface TemplateConfig {
    /**
    True to immediately compile the template. 
    */
        compiled?: boolean;
    /**
    True to disable format functions in the template. 
    */
        disableFormats?: boolean;
    }
    /**
    Represents an HTML fragment template. 
    */
    export class Template extends Ext.Base {
    /**
    true in this class to identify an object as an instantiated Template, or subclass thereof. 
    */
        isTemplate: boolean;
    /**
    Creates new template. 
    */
        constructor(...html: any[]);
    /**
    Applies the supplied values to the template and appends the new node(s) to the specified el. 
    */
        append(el: string|HTMLElement|Ext.dom.Element, values: any, returnElement?: boolean):HTMLElement|Ext.dom.Element;
    /**
    Returns an HTML fragment of this template with the specified values applied. 
    */
        apply(values: any):string;
    /**
    Appends the result of this template to the provided output array. 
    */
        applyOut(values: any, out: any[]):any[];
    /**
    Alias for apply. 
    */
        applyTemplate(values: any):string;
    /**
    Compiles the template into an internal function, eliminating the RegEx overhead. 
    */
        compile():Ext.Template;
    /**
    Applies the supplied values to the template and inserts the new node(s) after el. 
    */
        insertAfter(el: string|HTMLElement|Ext.dom.Element, values: any, returnElement?: boolean):HTMLElement|Ext.dom.Element;
    /**
    Applies the supplied values to the template and inserts the new node(s) before el. 
    */
        insertBefore(el: string|HTMLElement|Ext.dom.Element, values: any, returnElement?: boolean):HTMLElement|Ext.dom.Element;
    /**
    Applies the supplied values to the template and inserts the new node(s) as the first child of el. 
    */
        insertFirst(el: string|HTMLElement|Ext.dom.Element, values: any, returnElement?: boolean):HTMLElement|Ext.dom.Element;
    /**
    Applies the supplied values to the template and overwrites the content of el with the new node(s). 
    */
        overwrite(el: string|HTMLElement|Ext.dom.Element, values: any, returnElement?: boolean):HTMLElement|Ext.dom.Element;
    /**
    Sets the HTML used as the template and optionally compiles it. 
    */
        set(html: string, compile?: boolean):Ext.Template;
    /**
    Creates a template from the passed element's value (display:none textarea, preferred) or innerHTML. 
    */
        from(el: string|HTMLElement, config?: any):Ext.Template;
    }
    /**
    A utility class that wraps around a version number string and provides convenient methods
to perform comparisons. 
    */
    export class Version {
    /**
    The fourth numeric part of the version number string.

    */
        build: number;
    /**
    The first numeric part of the version number string.

    */
        major: number;
    /**
    The second numeric part of the version number string.

    */
        minor: number;
    /**
    The third numeric part of the version number string.

    */
        patch: number;
    /**
    The release level. 
    */
        release: string;
    /**
    Compares this version instance to the specified other version. 
    */
        compareTo(other: string|number|Ext.Version):number;
    /**
    Returns whether this version equals to the supplied argument 
    */
        equals(target: string|number):boolean;
    /**
    Returns the build component value. 
    */
        getBuild():number;
    /**
    Returns the major component value. 
    */
        getMajor():number;
    /**
    Returns the minor component value. 
    */
        getMinor():number;
    /**
    Returns the patch component value. 
    */
        getPatch():number;
    /**
    Returns the release component text (e.g., "beta"). 
    */
        getRelease():string;
    /**
    Returns the release component value for comparison purposes. 
    */
        getReleaseValue():number|string;
    /**
    Returns shortVersion version without dots and release 
    */
        getShortVersion():string;
    /**
    Convenient alias to isGreaterThan 
    */
        gt(target: string|number|Ext.Version):boolean;
    /**
    Convenient alias to isGreaterThanOrEqual 
    */
        gtEq(target: string|number|Ext.Version):boolean;
    /**
    Returns whether this version if greater than the supplied argument 
    */
        isGreaterThan(target: string|number):boolean;
    /**
    Returns whether this version if greater than or equal to the supplied argument 
    */
        isGreaterThanOrEqual(target: string|number):boolean;
    /**
    Returns whether this version if smaller than the supplied argument 
    */
        isLessThan(target: string|number):boolean;
    /**
    Returns whether this version if less than or equal to the supplied argument 
    */
        isLessThanOrEqual(target: string|number):boolean;
    /**
    Convenient alias to isLessThan 
    */
        lt(target: string|number|Ext.Version):boolean;
    /**
    Convenient alias to isLessThanOrEqual 
    */
        ltEq(target: string|number|Ext.Version):boolean;
    /**
    Returns whether this version matches the supplied argument. 
    */
        match(target: string|number):boolean;
    /**
    Returns this format: [major, minor, patch, build, release]. 
    */
        toArray():number[];
    /**
    Compare 2 specified versions by ensuring the first parameter is a Version
instance and then calling the compareTo met
    */
        compare(current: string, target: string):number;
    /**
    Converts a version component to a comparable value 
    */
        getComponentValue(value: any):any;
    }
    interface WidgetConfig extends Ext.EventedConfig {
    /**
    Setting this config option adds or removes data bindings for other configs. 
    */
        bind?: any;
    /**
    A string alias, a configuration object or an instance of a ViewController for
this container. 
    */
        controller?: any;
    /**
    If true, this component will be the default scope (this pointer) for events
specified with string names so that the s
    */
        defaultListenerScope?: boolean;
    /**
    The height of this Component; must be a valid CSS length value, e.g: 300, 100px, 30%, etc. 
    */
        height?: number|string;
    /**
    One or more names of config properties that this component should publish
to its ViewModel. 
    */
        publishes?: any;
    /**
    Specifies a name for this component inside its component hierarchy. 
    */
        reference?: string;
    /**
    If provided this creates a new Session instance for this component. 
    */
        session?: any;
    /**
    This object holds a map of config properties that will update their binding
as they are modified. 
    */
        twoWayBindable?: any;
    /**
    The ViewModel is a data provider for this component and its children. 
    */
        viewModel?: any;
    /**
    The width of this Component; must be a valid CSS length value, e.g: 300, 100px, 30%, etc. 
    */
        width?: number|string;
    }
    /**
    Ext.Widget is a light-weight Component that consists of nothing more than a template
Element that can be cloned to qu
    */
    export class Widget extends Ext.Evented {
    /**
    This property is used to determine the property of a bind config that is just
the value. 
    */
        defaultBindProperty: string;
    /**
    A configuration object for Ext.Element.create() that is used to create the Element
template. 
    */
        element: any;
    /**
    An array of child elements to use as the children of the main element in the {@link

element} template. 
    */
        template: any[];
    /**
     
    */
        constructor(config: Ext.WidgetConfig);
    /**
     
    */
        doSetHeight(height: any):void;
    /**
     
    */
        doSetWidth(width: any):void;
    /**
    Returns the value of bind. 
    */
        getBind():any;
    /**
    Returns the Ext.app.ViewController instance associated with this
component via the controller config or setController
    */
        getController():Ext.app.ViewController;
    /**
    Returns the value of defaultListenerScope. 
    */
        getDefaultListenerScope():boolean;
    /**
    A template method for modifying the element config before it is processed. 
    */
        getElementConfig():any;
    /**
    Returns the value of height. 
    */
        getHeight():number|string;
    /**
    This method returns an object containing the inherited properties for this instance. 
    */
        getInherited(inner?: boolean):any;
    /**
    This method returns the value of a config property that may be inherited from some
ancestor. 
    */
        getInheritedConfig(property: string, skipThis?: boolean):any;
    /**
    Returns the value of Ext.Component.itemId assigned to this component, or when that
is not set, returns the value of E
    */
        getItemId():string;
    /**
    Returns the value of publishes. 
    */
        getPublishes():any;
    /**
    Used by ComponentQuery, and the up
method to find the owning Component in the linkage hierarchy. 
    */
        getRefOwner():void;
    /**
    Returns the value of reference. 
    */
        getReference():string;
    /**
    Returns the value of session. 
    */
        getSession():any;
    /**
    Returns the height and width of the Component. 
    */
        getSize():any;
    /**
    Returns the value of twoWayBindable. 
    */
        getTwoWayBindable():any;
    /**
    Returns the value of viewModel. 
    */
        getViewModel():any;
    /**
    Returns the value of width. 
    */
        getWidth():number|string;
    /**
    Initializes the Element for this Widget instance. 
    */
        initElement():void;
    /**
    Called by getInherited to initialize the inheritedState the first time it is
requested. 
    */
        initInheritedState(inheritedState: any):void;
    /**
    Tests whether this Widget matches a ComponentQuery
selector string. 
    */
        is(selector: string):boolean;
    /**
    Tests whether or not this Component is of a specific xtype. 
    */
        isXType(xtype: string, shallow?: boolean):boolean;
    /**
    Gets the controller that controls this view. 
    */
        lookupController(skipThis?: boolean):Ext.app.ViewController;
    /**
    Returns the Ext.data.Session for this instance. 
    */
        lookupSession(skipThis?: boolean):Ext.data.Session;
    /**
    Returns the Ext.app.ViewModel for this instance. 
    */
        lookupViewModel(skipThis?: boolean):Ext.app.ViewModel;
    /**
    Publish this components state to the ViewModel. 
    */
        publishState(property?: string, value?: any):void;
    /**
    Returns the default listener scope for a "satellite" of this component. 
    */
        resolveSatelliteListenerScope(satellite: Ext.mixin.Observable, defaultScope?: any):any;
    /**
    Sets the value of bind. 
    */
        setBind(bind: any):void;
    /**
    Sets the value of controller. 
    */
        setController(controller: any):void;
    /**
    Sets the value of defaultListenerScope. 
    */
        setDefaultListenerScope(defaultListenerScope: boolean):void;
    /**
    Sets the value of height. 
    */
        setHeight(height: number|string):void;
    /**
    Sets the value of publishes. 
    */
        setPublishes(publishes: any):void;
    /**
    Sets the value of reference. 
    */
        setReference(reference: string):void;
    /**
    Sets the value of session. 
    */
        setSession(session: any):void;
    /**
    Sets the size of the Component. 
    */
        setSize(width: number, height: number):void;
    /**
    Sets the value of twoWayBindable. 
    */
        setTwoWayBindable(twoWayBindable: any):void;
    /**
    Sets the value of viewModel. 
    */
        setViewModel(viewModel: any):void;
    /**
    Sets the value of width. 
    */
        setWidth(width: number|string):void;
    }
    /**
    The default global floating Component group that is available automatically. 
    */
    export class WindowManager {
    /**
    Brings the specified Component to the front of any other active Components in this ZIndexManager. 
    */
        static bringToFront(comp: any, preventFocus: boolean):boolean;
    /**
    Executes the specified function once for every Component in this ZIndexManager, passing each
Component as the only pa
    */
        static each(fn: Function, scope?: any):void;
    /**
    Executes the specified function once for every Component in this ZIndexManager, passing each
Component as the only pa
    */
        static eachBottomUp(fn: Function, scope?: any):void;
    /**
    Executes the specified function once for every Component in this ZIndexManager, passing each
Component as the only pa
    */
        static eachTopDown(fn: Function, scope?: any):void;
    /**
    Gets a registered Component by id. 
    */
        static get(id: any):Ext.Component;
    /**
    Gets the currently-active Component in this ZIndexManager. 
    */
        static getActive():Ext.Component;
    /**
    Returns zero or more Components in this ZIndexManager using the custom search function passed to this method. 
    */
        static getBy(fn: Function, scope?: any):any[];
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Hides all Components managed by this ZIndexManager. 
    */
        static hideAll():void;
    /**
    Registers a floating Ext.Component with this ZIndexManager. 
    */
        static register(comp: Ext.Component):void;
    /**
    Sends the specified Component to the back of other active Components in this ZIndexManager. 
    */
        static sendToBack(comp: any):Ext.Component;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Unregisters a Ext.Component from this ZIndexManager. 
    */
        static unregister(comp: Ext.Component):void;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface XTemplateConfig extends Ext.TemplateConfig {
    /**
    Optional. 
    */
        definitions?: string|any[];
    /**
    Expressions in templates that traverse "dot paths" and fail (due to null at some
stage) have always been expanded as 
    */
        strict?: boolean;
    }
    /**
    A template class that supports advanced functionality like:


Auto-filling arrays using templates and sub-templates
C
    */
    export class XTemplate extends Ext.Template {
    /**
    Creates new template. 
    */
        constructor(...html: any[]);
    /**
    Gets an XTemplate from an object (an instance of an Ext.define'd class). 
    */
        getTpl(instance: any, name: string):Ext.XTemplate;
    }
    /**
    A class that manages a group of Ext.Component.floating Components and
provides z-order management, and Component acti
    */
    export class ZIndexManager extends Ext.Base {
    /**
     
    */
        constructor(container: any);
    /**
    Brings the specified Component to the front of any other active Components in this ZIndexManager. 
    */
        bringToFront(comp: any, preventFocus: boolean):boolean;
    /**
    Executes the specified function once for every Component in this ZIndexManager, passing each
Component as the only pa
    */
        each(fn: Function, scope?: any):void;
    /**
    Executes the specified function once for every Component in this ZIndexManager, passing each
Component as the only pa
    */
        eachBottomUp(fn: Function, scope?: any):void;
    /**
    Executes the specified function once for every Component in this ZIndexManager, passing each
Component as the only pa
    */
        eachTopDown(fn: Function, scope?: any):void;
    /**
    Gets a registered Component by id. 
    */
        get(id: any):Ext.Component;
    /**
    Gets the currently-active Component in this ZIndexManager. 
    */
        getActive():Ext.Component;
    /**
    Returns zero or more Components in this ZIndexManager using the custom search function passed to this method. 
    */
        getBy(fn: Function, scope?: any):any[];
    /**
    Hides all Components managed by this ZIndexManager. 
    */
        hideAll():void;
    /**
    Registers a floating Ext.Component with this ZIndexManager. 
    */
        register(comp: Ext.Component):void;
    /**
    Sends the specified Component to the back of other active Components in this ZIndexManager. 
    */
        sendToBack(comp: any):Ext.Component;
    /**
    Unregisters a Ext.Component from this ZIndexManager. 
    */
        unregister(comp: Ext.Component):void;
    }
    /**
    Provides useful information about the current browser. 
    */
    export class browser {
    /**
    The full name of the current browser's engine. 
    */
        static engineName: string;
    /**
    Refer to Ext.Version.

    */
        static engineVersion: Ext.Version;
    /**
    true if page is running over SSL.

    */
        static isSecure: boolean;
    /**
    true if browser is using strict mode.

    */
        static isStrict: boolean;
    /**
    The full name of the current browser. 
    */
        static name: string;
    /**
    Browser User Agent string.

    */
        static userAgent: string;
    /**
    Refer to Ext.Version.

    */
        static version: Ext.Version;
    /**
    A "hybrid" property, can be either accessed as a method call, for example:

if (Ext.browser.is('IE')) {
    //  ...
    */
        static is(name: string):boolean;
    }
    /**
    A simple class to verify if a browser feature exists or not on the current device. 
    */
    export class feature {
    /**
    Verifies if a browser feature exists or not on the current device. 
    */
        static has(name: string):boolean;
    }
    /**
    Provides useful information about the current operating system environment. 
    */
    export class os {
    /**
    The generic type of the current device. 
    */
        static deviceType: string;
    /**
    The full name of the current operating system. 
    */
        static name: string;
    /**
    Refer to Ext.Version 
    */
        static version: Ext.Version;
    /**
    A "hybrid" property, can be either accessed as a method call, i.e:

if (Ext.os.is('Android')) {
    //  ...
    */
        static is(name: string):boolean;
    }
    /**
    Contains information about features supported in the current environment as well
as bugs detected.

    */
    export class supports {
    /**
    true if the device supports the HTML5 audio tag. 
    */
        static Audio: boolean;
    /**
    true if the device supports the HTML5 audio tag. 
    */
        static AudioTag: boolean;
    /**
    true if the browser supports the getBoundingClientRect method on elements
This property is available at application b
    */
        static BoundingClientRect: boolean;
    /**
    true if the device supports CSS3 border radius. 
    */
        static CSS3BorderRadius: boolean;
    /**
    true if document environment supports the CSS3
box-shadow style. 
    */
        static CSS3BoxShadow: boolean;
    /**
    true if the device supports CSS3 linear gradients. 
    */
        static CSS3LinearGradient: boolean;
    /**
    true if document environment supports the CSS3
pointer-events style. 
    */
        static CSSPointerEvents: boolean;
    /**
    true if the device supports Canvas. 
    */
        static Canvas: boolean;
    /**
    true if created child elements
lose their innerHTML when modifying the innerHTML of the parent element. 
    */
        static ChildContentClearedWhenSettingInnerHTML: boolean;
    /**
    true if document environment supports the HTML5
classList API. 
    */
        static ClassList: boolean;
    /**
    true if the browser supports document.defaultView.getComputedStyle(). 
    */
        static ComputedStyle: boolean;
    /**
    true if browser support CreateContextualFragment
range native methods. 
    */
        static CreateContextualFragment: boolean;
    /**
    true if the device supports CSS3DTransform. 
    */
        static Css3DTransforms: boolean;
    /**
    true if the device supports device motion (acceleration
and rotation rate). 
    */
        static DeviceMotion: boolean;
    /**
    true if when asking for an element's dimension via offsetWidth or offsetHeight,
getBoundingClientRect, etc. 
    */
        static Direct2DBug: boolean;
    /**
    true if INPUT elements lose their
selection when their display style is changed. 
    */
        static DisplayChangeInputSelectionBug: any;
    /**
    true if TEXTAREA elements lose their
selection when their display style is changed. 
    */
        static DisplayChangeTextAreaSelectionBug: any;
    /**
    True if the browser emulates a mouseover event on tap (mobile safari)

This property is available at application boot
    */
        static EmulatedMouseOver: boolean;
    /**
    true if the device supports CSS float. 
    */
        static Float: boolean;
    /**
    true if the device supports Geo-location. 
    */
        static GeoLocation: boolean;
    /**
    true if the device supports GeoLocation. 
    */
        static Geolocation: boolean;
    /**
    true if the browser will return the left/top/right/bottom
position as a percentage when explicitly set as a percentag
    */
        static GetPositionPercentage: boolean;
    /**
    True if the user agent supports the hashchange event

This property is available at application boot time, before doc
    */
        static Hashchange: boolean;
    /**
    true if the device supports HTML5 history. 
    */
        static History: boolean;
    /**
    true if localStorage is supported. 
    */
        static LocalStorage: boolean;
    /**
    true if the browser supports mouseenter and mouseleave events
This property is available at application boot time, be
    */
        static MouseEnterLeave: boolean;
    /**
    true if the browser supports the mousewheel event
This property is available at application boot time, before documen
    */
        static MouseWheel: boolean;
    /**
    true if the browser supports placeholders
on numeric input fields

This property is available at application boot tim
    */
        static NumericInputPlaceHolder: boolean;
    /**
    true if the browser supports normal css opacity
This property is available at application boot time, before document 
    */
        static Opacity: boolean;
    /**
    true if the device supports different orientations. 
    */
        static Orientation: boolean;
    /**
    true if the device supports the orientationchange
event. 
    */
        static OrientationChange: boolean;
    /**
    true if the browser supports the HTML5 placeholder attribute on inputs
This property is available at application boot
    */
        static Placeholder: boolean;
    /**
    true if browser support document.createRange native method. 
    */
        static Range: boolean;
    /**
    true if the device supports right margin. 
    */
        static RightMargin: boolean;
    /**
    true if the BoundingClientRect is
rotated when the element is rotated using a CSS transform. 
    */
        static RotatedBoundingClientRect: boolean;
    /**
    In some browsers the right padding of an overflowing element is not accounted
for in its scrollWidth. 
    */
        static ScrollWidthInlinePaddingBug: boolean;
    /**
    True if the browser fires the keydown event on specialkey autorepeat

note 1: IE fires ONLY the keydown event on spec
    */
        static SpecialKeyDownRepeat: boolean;
    /**
    true if the device supports SVG. 
    */
        static Svg: boolean;
    /**
    true if the browser supports maxlength on textareas. 
    */
        static TextAreaMaxLength: boolean;
    /**
    true if the browser supports touch input. 
    */
        static Touch: boolean;
    /**
    true if the device supports touch events (touchstart,
touchmove, touchend). 
    */
        static TouchEvents: boolean;
    /**
    true if the device supports CSS3 Transitions. 
    */
        static Transitions: boolean;
    /**
    true if the device supports transparent color. 
    */
        static TransparentColor: boolean;
    /**
    true if the device supports the HTML5 video tag. 
    */
        static Video: boolean;
    /**
    true if the device supports VML. 
    */
        static Vml: boolean;
    /**
    true if the browser supports XMLHttpRequest

This property is available at application boot time, before document ready.

    */
        static XHR2: boolean;
    /**
    true if the browser supports XMLHttpRequest
upload progress info

This property is available at application boot time
    */
        static XHRUploadProgress: boolean;
    /**
    The method name which matches an element against a selector if implemented in this environment. 
    */
        static matchesSelector: string;
    }
}
declare module Ext.app {
    interface ApplicationConfig extends Ext.app.ControllerConfig {
    /**
    The path to the directory which contains all application's classes. 
    */
        appFolder?: string;
    /**
    The name of a property to be assigned to the main namespace to gain a reference to
this application. 
    */
        appProperty?: string;
    /**
    Names of controllers that the app uses. 
    */
        controllers?: string|string[];
    /**
    The default token to be used at application launch
if one is not present. 
    */
        defaultToken?: string;
    /**
    A class name to use with the Ext.application call. 
    */
        extend?: string;
    /**
    The glyphFontFamily to use for this application. 
    */
        glyphFontFamily?: string;
    /**
     
    */
        mainView?: any;
    /**
    The name of your application. 
    */
        name?: string;
    /**
    The list of namespace prefixes used in the application to resolve dependencies
like Views and Stores:

 Ext.applicati
    */
        namespaces?: string|string[];
    /**
    Additional load paths to add to Ext.Loader. 
    */
        paths?: any;
    /**
    Names of the profiles that the app uses. 
    */
        profiles?: string|string[];
    /**
    The scope to execute the launch function in. 
    */
        scope?: any;
    }
    /**
    Represents an Ext JS application, which is typically a single page app using a
Viewport. 
    */
    export class Application extends Ext.app.Controller {
    /**
    Creates new Application. 
    */
        constructor(config?: Ext.app.ApplicationConfig);
    /**
    Create an instance of a controller by name. 
    */
        createController(name: string):Ext.app.Controller;
    /**
    Destroys a controller, any listeners are unbound. 
    */
        destroyController(controller: string|Ext.app.Controller):void;
    /**
    Returns the value of appProperty. 
    */
        getAppProperty():string;
    /**
    Returns the value of currentProfile. 
    */
        getCurrentProfile():any;
    /**
    Returns the value of defaultToken. 
    */
        getDefaultToken():string;
    /**
    Returns the value of glyphFontFamily. 
    */
        getGlyphFontFamily():string;
    /**
    Returns the value of mainView. 
    */
        getMainView():any;
    /**
    Returns the value of profiles. 
    */
        getProfiles():string|string[];
    /**
    Called automatically when the page has completely loaded. 
    */
        launch(profile: string):boolean;
    /**
    Sets the value of appProperty. 
    */
        setAppProperty(appProperty: string):void;
    /**
    Sets the value of currentProfile. 
    */
        setCurrentProfile(currentProfile: any):void;
    /**
    Sets the value of defaultToken. 
    */
        setDefaultToken(defaultToken: string):void;
    /**
    Sets the value of glyphFontFamily. 
    */
        setGlyphFontFamily(glyphFontFamily: string):void;
    /**
    Sets the value of mainView. 
    */
        setMainView(mainView: any):void;
    /**
    Sets the value of name. 
    */
        setName(name: string):void;
    /**
    Sets the value of profiles. 
    */
        setProfiles(profiles: string|string[]):void;
    }
    interface BaseControllerConfig {
    /**
    Adds listeners to components selected via Ext.ComponentQuery. 
    */
        control?: any;
    /**
    The id of this controller. 
    */
        id?: string;
    /**
    Adds listeners to different event sources (also called "event domains"). 
    */
        listen?: any;
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    /**
    An object of routes to handle hash changes. 
    */
        routes?: any;
    }
    /**
    Base class for Controllers.

    */
    export class BaseController extends Ext.Base {
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
    Creates new Controller. 
    */
        constructor(config?: Ext.app.BaseControllerConfig);
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Adds listeners to components selected via Ext.ComponentQuery. 
    */
        control(selectors: any, listeners?: any):void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Returns the value of before. 
    */
        getBefore():any;
    /**
    Returns the value of control. 
    */
        getControl():any;
    /**
    Returns the value of id. 
    */
        getId():string;
    /**
    Returns the value of listen. 
    */
        getListen():any;
    /**
    Returns the value of routes. 
    */
        getRoutes():any;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Adds listeners to different event sources (also called "event domains"). 
    */
        listen(to: any, controller?: Ext.app.Controller):void;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Update the hash. 
    */
        redirectTo(token: string|Ext.data.Model, force: boolean):boolean;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    Sets the value of before. 
    */
        setBefore(before: any):void;
    /**
    Sets the value of control. 
    */
        setControl(control: any):void;
    /**
    Sets the value of id. 
    */
        setId(id: string):void;
    /**
    Sets the value of listen. 
    */
        setListen(listen: any):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Sets the value of routes. 
    */
        setRoutes(routes: any):void;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    }
    interface ControllerConfig extends Ext.app.BaseControllerConfig {
    /**
    The Ext.app.Application for this controller accessible via the getApplication method.

    */
        application?: Ext.app.Application;
    /**
    Array of models to require from AppName.model namespace. 
    */
        models?: string|string[];
    /**
    The refs config creates a getter method on the controller that internally
uses Ext.ComponentQuery to fetch the compon
    */
        refs?: any;
    /**
    Array of stores to require from AppName.store namespace and to generate getter methods for. 
    */
        stores?: string|string[];
    /**
    Array of views to require from AppName.view namespace and to generate getter methods for. 
    */
        views?: string|string[];
    }
    /**
    Controllers are the glue that binds an application together. 
    */
    export class Controller extends Ext.app.BaseController {
    /**
    Creates new Controller. 
    */
        constructor(config?: Ext.app.ControllerConfig);
    /**
    Allow the controller to resume receiving events from the event bus. 
    */
        activate():void;
    /**
    Registers one or more references. 
    */
        addRef(refs: any):void;
    /**
    Prevent this controller from receiving events from the event bus. 
    */
        deactivate():void;
    /**
    Returns the value of active. 
    */
        getActive():boolean;
    /**
    Returns the value of application. 
    */
        getApplication():Ext.app.Application;
    /**
    Returns instance of a Controller with the given id. 
    */
        getController(id: string):Ext.app.Controller;
    /**
    Returns a Model class with the given name. 
    */
        getModel(name: string):Ext.Class;
    /**
    Returns the value of moduleClassName. 
    */
        getModuleClassName():any;
    /**
    Returns instance of a Profile with the given name. 
    */
        getProfile(name: string):string;
    /**
    Returns the value of refs. 
    */
        getRefs():any;
    /**
    Returns instance of a Store with the given name. 
    */
        getStore(name: string):Ext.data.Store;
    /**
    Returns a View class with the given name. 
    */
        getView(view: string):Ext.Base;
    /**
    Returns true if a reference is registered. 
    */
        hasRef(ref: string):boolean;
    /**
    A template method that is called when your application boots. 
    */
        init(application: Ext.app.Application):void;
    /**
    Checks if this controller is active. 
    */
        isActive():boolean;
    /**
    A template method like init, but called after the viewport is created. 
    */
        onLaunch(application: Ext.app.Application):void;
    /**
    Sets the value of active. 
    */
        setActive(active: boolean):void;
    /**
    Sets the value of application. 
    */
        setApplication(application: Ext.app.Application):void;
    /**
    Sets the value of moduleClassName. 
    */
        setModuleClassName(moduleClassName: any):void;
    /**
    Sets the value of refs. 
    */
        setRefs(refs: any):void;
    }
    /**
    This class manages event dispatching for Controllers. 
    */
    export class EventBus {
    /**
    Adds a set of component event listeners for a controller. 
    */
        static control(selectors: any, controller: Ext.app.BaseController):void;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Adds a set of event domain listeners for a controller. 
    */
        static listen(to: any, controller: Ext.app.BaseController):void;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Removes all of a controller's attached listeners. 
    */
        static unlisten(controllerId: string|Ext.app.BaseController):void;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface EventDomainConfig {
    /**
    Name of the identifier property for this event domain.

    */
        idProperty?: string;
    }
    /**
    This class is a base class for an event domain. 
    */
    export class EventDomain extends Ext.Base {
    /**
    An object map containing Ext.app.EventDomain instances keyed by the value
of their type property. 
    */
        instances: any;
    /**
     
    */
        constructor();
    /**
    This method matches the firer of the event (the target) to the given selector. 
    */
        match(target: any, selector: string):boolean;
    /**
    This method is called by the derived class to monitor fireEvent calls. 
    */
        monitor(observable: Ext.Class):void;
    }
    interface ProfileConfig {
    /**
    The Application instance that this
Profile is bound to. 
    */
        application?: Ext.app.Application;
    /**
    Any additional Controllers to load for this
profile. 
    */
        controllers?: any[];
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    /**
     
    */
        mainView?: string;
    /**
    Any additional Models to load for this profile. 
    */
        models?: any[];
    /**
    The name of this Profile. 
    */
        name?: string;
    /**
    The namespace that this Profile's classes can be found in. 
    */
        namespace?: string;
    /**
    Any additional Stores to load for this profile. 
    */
        stores?: any[];
    /**
    Any additional views to load for this profile. 
    */
        views?: any[];
    }
    /**
    A Profile represents a range of devices that fall under a common category. 
    */
    export class Profile extends Ext.Base {
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
    Creates a new Profile instance 
    */
        constructor(config: Ext.app.ProfileConfig);
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Returns the value of application. 
    */
        getApplication():Ext.app.Application;
    /**
    Returns the value of controllers. 
    */
        getControllers():any[];
    /**
    Returns the value of mainView. 
    */
        getMainView():string;
    /**
    Returns the value of models. 
    */
        getModels():any[];
    /**
    Returns the value of namespace. 
    */
        getNamespace():string;
    /**
    Returns the value of stores. 
    */
        getStores():any[];
    /**
    Returns the value of views. 
    */
        getViews():any[];
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Determines whether or not this Profile is active on the device isActive is executed on. 
    */
        isActive():boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    The launch function is called by the Application if this Profile's isActive
function returned true. 
    */
        launch():void;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    Sets the value of application. 
    */
        setApplication(application: Ext.app.Application):void;
    /**
    Sets the value of controllers. 
    */
        setControllers(controllers: any[]):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Sets the value of mainView. 
    */
        setMainView(mainView: string):void;
    /**
    Sets the value of models. 
    */
        setModels(models: any[]):void;
    /**
    Sets the value of name. 
    */
        setName(name: string):void;
    /**
    Sets the value of namespace. 
    */
        setNamespace(namespace: string):void;
    /**
    Sets the value of stores. 
    */
        setStores(stores: any[]):void;
    /**
    Sets the value of views. 
    */
        setViews(views: any[]):void;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    }
    /**
    

    */
    export class Util extends Ext.Base {
    }
    interface ViewControllerConfig extends Ext.app.BaseControllerConfig {
    }
    /**
    A view controller is a controller that can be attached to a specific view
instance so it can manage the view and its 
    */
    export class ViewController extends Ext.app.BaseController {
    /**
    If this property is specified by the target class of this mixin its properties are
used to configure the created Ext.
    */
        factoryConfig: any;
    /**
    Creates new Controller. 
    */
        constructor();
    /**
    Template method called by the owning component's
afterRender method. 
    */
        afterRender(component: Ext.Component):void;
    /**
    Called before the view initializes. 
    */
        beforeInit(view: Ext.Component):void;
    /**
    Template method called by the owning component's
beforeRender method. 
    */
        beforeRender(component: Ext.Component):void;
    /**
    Template method called by the owning component's
onBoxReady method. 
    */
        boxReady(component: Ext.Component):void;
    /**
    This method closes the associated view. 
    */
        closeView():void;
    /**
    Fires an event on the view. 
    */
        fireViewEvent(eventName: string, ...args: any[]):boolean;
    /**
    Returns the value of closeViewAction. 
    */
        getCloseViewAction():string;
    /**
    Returns an object holding the descendants of this view keyed by their
reference. 
    */
        getReferences():any;
    /**
    Get a Ext.data.Session attached to the view for this controller. 
    */
        getSession():Ext.data.Session;
    /**
    Get a Ext.data.Store attached to the ViewModel attached to
this controller. 
    */
        getStore(name: string):Ext.data.Store;
    /**
    Get the view for this controller. 
    */
        getView():Ext.Component;
    /**
    Get a Ext.app.ViewModel attached to the view for this controller. 
    */
        getViewModel():Ext.app.ViewModel;
    /**
    Called when the view initializes. 
    */
        init(view: Ext.Component):void;
    /**
    Called when the view model instance for an attached view is first created. 
    */
        initViewModel(viewModel: Ext.app.ViewModel):void;
    /**
    Get a reference to a component set with the Ext.Component.reference
configuration. 
    */
        lookupReference(key: string):Ext.Component;
    /**
    Sets the value of closeViewAction. 
    */
        setCloseViewAction(closeViewAction: string):void;
    }
    interface ViewModelConfig {
    /**
    This object holds the arbitrary data that populates the ViewModel and is
then available for binding. 
    */
        data?: any;
    /**
    An object that defines named values whose value is managed by function calls. 
    */
        formulas?: any;
    /**
    Links provide a way to assign a simple name to a more complex bind. 
    */
        links?: any;
    /**
    The parent ViewModel of this ViewModel. 
    */
        parent?: Ext.app.ViewModel;
    /**
    The schema to use for getting information about entities. 
    */
        schema?: string|Ext.data.schema.Schema;
    /**
    The session used to manage the data model (records and stores).

    */
        session?: Ext.data.Session;
    /**
    A declaration of Ext.data.Store configurations that are first processed as
binds to produce an effective store config
    */
        stores?: any;
    /**
    The Container that owns this ViewModel instance.

    */
        view?: Ext.container.Container;
    }
    /**
    This class manages arbitrary data and its relationship to data models. 
    */
    export class ViewModel extends Ext.Base {
    /**
    If this property is specified by the target class of this mixin its properties are
used to configure the created Ext.
    */
        factoryConfig: any;
    /**
     
    */
        constructor(config: Ext.app.ViewModelConfig);
    /**
    This method requests that data in this ViewModel be delivered to the specified
callback. 
    */
        bind(descriptor: any, callback: Function, scope?: any, options?: any):Ext.app.bind.BaseBinding|Ext.app.bind.Binding;
    /**
    Get a value from the data for this viewmodel. 
    */
        get(path: string):any;
    /**
    Returns the value of data. 
    */
        getData():any;
    /**
    Returns the value of formulas. 
    */
        getFormulas():any;
    /**
    Retrieves the id of this component. 
    */
        getId():string;
    /**
    Returns the value of links. 
    */
        getLinks():any;
    /**
    Returns the value of parent. 
    */
        getParent():Ext.app.ViewModel;
    /**
    Returns the value of schema. 
    */
        getSchema():string|Ext.data.schema.Schema;
    /**
    Gets the session attached to this (or a parent) ViewModel. 
    */
        getSession():Ext.data.Session;
    /**
    Gets a store configured via the stores configuration. 
    */
        getStore(key: string):Ext.data.Store;
    /**
    Returns the value of stores. 
    */
        getStores():any;
    /**
    Returns the value of view. 
    */
        getView():Ext.container.Container;
    /**
    Create a link to a reference. 
    */
        linkTo(key: string, reference: any):void;
    /**
    Forces all bindings in this ViewModel hierarchy to evaluate immediately. 
    */
        notify():void;
    /**
    Set  a value in the data for this viewmodel. 
    */
        set(path: any, value: any):void;
    /**
    Sets the value of data. 
    */
        setData(data: any):void;
    /**
    Sets the value of formulas. 
    */
        setFormulas(formulas: any):void;
    /**
    Sets the value of links. 
    */
        setLinks(links: any):void;
    /**
    Sets the value of parent. 
    */
        setParent(parent: Ext.app.ViewModel):void;
    /**
    Sets the value of schema. 
    */
        setSchema(schema: string|Ext.data.schema.Schema):void;
    /**
    Sets the value of session. 
    */
        setSession(session: Ext.data.Session):void;
    /**
    Sets the value of stores. 
    */
        setStores(stores: any):void;
    /**
    Sets the value of view. 
    */
        setView(view: Ext.container.Container):void;
    }
}
declare module Ext.app.bind {
    /**
    This class manages bindings for a Session or ViewModel.

    */
    export class AbstractStub extends Ext.util.Schedulable {
    /**
    This property is set at creation of ths stub and should not be changed.

    */
        owner: Ext.data.Session|Ext.app.ViewModel;
    /**
     
    */
        constructor(owner: any, name: any);
    }
    interface BaseBindingConfig {
    /**
    This option instructs the binding to call its destroy method immediately after
delivering the initial value. 
    */
        single?: boolean;
    }
    /**
    This class is the base for Binding and MultiBinding.

    */
    export class BaseBinding extends Ext.util.Schedulable {
    /**
     
    */
        constructor();
    }
    interface BindingConfig extends Ext.app.bind.BaseBindingConfig {
    /**
    Normally a binding is only notified of changes to its bound property, but if that
property is an object it is sometim
    */
        deep?: boolean;
    }
    /**
    This class is created to manage a direct bind. 
    */
    export class Binding extends Ext.app.bind.BaseBinding {
    /**
     
    */
        constructor();
    /**
    Binds to the validation association for the bound property. 
    */
        bindValidation(callback: Function, scope?: any):Ext.app.bind.Binding;
    /**
    Returns the diagnostic name for this binding. 
    */
        getFullName():string;
    /**
    Returns the current value of the bound property. 
    */
        getValue():any;
    /**
    Returns true if the bound property is loading. 
    */
        isLoading():boolean;
    /**
    This method returns true if this binding can only be read. 
    */
        isReadOnly():boolean;
    /**
    Tells the bound property to refresh itself. 
    */
        refresh():void;
    /**
    Sets the value of the bound property. 
    */
        setValue(value: any):void;
    }
    interface FormulaConfig {
    /**
    An explicit bind request to produce data to provide the get function. 
    */
        bind?: any;
    /**
    The function to call to calculate the formula's value. 
    */
        get?: Function;
    /**
    If provided this method allows a formula to be set. 
    */
        set?: Function;
    /**
    This option instructs the binding to call its destroy method immediately after
delivering the initial value. 
    */
        single?: boolean;
    }
    /**
    This class manages a formula defined for an Ext.app.ViewModel. 
    */
    export class Formula extends Ext.util.Schedulable {
    /**
     
    */
        constructor(stub: Ext.app.bind.FormulaConfig, formula: Ext.app.bind.FormulaConfig);
    }
    /**
    This class manages stubs associated with link requests. 
    */
    export class LinkStub extends Ext.app.bind.Stub {
    /**
     
    */
        constructor(owner: any, name: any, parent: any);
    }
    interface MultiConfig extends Ext.app.bind.BaseBindingConfig {
    }
    /**
    This class is created to manage a multi-bind against a ViewModel.

    */
    export class Multi extends Ext.app.bind.BaseBinding {
    /**
     
    */
        constructor();
    }
    /**
    This class is the root stub for managing a ViewModel.

    */
    export class RootStub extends Ext.app.bind.AbstractStub {
    /**
     
    */
        constructor(owner: any, name: any);
    }
    /**
    This class and its derived classes are used to manage access to the properties of an
object stored in a Session.

    */
    export class Stub extends Ext.app.bind.AbstractStub {
    /**
     
    */
        constructor(owner: any, name: any, parent: any);
    }
    /**
    This class holds the parsed text for a bind template. 
    */
    export class Template extends Ext.Base {
    /**
     
    */
        constructor(text: string);
    /**
    Applies this template to the given values. 
    */
        apply(values: any[], scope: any):string;
    /**
    Returns the distinct set of binding tokens for this template. 
    */
        getTokens():string[];
    }
    interface TemplateBindingConfig extends Ext.app.bind.BaseBindingConfig {
    }
    /**
    This class is created to manage a template against a ViewModel. 
    */
    export class TemplateBinding extends Ext.app.bind.BaseBinding {
    /**
     
    */
        constructor(template: Ext.app.bind.TemplateBindingConfig, owner: Ext.app.bind.TemplateBindingConfig, callback: Ext.app.bind.TemplateBindingConfig, scope: Ext.app.bind.TemplateBindingConfig, options: Ext.app.bind.TemplateBindingConfig);
    }
}
declare module Ext.app.domain {
    interface ComponentConfig {
    }
    /**
    This class implements the component event domain. 
    */
    export class Component {
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface ControllerConfig {
    }
    /**
    This class implements the controller event domain. 
    */
    export class Controller {
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface DirectConfig {
    }
    /**
    This class implements the Ext.Direct event domain. 
    */
    export class Direct {
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface GlobalConfig {
    }
    /**
    This class implements the global event domain. 
    */
    export class Global {
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface StoreConfig {
    }
    /**
    This class implements the data store event domain. 
    */
    export class Store {
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface ViewConfig extends Ext.app.EventDomainConfig {
    }
    /**
    

    */
    export class View extends Ext.app.EventDomain {
    /**
     
    */
        constructor(controller: Ext.app.domain.ViewConfig);
    }
}
declare module Ext.app.route {
    /**
    A Queue is a queue of Ext.app.route.Route instances managed by the
Ext.app.route.Router singleton if queueActions is 
    */
    export class Queue extends Ext.Base {
    /**
    The token from the Ext.app.route.Router that is being enacted on.

    */
        token: any;
    /**
     
    */
        constructor(config: any);
    /**
    Clear all queued actions. 
    */
        clearQueue():void;
    /**
    Handle the execution of a queued action and optionally clear all queued actions. 
    */
        onActionExecute(clearQueue: boolean):void;
    /**
    Add a Ext.app.route.Route to the queue. 
    */
        queueAction(route: Ext.app.route.Route, args: any):void;
    /**
    Run the queue one by one. 
    */
        runQueue():void;
    }
    interface RouteConfig {
    /**
    The name of the action that will be called on the
controller if this route is matched.

    */
        action?: string;
    /**
    true to allow this route to be triggered on
a controller that is not active. 
    */
        allowInactive?: boolean;
    /**
    An optional function to use to intercept the action
to do extra means and possibly stop the execution. 
    */
        before?: Function;
    /**
    true to allow the tokens to be matched with
case-insensitive. 
    */
        caseInsensitive?: boolean;
    /**
    Optional set of conditions for each token in the url
string. 
    */
        conditions?: any;
    /**
    The name of the Controller whose action will be
called if this route is matched.

    */
        controller?: string;
    /**
    The url regex to match against.

    */
        url?: string;
    }
    /**
    Represents a mapping between a url and a controller/action pair. 
    */
    export class Route extends Ext.Base {
    /**
     
    */
        constructor(config: Ext.app.route.RouteConfig);
    /**
    Attempts to recognize a given url string and return controller/action pair for it. 
    */
        recognize(url: string):any;
    }
    /**
    The Router is an ordered set of Ext.app.route.Route definitions that decode a
url into a controller function to execute. 
    */
    export class Router {
    /**
    The token to split the routes to support multiple routes. 
    */
        static multipleToken: string;
    /**
    True to queue routes to be executed one after the
other, false to execute routes immediately. 
    */
        static queueRoutes: boolean;
    /**
    The connected Ext.app.route.Route
instances.

    */
        static routes: Ext.app.route.Route[];
    /**
    Clear all the recognized routes. 
    */
        static clear():void;
    /**
    Create the Ext.app.route.Route instance and connect to the
Ext.app.route.Router singleton. 
    */
        static connect(url: string, action: string, controller: Ext.app.Controller):void;
    /**
    Disconnects all routes for a controller. 
    */
        static disconnectAll(controller: Ext.app.Controller):void;
    /**
    Convenience method which just calls the supplied function with the
Ext.app.route.Router singleton. 
    */
        static draw(fn: Function):void;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Recognizes a url string connected to the Router, return the controller/action pair
plus any additional config associa
    */
        static recognize(url: string):any;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
}
declare module Ext.button {
    interface ButtonConfig extends Ext.ComponentConfig {
    /**
    False to not allow a pressed Button to be depressed. 
    */
        allowDepress?: boolean;
    /**
    The side of the Button box to render the arrow if the button has an associated menu. 
    */
        arrowAlign?: string;
    /**
    The className used for the inner arrow element if the button has a menu. 
    */
        arrowCls?: string;
    /**
    false to hide the button arrow. 
    */
        arrowVisible?: boolean;
    /**
    An object literal of parameters to pass to the url when the href property is specified.

    */
        baseParams?: any;
    /**
    The DOM event that will fire the handler of the button. 
    */
        clickEvent?: string;
    /**
    Whether or not to destroy any associated menu when this button is destroyed. 
    */
        destroyMenu?: boolean;
    /**
    True to enable pressed/not pressed toggling. 
    */
        enableToggle?: boolean;
    /**
    A numeric unicode character code to use as the icon for this button. 
    */
        glyph?: number|string;
    /**
    False to disable visual cues on mouseover, mouseout and mousedown. 
    */
        handleMouseEvents?: boolean;
    /**
    A function called when the button is clicked (can be used instead of click event). 
    */
        handler?: Function|string;
    /**
    The URL to open when the button is clicked. 
    */
        href?: string;
    /**
    The target attribute to use for the underlying anchor. 
    */
        hrefTarget?: string;
    /**
    The path to an image to display in the button. 
    */
        icon?: string;
    /**
    The side of the Button box to render the icon. 
    */
        iconAlign?: string;
    /**
    A css class which sets a background image to be used as the icon for this button. 
    */
        iconCls?: string;
    /**
    Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob.

    */
        menu?: any;
    /**
    The position to align the menu to (see Ext.util.Positionable.alignTo for more details). 
    */
        menuAlign?: string;
    /**
    If used in a Toolbar, the text to be used if this item is shown in the overflow menu. 
    */
        overflowText?: string;
    /**
    An object literal of parameters to pass to the url when the href property is specified. 
    */
        params?: any;
    /**
    True to start pressed (only if enableToggle = true) 
    */
        pressed?: boolean;
    /**
    true to prevent the default action when the clickEvent is processed. 
    */
        preventDefault?: boolean;
    /**
    True to repeat fire the click event while the mouse is down. 
    */
        repeat?: any;
    /**
    The size of the Button. 
    */
        scale?: any;
    /**
    The scope (this reference) in which the handler and toggleHandler is executed. 
    */
        scope?: any;
    /**
    True to force an attached menu with no items to be shown when clicking
this button. 
    */
        showEmptyMenu?: boolean;
    /**
    The button text to be used as innerHTML (html tags are accepted).

    */
        text?: string;
    /**
    The text alignment for this button (center, left, right). 
    */
        textAlign?: string;
    /**
    The group this toggle button is a member of (only 1 per group can be pressed). 
    */
        toggleGroup?: string;
    /**
    Function called when a Button with enableToggle set to true is clicked. 
    */
        toggleHandler?: Function|string;
    /**
    The tooltip for the button - can be a string to be used as innerHTML (html tags are accepted) or
QuickTips config obj
    */
        tooltip?: any;
    /**
    The type of tooltip to use. 
    */
        tooltipType?: string;
    /**
    The value of this button. 
    */
        value?: string|number;
    }
    /**
    Create simple buttons with this component. 
    */
    export class Button extends Ext.Component {
    /**
    true in this class to identify an object as an instantiated Button, or subclass thereof. 
    */
        isButton: boolean;
    /**
    The Menu object associated with this Button when configured with the menu config
option.

    */
        menu: any;
    /**
    True if this button is pressed (only if enableToggle = true). 
    */
        pressed: boolean|boolean;
    /**
    A Template used to create the Button's DOM structure. 
    */
        template: Ext.Template;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.button.ButtonConfig);
    /**
    Retrieves the first direct child of this container which matches the passed selector or component. 
    */
        child(selector?: string|Ext.Component):any;
    /**
    Retrieves the first descendant of this container which matches the passed selector. 
    */
        down(selector?: string|Ext.Component):any;
    /**
    Returns the value of arrowVisible. 
    */
        getArrowVisible():boolean;
    /**
    Returns the value of iconAlign. 
    */
        getIconAlign():string;
    /**
    Get the menu for this button. 
    */
        getMenu():Ext.menu.Menu;
    /**
    This method returns an object which provides substitution parameters for the XTemplate used to
create this Button's D
    */
        getTemplateArgs():any;
    /**
    Returns the value of text. 
    */
        getText():string;
    /**
    Returns the value of textAlign. 
    */
        getTextAlign():string;
    /**
    Returns true if the button has a menu and it is visible 
    */
        hasVisibleMenu():boolean;
    /**
    Hides this button's menu (if it has one) 
    */
        hideMenu():Ext.button.Button;
    /**
    Returns true if the passed event's x/y coordinates are within the trigger region 
    */
        isWithinTrigger(e: Ext.event.Event):void;
    /**
    Retrieves all descendant components which match the passed selector. 
    */
        query(selector?: string):Ext.Component[];
    /**
    Retrieves all descendant components which match the passed function. 
    */
        queryBy(fn: Function, scope?: any):Ext.Component[];
    /**
    Finds a component at any level under this container matching the id/itemId. 
    */
        queryById(id: string):Ext.Component;
    /**
    Sets the value of arrowVisible. 
    */
        setArrowVisible(arrowVisible: boolean):void;
    /**
    Sets this button's glyph 
    */
        setGlyph(glyph: number|string):Ext.button.Button;
    /**
    Assigns this Button's click handler 
    */
        setHandler(handler: Function, scope?: any):Ext.button.Button;
    /**
    Sets the href of the embedded anchor element to the passed URL. 
    */
        setHref(href: string):void;
    /**
    Sets the background image (inline style) of the button. 
    */
        setIcon(icon: string):Ext.button.Button;
    /**
    Sets the value of iconAlign. 
    */
        setIconAlign(iconAlign: string):void;
    /**
    Sets the CSS class that provides a background image to use as the button's icon. 
    */
        setIconCls(cls: string):Ext.button.Button;
    /**
    Sets a new menu for this button. 
    */
        setMenu(menu: any, destroyMenu: boolean):void;
    /**
    Sets the href of the link dynamically according to the params passed, and any baseParams configured. 
    */
        setParams(params: any):void;
    /**
    Sets the pressed state of this button. 
    */
        setPressed(pressed?: boolean):Ext.button.Button;
    /**
    Method to change the scale of the button. 
    */
        setScale(scale: string):void;
    /**
    Sets the value of text. 
    */
        setText(text: string):void;
    /**
    Sets the value of textAlign. 
    */
        setTextAlign(textAlign: string):void;
    /**
    Sets the tooltip for this Button. 
    */
        setTooltip(tooltip: any):Ext.button.Button;
    /**
    Shows this button's menu (if it has one) 
    */
        showMenu(clickEvent: any):void;
    /**
    If a state it passed, it becomes the pressed state otherwise the current state is toggled. 
    */
        toggle(state?: boolean, suppressEvent?: boolean):Ext.button.Button;
    /**
    Traverses the tree rooted at this node in post-order mode, calling the passed function on the nodes at each level. 
    */
        visitPostOrder(selector: any, fn: (node: any) => any, scope?: any, extraArgs?: any[]):void;
    /**
    Traverses the tree rooted at this node in pre-order mode, calling the passed function on the nodes at each level. 
    */
        visitPreOrder(selector: any, fn: (node: any) => any, scope?: any, extraArgs?: any[]):void;
    }
    interface CycleConfig extends Ext.button.SplitConfig {
    /**
    A callback function that will be invoked each time the active menu item in the button's menu has changed. 
    */
        changeHandler?: Function|string;
    /**
    The charCode to be used as the static icon for this button. 
    */
        forceGlyph?: number|string;
    /**
    A css class which sets an image to be used as the static icon for this button. 
    */
        forceIcon?: string;
    /**
    An array of Ext.menu.CheckItem config objects to be used when creating the button's menu items (e.g.,
{text:'Foo', ic
    */
        items?: any[];
    /**
    A static string to prepend before the active item's text when displayed as the button's text (only applies when
showT
    */
        prependText?: string;
    /**
    True to display the active item's text as the button text. 
    */
        showText?: boolean;
    }
    /**
    A specialized SplitButton that contains a menu of Ext.menu.CheckItem elements. 
    */
    export class Cycle extends Ext.button.Split {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.button.CycleConfig);
    /**
    Gets the currently active menu item. 
    */
        getActiveItem():Ext.menu.CheckItem;
    /**
    Sets the button's active menu item. 
    */
        setActiveItem(item: Ext.menu.CheckItem, suppressEvent?: boolean):void;
    /**
    This is normally called internally on button click, but can be called externally to advance the button's active
item 
    */
        toggleSelected():void;
    }
    /**
    

    */
    export class Manager {
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Gets the pressed button in the passed group or null 
    */
        static getPressed(groupName: string):Ext.button.Button;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface SegmentedConfig extends Ext.container.ContainerConfig {
    /**
    Allow toggling the pressed state of each button. 
    */
        allowDepress?: boolean;
    /**
    Allow multiple pressed buttons. 
    */
        allowMultiple?: boolean;
    /**
    True to enable pressed/not pressed toggling. 
    */
        allowToggle?: boolean;
    /**
    Default ui to use for buttons in this segmented button. 
    */
        defaultUI?: string;
    /**
    The value of this button. 
    */
        value?: string|number|string[]|number[];
    /**
    True to align the buttons vertically 
    */
        vertical?: boolean;
    }
    /**
    SegmentedButton is a container for a group of Buttons. 
    */
    export class Segmented extends Ext.container.Container {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.button.SegmentedConfig);
    /**
    Returns the value of allowDepress. 
    */
        getAllowDepress():boolean;
    /**
    Returns the value of allowMultiple. 
    */
        getAllowMultiple():boolean;
    /**
    Returns the value of allowToggle. 
    */
        getAllowToggle():boolean;
    /**
    Returns the value of defaultUI. 
    */
        getDefaultUI():string;
    /**
    Returns the value of value. 
    */
        getValue():string|number|string[]|number[];
    /**
    Returns the value of vertical. 
    */
        getVertical():boolean;
    /**
    Sets the value of allowDepress. 
    */
        setAllowDepress(allowDepress: boolean):void;
    /**
    Sets the value of allowMultiple. 
    */
        setAllowMultiple(allowMultiple: boolean):void;
    /**
    Sets the value of allowToggle. 
    */
        setAllowToggle(allowToggle: boolean):void;
    /**
    Sets the value of defaultUI. 
    */
        setDefaultUI(defaultUI: string):void;
    /**
    Sets the value of value. 
    */
        setValue(value: string|number|string[]|number[]):void;
    /**
    Sets the value of vertical. 
    */
        setVertical(vertical: boolean):void;
    }
    interface SplitConfig extends Ext.button.ButtonConfig {
    /**
    A function called when the arrow button is clicked (can be used instead of click event) 
    */
        arrowHandler?: Function|string;
    /**
    The title attribute of the arrow.

    */
        arrowTooltip?: string;
    }
    /**
    A split button that provides a built-in dropdown arrow that can fire an event separately from the default click event
    */
    export class Split extends Ext.button.Button {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.button.SplitConfig);
    /**
    Sets this button's arrow click handler. 
    */
        setArrowHandler(handler: Function, scope?: any):void;
    }
}
declare module Ext.chart {
    interface AbstractChartConfig extends Ext.draw.ContainerConfig {
    /**
    (optional) true for the default animation (easing: 'ease' and duration: 500)
or a standard animation config object to
    */
        animation?: any;
    /**
    Array of Axis instances or config objects. 
    */
        axes?: any;
    /**
    Set the chart background. 
    */
        background?: any;
    /**
    Array of colors/gradients to override the color of items and legends.

    */
        colors?: any[];
    /**
    The current highlight item in the chart. 
    */
        highlightItem?: any;
    /**
    The amount of inset padding in pixels for the chart. 
    */
        insetPadding?: any;
    /**
    Interactions are optional modules that can be plugged in to a chart to allow the user to interact
with the chart and 
    */
        interactions?: any[];
    /**
    

    */
        legend?: any;
    /**
    Array of Series instances or config objects. 
    */
        series?: Ext.chart.series.Series|any[];
    /**
    The data source to which the chart is bound. 
    */
        store?: any;
    /**
    The name of the theme to be used. 
    */
        theme?: string;
    }
    /**
    The Ext.chart package provides the capability to visualize data. 
    */
    export class AbstractChart extends Ext.draw.Container {
    /**
    Current version of Sencha Charts. 
    */
        version: string;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.chart.AbstractChartConfig);
    /**
    Adds a Series to this chart. 
    */
        addSeries(newSeries: any):void;
    /**
    Changes the data store bound to this chart and refreshes it. 
    */
        bindStore(store: Ext.data.Store):void;
    /**
    Returns the value of axes. 
    */
        getAxes():any;
    /**
    Returns an axis instance based on the type of data passed. 
    */
        getAxis(axis: string|number|Ext.chart.axis.Axis):Ext.chart.axis.Axis;
    /**
    Returns the value of background. 
    */
        getBackground():any;
    /**
    Returns the value of highlightItem. 
    */
        getHighlightItem():any;
    /**
    Returns the value of insetPadding. 
    */
        getInsetPadding():any;
    /**
    Returns the value of interactions. 
    */
        getInteractions():any[];
    /**
    Given an x/y point relative to the chart, find and return the first series item that
matches that point. 
    */
        getItemForPoint(x: number, y: number):any;
    /**
    Given an x/y point relative to the chart, find and return all series items that match that point. 
    */
        getItemsForPoint(x: number, y: number):any[];
    /**
    Returns the value of legend. 
    */
        getLegend():any;
    /**
    Return the legend store that contains all the legend information. 
    */
        getLegendStore():Ext.data.Store;
    /**
    Returns the value of series. 
    */
        getSeries():Ext.chart.series.Series|any[];
    /**
    Returns the value of store. 
    */
        getStore():any;
    /**
    Returns the value of style. 
    */
        getStyle():any;
    /**
    Returns the value of theme. 
    */
        getTheme():string;
    /**
    Redraw the chart. 
    */
        redraw():void;
    /**
    Remove a Series from this chart. 
    */
        removeSeries(series: Ext.chart.series.Series|string):void;
    /**
    Resume the layout initialized by thickness change 
    */
        resumeThicknessChanged():void;
    /**
    Schedule a layout at next frame. 
    */
        scheduleLayout():void;
    /**
    Sets the value of animation. 
    */
        setAnimation(animation: any):void;
    /**
    Sets the value of axes. 
    */
        setAxes(axes: any):void;
    /**
    Sets the value of background. 
    */
        setBackground(background: any):void;
    /**
    Sets the value of colors. 
    */
        setColors(colors: any[]):void;
    /**
    Sets the value of highlightItem. 
    */
        setHighlightItem(highlightItem: any):void;
    /**
    Sets the value of insetPadding. 
    */
        setInsetPadding(insetPadding: any):void;
    /**
    Sets the value of interactions. 
    */
        setInteractions(interactions: any[]):void;
    /**
    Sets the value of legend. 
    */
        setLegend(legend: any):void;
    /**
    Sets the value of series. 
    */
        setSeries(series: Ext.chart.series.Series|any[]):void;
    /**
    Sets the value of store. 
    */
        setStore(store: any):void;
    /**
    Sets the value of theme. 
    */
        setTheme(theme: string):void;
    /**
    Suspend the layout initialized by thickness change 
    */
        suspendThicknessChanged():void;
    }
    interface CartesianChartConfig extends Ext.chart.AbstractChartConfig {
    /**
    Flip the direction of X and Y axis. 
    */
        flipXY?: boolean;
    /**
    The amount of inner padding in pixels. 
    */
        innerPadding?: any;
    }
    /**
    Represents a chart that uses cartesian coordinates. 
    */
    export class CartesianChart extends Ext.chart.AbstractChart {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.chart.CartesianChartConfig);
    /**
    Returns the value of flipXY. 
    */
        getFlipXY():boolean;
    /**
    Returns the value of innerPadding. 
    */
        getInnerPadding():any;
    /**
    Returns the value of innerRect. 
    */
        getInnerRect():any[];
    /**
    Layout the axes and series. 
    */
        performLayout():void;
    /**
    Sets the value of flipXY. 
    */
        setFlipXY(flipXY: boolean):void;
    /**
    Sets the value of innerPadding. 
    */
        setInnerPadding(innerPadding: any):void;
    /**
    Sets the value of innerRect. 
    */
        setInnerRect(innerRect: any[]):void;
    }
    interface LegendConfig extends Ext.chart.LegendBaseConfig {
    /**
    The rect of the legend related to its container.

    */
        rect?: any[];
    /**
    true to allow series items to have their visibility
toggled by interaction with the legend items. 
    */
        toggleable?: boolean;
    }
    /**
    

    */
    export class Legend extends Ext.chart.LegendBase {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.chart.LegendConfig);
    /**
    Returns the value of baseCls. 
    */
        getBaseCls():string;
    /**
    Returns the value of disableSelection. 
    */
        getDisableSelection():boolean;
    /**
    Returns the value of padding. 
    */
        getPadding():number;
    /**
    Returns the value of rect. 
    */
        getRect():any[];
    /**
    Returns the value of toggleable. 
    */
        getToggleable():boolean;
    /**
    Sets the value of baseCls. 
    */
        setBaseCls(baseCls: string):void;
    /**
    Sets the value of disableSelection. 
    */
        setDisableSelection(disableSelection: boolean):void;
    /**
    Sets the value of padding. 
    */
        setPadding(padding: number):void;
    /**
    Sets the value of rect. 
    */
        setRect(rect: any[]):void;
    /**
    Sets the value of toggleable. 
    */
        setToggleable(toggleable: boolean):void;
    }
    interface LegendBaseConfig extends Ext.view.ViewConfig {
    }
    /**
    

    */
    export class LegendBase extends Ext.view.View {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.chart.LegendBaseConfig);
    /**
    Returns the value of docked. 
    */
        getDocked():string;
    /**
    Returns the value of itemSelector. 
    */
        getItemSelector():string;
    /**
    Returns the value of tpl. 
    */
        getTpl():any[];
    /**
    Sets the value of itemSelector. 
    */
        setItemSelector(itemSelector: string):void;
    /**
    Sets the value of nodeContainerSelector. 
    */
        setNodeContainerSelector(nodeContainerSelector: string):void;
    /**
    Sets the value of tpl. 
    */
        setTpl(tpl: any[]):void;
    }
    /**
    Mixin that provides the functionality to place markers.

    */
    export class MarkerHolder extends Ext.Mixin {
    /**
     
    */
        constructor();
    /**
     
    */
        bindMarker(name: string, marker: Ext.chart.Markers):void;
    }
    interface MarkersConfig extends Ext.draw.sprite.InstancingConfig {
    }
    /**
    Marker sprite. 
    */
    export class Markers extends Ext.draw.sprite.Instancing {
    /**
     
    */
        constructor();
    /**
    Clears the markers in the category. 
    */
        clear(category: string):void;
    /**
     
    */
        getMarkerBBoxFor(category: string, index: any, isWithoutTransform?: boolean):void;
    /**
    Puts a marker in the category with additional attributes. 
    */
        putMarkerFor(category: string, attr: any, index: string|number, bypassNormalization?: boolean, keepRevision?: boolean):void;
    }
    interface PolarChartConfig extends Ext.chart.AbstractChartConfig {
    /**
    The amount of inner padding in pixels. 
    */
        innerPadding?: number;
    /**
    Determines the radius of the polar chart. 
    */
        radius?: number;
    }
    /**
    Represent a chart that uses polar coordinates. 
    */
    export class PolarChart extends Ext.chart.AbstractChart {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.chart.PolarChartConfig);
    /**
    Returns the value of center. 
    */
        getCenter():any[];
    /**
    Returns the value of innerPadding. 
    */
        getInnerPadding():number;
    /**
    Returns the value of radius. 
    */
        getRadius():number;
    /**
    Sets the value of center. 
    */
        setCenter(center: any[]):void;
    /**
    Sets the value of innerPadding. 
    */
        setInnerPadding(innerPadding: number):void;
    /**
    Sets the value of radius. 
    */
        setRadius(radius: number):void;
    }
    interface SpaceFillingChartConfig extends Ext.chart.AbstractChartConfig {
    }
    /**
    Creates a chart that fills the entire area of the chart. 
    */
    export class SpaceFillingChart extends Ext.chart.AbstractChart {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.chart.SpaceFillingChartConfig);
    }
    interface TipSurfaceConfig extends Ext.draw.ContainerConfig {
    }
    /**
    

    */
    export class TipSurface extends Ext.draw.Container {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.chart.TipSurfaceConfig);
    }
}
declare module Ext.chart.axis {
    interface AxisConfig {
    /**
    Whether to make the auto-calculated minimum and maximum of the axis
a multiple of the interval between the major tick
    */
        adjustByMajorUnit?: boolean;
    /**
    The background config for the axis surface.

    */
        background?: any;
    /**
    The Chart that the Axis is bound.

    */
        chart?: Ext.chart.AbstractChart;
    /**
    An array containing the names of the record fields which should be mapped along the axis. 
    */
        fields?: any[];
    /**
    If floating is a number, then it's a percentage displacement of the axis from its initial position
in the direction o
    */
        floating?: any;
    /**
    The grid configuration object for the Axis style. 
    */
        grid?: any;
    /**
    Indicate whether to hide the axis. 
    */
        hidden?: boolean;
    /**
    Given a minimum and maximum bound for the series to be rendered (that can be obtained
automatically or by manually se
    */
        increment?: number;
    /**
    The label configuration object for the Axis. 
    */
        label?: any;
    /**
    Draws the labels in the middle of the spans.

    */
        labelInSpan?: boolean;
    /**
    The axis layout config. 
    */
        layout?: any;
    /**
    The limit lines configuration for the axis. 
    */
        limits?: any;
    /**
    Axis (itself, its ID or index) that this axis is linked to. 
    */
        linkedTo?: Ext.chart.axis.Axis|string|number;
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    /**
    Forces the number of major ticks to the specified value. 
    */
        majorTickSteps?: number;
    /**
    The margin of the axis. 
    */
        margin?: number;
    /**
    The maximum zooming level for axis. 
    */
        maxZoom?: number;
    /**
    The maximum value drawn by the axis. 
    */
        maximum?: number;
    /**
    The minimum zooming level for axis. 
    */
        minZoom?: number;
    /**
    The minimum value drawn by the axis. 
    */
        minimum?: number;
    /**
    The number of small ticks between two major ticks. 
    */
        minorTickSteps?: number;
    /**
    Indicates that the axis needs high precision surface implementation. 
    */
        needHighPrecision?: boolean;
    /**
    Where to set the axis. 
    */
        position?: string;
    /**
    If 'true' the range of the axis will be a union of ranges
of all the axes with the same direction. 
    */
        reconcileRange?: boolean;
    /**
    Allows direct customization of rendered axis sprites. 
    */
        renderer?: Function;
    /**
    The segmenter config. 
    */
        segmenter?: any;
    /**
    The style for the axis line and ticks. 
    */
        style?: any;
    /**
    The title for the Axis. 
    */
        title?: any;
    /**
    The margin around the axis title. 
    */
        titleMargin?: number;
    /**
    Specify the proportion of the axis to be rendered. 
    */
        visibleRange?: any[];
    }
    /**
    Defines axis for charts. 
    */
    export class Axis extends Ext.Base {
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
     
    */
        constructor(config: Ext.chart.axis.AxisConfig);
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Returns the value of adjustByMajorUnit. 
    */
        getAdjustByMajorUnit():boolean;
    /**
    Returns the value of background. 
    */
        getBackground():any;
    /**
    Returns the value of chart. 
    */
        getChart():Ext.chart.AbstractChart;
    /**
    Mapping data value into coordinate. 
    */
        getCoordFor(value: any, field: string, idx?: number, items?: Ext.util.MixedCollection):number;
    /**
    Returns the value of fields. 
    */
        getFields():any[];
    /**
    Returns the value of floating. 
    */
        getFloating():any;
    /**
    Returns the value of grid. 
    */
        getGrid():any;
    /**
    Returns the value of hidden. 
    */
        getHidden():boolean;
    /**
    Returns the value of increment. 
    */
        getIncrement():number;
    /**
    Returns the value of label. 
    */
        getLabel():any;
    /**
    Returns the value of labelInSpan. 
    */
        getLabelInSpan():boolean;
    /**
    Returns the value of layout. 
    */
        getLayout():any;
    /**
    Returns the value of limits. 
    */
        getLimits():any;
    /**
    Returns the value of linkedTo. 
    */
        getLinkedTo():Ext.chart.axis.Axis|string|number;
    /**
    Returns the value of majorTickSteps. 
    */
        getMajorTickSteps():number;
    /**
    Returns the value of margin. 
    */
        getMargin():number;
    /**
    Returns the value of maxZoom. 
    */
        getMaxZoom():number;
    /**
    Returns the value of maximum. 
    */
        getMaximum():number;
    /**
    Returns the value of minZoom. 
    */
        getMinZoom():number;
    /**
    Returns the value of minimum. 
    */
        getMinimum():number;
    /**
    Returns the value of minorTickSteps. 
    */
        getMinorTickSteps():number;
    /**
    Returns the value of needHighPrecision. 
    */
        getNeedHighPrecision():boolean;
    /**
    Returns the value of position. 
    */
        getPosition():string;
    /**
    Get the range derived from all the bound series. 
    */
        getRange():any[];
    /**
    Returns the value of reconcileRange. 
    */
        getReconcileRange():boolean;
    /**
    Returns the value of renderer. 
    */
        getRenderer():Function;
    /**
    Returns the value of segmenter. 
    */
        getSegmenter():any;
    /**
    Returns the value of style. 
    */
        getStyle():any;
    /**
    Returns the value of title. 
    */
        getTitle():any;
    /**
    Returns the value of titleMargin. 
    */
        getTitleMargin():number;
    /**
    Returns the value of visibleRange. 
    */
        getVisibleRange():any[];
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Invoked when data has changed. 
    */
        processData():void;
    /**
    Expands the range of the axis
based on the range of other axes with the same direction (if any). 
    */
        reconcileRange():void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Invokes renderFrame on this axis's surface(s) 
    */
        renderFrame():void;
    /**
    Override the Observable's method to redirect listener scope
resolution to the chart. 
    */
        resolveListenerScope(defaultScope: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    Sets the value of adjustByMajorUnit. 
    */
        setAdjustByMajorUnit(adjustByMajorUnit: boolean):void;
    /**
    Sets the value of background. 
    */
        setBackground(background: any):void;
    /**
    Sets the value of chart. 
    */
        setChart(chart: Ext.chart.AbstractChart):void;
    /**
    Sets the value of fields. 
    */
        setFields(fields: any[]):void;
    /**
    Sets the value of floating. 
    */
        setFloating(floating: any):void;
    /**
    Sets the value of grid. 
    */
        setGrid(grid: any):void;
    /**
    Sets the value of hidden. 
    */
        setHidden(hidden: boolean):void;
    /**
    Sets the value of increment. 
    */
        setIncrement(increment: number):void;
    /**
    Sets the value of label. 
    */
        setLabel(label: any):void;
    /**
    Sets the value of labelInSpan. 
    */
        setLabelInSpan(labelInSpan: boolean):void;
    /**
    Sets the value of layout. 
    */
        setLayout(layout: any):void;
    /**
    Sets the value of limits. 
    */
        setLimits(limits: any):void;
    /**
    Sets the value of linkedTo. 
    */
        setLinkedTo(linkedTo: Ext.chart.axis.Axis|string|number):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Sets the value of majorTickSteps. 
    */
        setMajorTickSteps(majorTickSteps: number):void;
    /**
    Sets the value of margin. 
    */
        setMargin(margin: number):void;
    /**
    Sets the value of maxZoom. 
    */
        setMaxZoom(maxZoom: number):void;
    /**
    Sets the value of maximum. 
    */
        setMaximum(maximum: number):void;
    /**
    Sets the value of minZoom. 
    */
        setMinZoom(minZoom: number):void;
    /**
    Sets the value of minimum. 
    */
        setMinimum(minimum: number):void;
    /**
    Sets the value of minorTickSteps. 
    */
        setMinorTickSteps(minorTickSteps: number):void;
    /**
    Sets the value of needHighPrecision. 
    */
        setNeedHighPrecision(needHighPrecision: boolean):void;
    /**
    Sets the value of position. 
    */
        setPosition(position: string):void;
    /**
    Sets the value of reconcileRange. 
    */
        setReconcileRange(reconcileRange: boolean):void;
    /**
    Sets the value of renderer. 
    */
        setRenderer(renderer: Function):string;
    /**
    Sets the value of segmenter. 
    */
        setSegmenter(segmenter: any):void;
    /**
    Sets the value of style. 
    */
        setStyle(style: any):void;
    /**
    Sets the value of title. 
    */
        setTitle(title: any):void;
    /**
    Sets the value of titleMargin. 
    */
        setTitleMargin(titleMargin: number):void;
    /**
    Sets the value of visibleRange. 
    */
        setVisibleRange(visibleRange: any[]):void;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    }
    interface Axis3DConfig extends Ext.chart.axis.AxisConfig {
    }
    /**
    Defines a 3D axis for charts. 
    */
    export class Axis3D extends Ext.chart.axis.Axis {
    /**
     
    */
        constructor(config: Ext.chart.axis.Axis3DConfig);
    }
    interface CategoryConfig extends Ext.chart.axis.AxisConfig {
    }
    /**
    A type of axis that displays items in categories. 
    */
    export class Category extends Ext.chart.axis.Axis {
    /**
     
    */
        constructor(config: Ext.chart.axis.CategoryConfig);
    }
    interface Category3DConfig extends Ext.chart.axis.Axis3DConfig {
    }
    /**
    Category 3D Axis

    */
    export class Category3D extends Ext.chart.axis.Axis3D {
    /**
     
    */
        constructor(config: Ext.chart.axis.Category3DConfig);
    }
    interface NumericConfig extends Ext.chart.axis.AxisConfig {
    }
    /**
    An axis to handle numeric values. 
    */
    export class Numeric extends Ext.chart.axis.Axis {
    /**
     
    */
        constructor(config: Ext.chart.axis.NumericConfig);
    /**
    Returns the value of aggregator. 
    */
        getAggregator():string;
    /**
    Sets the value of aggregator. 
    */
        setAggregator(aggregator: string):void;
    }
    interface Numeric3DConfig extends Ext.chart.axis.Axis3DConfig {
    }
    /**
    

    */
    export class Numeric3D extends Ext.chart.axis.Axis3D {
    /**
     
    */
        constructor(config: Ext.chart.axis.Numeric3DConfig);
    /**
    Returns the value of aggregator. 
    */
        getAggregator():string;
    /**
    Sets the value of aggregator. 
    */
        setAggregator(aggregator: string):void;
    }
    interface TimeConfig extends Ext.chart.axis.NumericConfig {
    /**
    The minimum value drawn by the axis. 
    */
        calculateByLabelSize?: boolean;
    /**
    Indicates the format the date will be rendered on. 
    */
        dateFormat?: string|boolean;
    /**
    The starting date for the time axis.

    */
        fromDate?: Date;
    /**
    An array with two components:


The unit of the step (Ext.Date.DAY, Ext.Date.MONTH, etc). 
    */
        step?: any[];
    /**
    The ending date for the time axis.

    */
        toDate?: Date;
    }
    /**
    A type of axis whose units are measured in time values. 
    */
    export class Time extends Ext.chart.axis.Numeric {
    /**
     
    */
        constructor(config: Ext.chart.axis.TimeConfig);
    /**
    Returns the value of calculateByLabelSize. 
    */
        getCalculateByLabelSize():boolean;
    /**
    Returns the value of dateFormat. 
    */
        getDateFormat():string|boolean;
    /**
    Returns the value of fromDate. 
    */
        getFromDate():Date;
    /**
    Returns the value of step. 
    */
        getStep():any[];
    /**
    Returns the value of toDate. 
    */
        getToDate():Date;
    /**
    Sets the value of calculateByLabelSize. 
    */
        setCalculateByLabelSize(calculateByLabelSize: boolean):void;
    /**
    Sets the value of dateFormat. 
    */
        setDateFormat(dateFormat: string|boolean):void;
    /**
    Sets the value of fromDate. 
    */
        setFromDate(fromDate: Date):void;
    /**
    Sets the value of step. 
    */
        setStep(step: any[]):void;
    /**
    Sets the value of toDate. 
    */
        setToDate(toDate: Date):void;
    }
    interface Time3DConfig extends Ext.chart.axis.Numeric3DConfig {
    /**
    The minimum value drawn by the axis. 
    */
        calculateByLabelSize?: boolean;
    /**
    Indicates the format the date will be rendered on. 
    */
        dateFormat?: string|boolean;
    /**
    The starting date for the time axis.

    */
        fromDate?: Date;
    /**
    An array with two components:


The unit of the step (Ext.Date.DAY, Ext.Date.MONTH, etc). 
    */
        step?: any[];
    /**
    The ending date for the time axis.

    */
        toDate?: Date;
    }
    /**
    

    */
    export class Time3D extends Ext.chart.axis.Numeric3D {
    /**
     
    */
        constructor(config: Ext.chart.axis.Time3DConfig);
    /**
    Returns the value of calculateByLabelSize. 
    */
        getCalculateByLabelSize():boolean;
    /**
    Returns the value of dateFormat. 
    */
        getDateFormat():string|boolean;
    /**
    Returns the value of fromDate. 
    */
        getFromDate():Date;
    /**
    Returns the value of step. 
    */
        getStep():any[];
    /**
    Returns the value of toDate. 
    */
        getToDate():Date;
    /**
    Sets the value of calculateByLabelSize. 
    */
        setCalculateByLabelSize(calculateByLabelSize: boolean):void;
    /**
    Sets the value of dateFormat. 
    */
        setDateFormat(dateFormat: string|boolean):void;
    /**
    Sets the value of fromDate. 
    */
        setFromDate(fromDate: Date):void;
    /**
    Sets the value of step. 
    */
        setStep(step: any[]):void;
    /**
    Sets the value of toDate. 
    */
        setToDate(toDate: Date):void;
    }
}
declare module Ext.chart.axis.layout {
    interface CombineDuplicateConfig extends Ext.chart.axis.layout.DiscreteConfig {
    }
    /**
    Discrete processor that combines duplicate data points.

    */
    export class CombineDuplicate extends Ext.chart.axis.layout.Discrete {
    /**
     
    */
        constructor(config: Ext.chart.axis.layout.CombineDuplicateConfig);
    }
    interface ContinuousConfig extends Ext.chart.axis.layout.LayoutConfig {
    }
    /**
    Processor for axis data that can be interpolated.

    */
    export class Continuous extends Ext.chart.axis.layout.Layout {
    /**
     
    */
        constructor(config: Ext.chart.axis.layout.ContinuousConfig);
    /**
    Returns the value of adjustMaximumByMajorUnit. 
    */
        getAdjustMaximumByMajorUnit():boolean;
    /**
    Returns the value of adjustMinimumByMajorUnit. 
    */
        getAdjustMinimumByMajorUnit():boolean;
    /**
    Sets the value of adjustMaximumByMajorUnit. 
    */
        setAdjustMaximumByMajorUnit(adjustMaximumByMajorUnit: boolean):void;
    /**
    Sets the value of adjustMinimumByMajorUnit. 
    */
        setAdjustMinimumByMajorUnit(adjustMinimumByMajorUnit: boolean):void;
    }
    interface DiscreteConfig extends Ext.chart.axis.layout.LayoutConfig {
    }
    /**
    Simple processor for data that cannot be interpolated.

    */
    export class Discrete extends Ext.chart.axis.layout.Layout {
    /**
     
    */
        constructor(config: Ext.chart.axis.layout.DiscreteConfig);
    }
    interface LayoutConfig {
    /**
    The axis that the Layout is bound.

    */
        axis?: Ext.chart.axis.Axis;
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    }
    /**
    Interface used by Axis to process its data into a meaningful layout.

    */
    export class Layout extends Ext.Base {
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
     
    */
        constructor(config: Ext.chart.axis.layout.LayoutConfig);
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Calculates the position of tick marks for the axis. 
    */
        calculateLayout(context: any):any;
    /**
    Calculates the position of major ticks for the axis. 
    */
        calculateMajorTicks(context: any):void;
    /**
    Calculates the position of sub ticks for the axis. 
    */
        calculateMinorTicks(context: any):void;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Returns the value of axis. 
    */
        getAxis():Ext.chart.axis.Axis;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Processes the data of the series bound to the axis. 
    */
        processData(series: Ext.chart.series.Series):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    Sets the value of axis. 
    */
        setAxis(axis: Ext.chart.axis.Axis):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Snaps the data bound to the axis to meaningful tick marks. 
    */
        snapEnds(context: any, min: number, max: number, estStepSize: number):void;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Trims the layout of the axis by the defined minimum and maximum. 
    */
        trimByRange(context: any, out: any, trimMin: number, trimMax: number):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    }
}
declare module Ext.chart.axis.segmenter {
    interface NamesConfig extends Ext.chart.axis.segmenter.SegmenterConfig {
    }
    /**
    Names data type. 
    */
    export class Names extends Ext.chart.axis.segmenter.Segmenter {
    /**
     
    */
        constructor(config: Ext.chart.axis.segmenter.NamesConfig);
    }
    interface NumericConfig extends Ext.chart.axis.segmenter.SegmenterConfig {
    }
    /**
    Numeric data type.

    */
    export class Numeric extends Ext.chart.axis.segmenter.Segmenter {
    /**
     
    */
        constructor(config: Ext.chart.axis.segmenter.NumericConfig);
    /**
    Wraps the provided estimated step size of a range without altering it into a step size object. 
    */
        exactStep(min: any, estStepSize: any):any;
    }
    interface SegmenterConfig {
    /**
    The axis that the Segmenter is bound.

    */
        axis?: Ext.chart.axis.Axis;
    }
    /**
    Interface for a segmenter in an Axis. 
    */
    export class Segmenter extends Ext.Base {
    /**
     
    */
        constructor(config: Ext.chart.axis.segmenter.SegmenterConfig);
    /**
    Add step units to the value. 
    */
        add(value: any, step: number, unit: any):void;
    /**
    Align value with step of units. 
    */
        align(value: any, step: number, unit: any):any;
    /**
    Returns the difference between the min and max value based on the given unit scale. 
    */
        diff(min: any, max: any, unit: any):number;
    /**
    Convert from any data into the target type. 
    */
        from(value: any):any;
    /**
    Returns the value of axis. 
    */
        getAxis():Ext.chart.axis.Axis;
    /**
    Given a start point and estimated step size of a range, determine the preferred step size. 
    */
        preferredStep(start: any, estStepSize: any):any;
    /**
    This method formats the value. 
    */
        renderer(value: any, context: any):string;
    /**
    Sets the value of axis. 
    */
        setAxis(axis: Ext.chart.axis.Axis):void;
    }
    interface TimeConfig extends Ext.chart.axis.segmenter.SegmenterConfig {
    /**
    If specified, the will override the result of preferredStep.

    */
        step?: any;
    }
    /**
    Time data type.

    */
    export class Time extends Ext.chart.axis.segmenter.Segmenter {
    /**
     
    */
        constructor(config: Ext.chart.axis.segmenter.TimeConfig);
    /**
    Returns the value of step. 
    */
        getStep():any;
    /**
    Sets the value of step. 
    */
        setStep(step: any):void;
    }
}
declare module Ext.chart.axis.sprite {
    interface AxisConfig extends Ext.draw.sprite.SpriteConfig {
    /**
    The axis represented by this sprite.

    */
        axis?: Ext.chart.axis.Axis;
    /**
    'true' if the main line of the axis is drawn. 
    */
        axisLine?: boolean;
    /**
    The starting rotation of the angular axis. 
    */
        baseRotation?: number;
    /**
    The central point of the angular axis on the x-axis. 
    */
        centerX?: number;
    /**
    The central point of the angular axis on the y-axis. 
    */
        centerY?: number;
    /**
    The maximum value of the axis data. 
    */
        dataMax?: number;
    /**
    The minimum value of the axis data. 
    */
        dataMin?: number;
    /**
    'true' if the estimated step size is adjusted by text size. 
    */
        enlargeEstStepSizeByText?: boolean;
    /**
    'true' if the axis has a grid. 
    */
        grid?: boolean;
    /**
    The label configuration object for the Axis. 
    */
        label?: any;
    /**
    The layout configuration used by the axis.

    */
        layout?: any;
    /**
    The total length of the axis. 
    */
        length?: number;
    /**
    The length of the major ticks. 
    */
        majorTickSize?: number;
    /**
    'true' if the axis has major ticks. 
    */
        majorTicks?: boolean;
    /**
    The maximum value of the axis. 
    */
        max?: number;
    /**
    The minimum value of the axis. 
    */
        min?: number;
    /**
    The minimum step size between ticks. 
    */
        minStepSize?: number;
    /**
    The length of the minor ticks. 
    */
        minorTickSize?: number;
    /**
    'true' if the axis has sub ticks.

    */
        minorTricks?: boolean;
    /**
    The position of the axis on the chart. 
    */
        position?: string;
    /**
    Allows direct customisation of rendered axis sprites.

    */
        renderer?: Function;
    /**
    The method of segmenter used by the axis.

    */
        segmenter?: any;
    /**
    The padding around axis labels to determine collision. 
    */
        textPadding?: number;
    /**
    The maximum value that is displayed. 
    */
        visibleMax?: number;
    /**
    The minimum value that is displayed. 
    */
        visibleMin?: number;
    }
    /**
    The axis sprite. 
    */
    export class Axis extends Ext.draw.sprite.Sprite {
    /**
     
    */
        constructor();
    /**
     
    */
        bindMarker(name: string, marker: Ext.chart.Markers):void;
    /**
    Returns the value of axis. 
    */
        getAxis():Ext.chart.axis.Axis;
    /**
    Returns the value of label. 
    */
        getLabel():any;
    /**
    Returns the value of layout. 
    */
        getLayout():any;
    /**
    Returns the value of renderer. 
    */
        getRenderer():Function;
    /**
    Returns the value of segmenter. 
    */
        getSegmenter():any;
    /**
    Sets the value of axis. 
    */
        setAxis(axis: Ext.chart.axis.Axis):void;
    /**
    Sets the value of label. 
    */
        setLabel(label: any):void;
    /**
    Sets the value of layout. 
    */
        setLayout(layout: any):void;
    /**
    Sets the value of renderer. 
    */
        setRenderer(renderer: Function):void;
    /**
    Sets the value of segmenter. 
    */
        setSegmenter(segmenter: any):void;
    }
    interface Axis3DConfig extends Ext.chart.axis.sprite.AxisConfig {
    }
    /**
    The 3D axis sprite. 
    */
    export class Axis3D extends Ext.chart.axis.sprite.Axis {
    /**
     
    */
        constructor();
    /**
    Returns the value of fx. 
    */
        getFx():any;
    /**
    Sets the value of fx. 
    */
        setFx(fx: any):void;
    }
}
declare module Ext.chart.grid {
    interface CircularGridConfig extends Ext.draw.sprite.CircleConfig {
    }
    /**
    Circular Grid sprite. 
    */
    export class CircularGrid extends Ext.draw.sprite.Circle {
    /**
     
    */
        constructor(config: Ext.chart.grid.CircularGridConfig);
    }
    interface HorizontalGridConfig extends Ext.draw.sprite.SpriteConfig {
    }
    /**
    Horizontal Grid sprite. 
    */
    export class HorizontalGrid extends Ext.draw.sprite.Sprite {
    /**
     
    */
        constructor(config: Ext.chart.grid.HorizontalGridConfig);
    }
    interface HorizontalGrid3DConfig extends Ext.chart.grid.HorizontalGridConfig {
    }
    /**
    Horizontal 3D Grid sprite. 
    */
    export class HorizontalGrid3D extends Ext.chart.grid.HorizontalGrid {
    /**
     
    */
        constructor(config: Ext.chart.grid.HorizontalGrid3DConfig);
    }
    interface RadialGridConfig extends Ext.draw.sprite.PathConfig {
    }
    /**
    Radial Grid sprite. 
    */
    export class RadialGrid extends Ext.draw.sprite.Path {
    /**
     
    */
        constructor(config: Ext.chart.grid.RadialGridConfig);
    }
    interface VerticalGridConfig extends Ext.draw.sprite.SpriteConfig {
    }
    /**
    Vertical Grid sprite. 
    */
    export class VerticalGrid extends Ext.draw.sprite.Sprite {
    /**
     
    */
        constructor(config: Ext.chart.grid.VerticalGridConfig);
    }
    interface VerticalGrid3DConfig extends Ext.chart.grid.VerticalGridConfig {
    }
    /**
    Vertical 3D Grid sprite. 
    */
    export class VerticalGrid3D extends Ext.chart.grid.VerticalGrid {
    /**
     
    */
        constructor(config: Ext.chart.grid.VerticalGrid3DConfig);
    }
}
declare module Ext.chart.interactions {
    interface AbstractConfig {
    /**
    The chart that the interaction is bound.

    */
        chart?: Ext.chart.AbstractChart;
    /**
    'true' if the interaction is enabled. 
    */
        enabled?: boolean;
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    }
    /**
    Defines a common abstract parent class for all interactions.

    */
    export class Abstract extends Ext.Base {
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
    Android device is emerging too many events so if we re-render every frame it will take forever to finish a frame. 
    */
        throttleGap: number;
    /**
     
    */
        constructor(config: Ext.chart.interactions.AbstractConfig);
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Returns the value of chart. 
    */
        getChart():Ext.chart.AbstractChart;
    /**
    Returns the value of enabled. 
    */
        getEnabled():boolean;
    /**
    Find and return a single series item corresponding to the given event,
or null if no matching item is found. 
    */
        getItemForEvent(e: Event):any;
    /**
    Find and return all series items corresponding to the given event. 
    */
        getItemsForEvent(e: Event):any[];
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    A method to be implemented by subclasses where all event attachment should occur. 
    */
        initialize():void;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Placeholder method. 
    */
        onGesture():void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    Sets the value of chart. 
    */
        setChart(chart: Ext.chart.AbstractChart):void;
    /**
    Sets the value of enabled. 
    */
        setEnabled(enabled: boolean):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    }
    interface CrossZoomConfig extends Ext.chart.interactions.AbstractConfig {
    /**
    Specifies which axes should be made navigable. 
    */
        axes?: any;
    /**
    Defines the gestures that should trigger the cross zoom interaction to be
displayed. 
    */
        gestures?: any;
    }
    /**
    The CrossZoom interaction allows the user to zoom in on a selected area of the chart. 
    */
    export class CrossZoom extends Ext.chart.interactions.Abstract {
    /**
     
    */
        constructor();
    /**
    Returns the value of axes. 
    */
        getAxes():any;
    /**
    Returns the value of gestures. 
    */
        getGestures():any;
    /**
    Returns the value of undoButton. 
    */
        getUndoButton():any;
    /**
    Sets the value of axes. 
    */
        setAxes(axes: any):void;
    /**
    Sets the value of gestures. 
    */
        setGestures(gestures: any):void;
    /**
    Sets the value of undoButton. 
    */
        setUndoButton(undoButton: any):void;
    }
    interface CrosshairConfig extends Ext.chart.interactions.AbstractConfig {
    /**
    Specifies label text and label rect configs on per axis basis or as a single config for all axes. 
    */
        axes?: any;
    /**
    Specifies which gesture should be used for starting/maintaining/ending the interaction. 
    */
        gesture?: string;
    /**
    Specifies attributes of horizontal and vertical lines that make up the crosshair. 
    */
        lines?: any;
    }
    /**
    The Crosshair interaction allows the user to get precise values for a specific point on the chart. 
    */
    export class Crosshair extends Ext.chart.interactions.Abstract {
    /**
     
    */
        constructor(config: Ext.chart.interactions.CrosshairConfig);
    /**
    Returns the value of axes. 
    */
        getAxes():any;
    /**
    Returns the value of gesture. 
    */
        getGesture():string;
    /**
    Returns the value of lines. 
    */
        getLines():any;
    /**
    Sets the value of axes. 
    */
        setAxes(axes: any):void;
    /**
    Sets the value of gesture. 
    */
        setGesture(gesture: string):void;
    /**
    Sets the value of lines. 
    */
        setLines(lines: any):void;
    }
    interface ItemHighlightConfig extends Ext.chart.interactions.AbstractConfig {
    /**
    Defines the gestures that should trigger the item highlight interaction. 
    */
        gestures?: any;
    }
    /**
    The ItemHighlight interaction allows the user to highlight series items in the chart.

    */
    export class ItemHighlight extends Ext.chart.interactions.Abstract {
    /**
     
    */
        constructor(config: Ext.chart.interactions.ItemHighlightConfig);
    /**
    Returns the value of gestures. 
    */
        getGestures():any;
    /**
    Sets the value of gestures. 
    */
        setGestures(gestures: any):void;
    }
    interface ItemInfoConfig extends Ext.chart.interactions.AbstractConfig {
    /**
    Defines the gestures that should trigger the item info panel to be displayed in ExtJS. 
    */
        extjsGestures?: any;
    /**
    Defines the gestures that should trigger the item info panel to be displayed. 
    */
        gestures?: any;
    /**
    An optional set of configuration overrides for the Ext.Panel that gets
displayed. 
    */
        panel?: any;
    }
    /**
    The ItemInfo interaction allows displaying detailed information about a series data
point in a popup panel. 
    */
    export class ItemInfo extends Ext.chart.interactions.Abstract {
    /**
     
    */
        constructor(config: Ext.chart.interactions.ItemInfoConfig);
    /**
    Returns the value of extjsGestures. 
    */
        getExtjsGestures():any;
    /**
    Returns the value of gestures. 
    */
        getGestures():any;
    /**
    Returns the value of panel. 
    */
        getPanel():any;
    /**
    Sets the value of extjsGestures. 
    */
        setExtjsGestures(extjsGestures: any):void;
    /**
    Sets the value of gestures. 
    */
        setGestures(gestures: any):void;
    /**
    Sets the value of panel. 
    */
        setPanel(panel: any):void;
    }
    interface PanZoomConfig extends Ext.chart.interactions.AbstractConfig {
    /**
    Specifies which axes should be made navigable. 
    */
        axes?: any;
    /**
    A set of optional overrides for the overflow arrow sprites' options. 
    */
        overflowArrowOptions?: any;
    /**
    If true, arrows will be conditionally shown at either end of each axis to indicate that the
axis is overflowing and c
    */
        showOverflowArrows?: boolean;
    /**
    If true, the pan gesture will zoom the chart. 
    */
        zoomOnPanGesture?: boolean;
    }
    /**
    The PanZoom interaction allows the user to navigate the data for one or more chart
axes by panning and/or zooming. 
    */
    export class PanZoom extends Ext.chart.interactions.Abstract {
    /**
     
    */
        constructor(config: Ext.chart.interactions.PanZoomConfig);
    /**
    Returns the value of axes. 
    */
        getAxes():any;
    /**
    Returns the value of hideLabelInGesture. 
    */
        getHideLabelInGesture():boolean;
    /**
    Returns the value of maxZoom. 
    */
        getMaxZoom():any;
    /**
    Returns the value of minZoom. 
    */
        getMinZoom():any;
    /**
    Returns the value of modeToggleButton. 
    */
        getModeToggleButton():any;
    /**
    Returns the value of showOverflowArrows. 
    */
        getShowOverflowArrows():boolean;
    /**
    Returns the value of zoomOnPanGesture. 
    */
        getZoomOnPanGesture():boolean;
    /**
    Sets the value of axes. 
    */
        setAxes(axes: any):void;
    /**
    Sets the value of hideLabelInGesture. 
    */
        setHideLabelInGesture(hideLabelInGesture: boolean):void;
    /**
    Sets the value of maxZoom. 
    */
        setMaxZoom(maxZoom: any):void;
    /**
    Sets the value of minZoom. 
    */
        setMinZoom(minZoom: any):void;
    /**
    Sets the value of modeToggleButton. 
    */
        setModeToggleButton(modeToggleButton: any):void;
    /**
    Sets the value of showOverflowArrows. 
    */
        setShowOverflowArrows(showOverflowArrows: boolean):void;
    /**
    Sets the value of zoomOnPanGesture. 
    */
        setZoomOnPanGesture(zoomOnPanGesture: boolean):void;
    }
    interface RotateConfig extends Ext.chart.interactions.AbstractConfig {
    /**
    Defines the gestures that should trigger the rotate interaction. 
    */
        gestures?: any;
    }
    /**
    The Rotate interaction allows the user to rotate a polar chart about its central point. 
    */
    export class Rotate extends Ext.chart.interactions.Abstract {
    /**
     
    */
        constructor(config: Ext.chart.interactions.RotateConfig);
    /**
    Returns the value of gestures. 
    */
        getGestures():any;
    /**
    Rotates a polar chart about its center point to the specified angle. 
    */
        rotateTo(angle: number, relative?: boolean, animate?: boolean):void;
    /**
    Sets the value of gestures. 
    */
        setGestures(gestures: any):void;
    }
    interface RotatePie3DConfig extends Ext.chart.interactions.RotateConfig {
    }
    /**
    A special version of the Rotate interaction used by Pie3D Chart.

    */
    export class RotatePie3D extends Ext.chart.interactions.Rotate {
    /**
     
    */
        constructor(config: Ext.chart.interactions.RotatePie3DConfig);
    }
}
declare module Ext.chart.label {
    interface CalloutConfig extends Ext.draw.modifier.ModifierConfig {
    }
    /**
    This is a modifier to place labels and callouts by additional attributes.

    */
    export class Callout extends Ext.draw.modifier.Modifier {
    /**
     
    */
        constructor(config: Ext.chart.label.CalloutConfig);
    }
    interface LabelConfig extends Ext.draw.sprite.TextConfig {
    /**
    True to draw a line between the label and the chart with the default settings,
or an Object that defines the 'color',
    */
        calloutLine?: any;
    /**
    Animation configuration. 
    */
        fx?: any;
    }
    /**
    Sprite used to represent labels in series. 
    */
    export class Label extends Ext.draw.sprite.Text {
    /**
     
    */
        constructor(config: Ext.chart.label.LabelConfig);
    /**
    Returns the value of calloutLine. 
    */
        getCalloutLine():any;
    /**
    Returns the value of field. 
    */
        getField():any;
    /**
    Returns the value of fx. 
    */
        getFx():any;
    /**
    Sets the value of calloutLine. 
    */
        setCalloutLine(calloutLine: any):void;
    /**
    Sets the value of field. 
    */
        setField(field: any):void;
    /**
    Sets the value of fx. 
    */
        setFx(fx: any):void;
    }
}
declare module Ext.chart.plugin {
    interface ItemEventsConfig extends Ext.plugin.AbstractConfig {
    /**
    If itemmousemove, itemmouseover or itemmouseout event listeners are attached
to the chart, the plugin will detect tho
    */
        moveEvents?: boolean;
    }
    /**
    A chart plugin that adds ability to listen to chart series
items events. 
    */
    export class ItemEvents extends Ext.plugin.Abstract {
    /**
    Instantiates the plugin. 
    */
        constructor(config?: Ext.chart.plugin.ItemEventsConfig);
    }
}
declare module Ext.chart.series {
    interface AreaConfig extends Ext.chart.series.StackedCartesianConfig {
    }
    /**
    Creates an Area Chart. 
    */
    export class Area extends Ext.chart.series.StackedCartesian {
    /**
     
    */
        constructor();
    }
    interface BarConfig extends Ext.chart.series.StackedCartesianConfig {
    }
    /**
    Creates a Bar or Column Chart (depending on the value of the
flipXY config). 
    */
    export class Bar extends Ext.chart.series.StackedCartesian {
    /**
     
    */
        constructor();
    }
    interface Bar3DConfig extends Ext.chart.series.BarConfig {
    }
    /**
    Creates a 3D Bar or 3D Column Chart (depending on the value of the
flipXY config). 
    */
    export class Bar3D extends Ext.chart.series.Bar {
    /**
     
    */
        constructor();
    }
    interface CandleStickConfig extends Ext.chart.series.CartesianConfig {
    /**
    The store record field name that represents the closing value of the given period.

    */
        closeField?: string;
    /**
    The store record field name that represents the highest value of the time interval represented.

    */
        highField?: string;
    /**
    The store record field name that represents the lowest value of the time interval represented.

    */
        lowField?: string;
    /**
    The store record field name that represents the opening value of the given period.

    */
        openField?: string;
    }
    /**
    Creates a candlestick or OHLC Chart. 
    */
    export class CandleStick extends Ext.chart.series.Cartesian {
    /**
     
    */
        constructor();
    /**
    Returns the value of closeField. 
    */
        getCloseField():string;
    /**
    Returns the value of highField. 
    */
        getHighField():string;
    /**
    Returns the value of lowField. 
    */
        getLowField():string;
    /**
    Returns the value of openField. 
    */
        getOpenField():string;
    /**
    Sets the value of closeField. 
    */
        setCloseField(closeField: string):void;
    /**
    Sets the value of highField. 
    */
        setHighField(highField: string):void;
    /**
    Sets the value of lowField. 
    */
        setLowField(lowField: string):void;
    /**
    Sets the value of openField. 
    */
        setOpenField(openField: string):void;
    }
    interface CartesianConfig extends Ext.chart.series.SeriesConfig {
    /**
    xAxis The chart axis the series is bound to in the 'X' direction. 
    */
        xAxis?: Ext.chart.axis.Axis|number|string;
    /**
    The field used to access the x axis value from the items from the data source.

    */
        xField?: string;
    /**
    yAxis The chart axis the series is bound to in the 'Y' direction. 
    */
        yAxis?: Ext.chart.axis.Axis|number|string;
    /**
    The field(s) used to access the y-axis value(s) of the items from the data source.

    */
        yField?: string|string[];
    }
    /**
    Common base class for series implementations that plot values using cartesian coordinates.

    */
    export class Cartesian extends Ext.chart.series.Series {
    /**
     
    */
        constructor();
    /**
    Returns the value of xAxis. 
    */
        getXAxis():Ext.chart.axis.Axis|number|string;
    /**
    Returns the value of xField. 
    */
        getXField():string;
    /**
    Returns the value of yAxis. 
    */
        getYAxis():Ext.chart.axis.Axis|number|string;
    /**
    Returns the value of yField. 
    */
        getYField():string|string[];
    /**
    Sets the value of xAxis. 
    */
        setXAxis(xAxis: Ext.chart.axis.Axis|number|string):void;
    /**
    Sets the value of xField. 
    */
        setXField(xField: string):void;
    /**
    Sets the value of yAxis. 
    */
        setYAxis(yAxis: Ext.chart.axis.Axis|number|string):void;
    /**
    Sets the value of yField. 
    */
        setYField(yField: string|string[]):void;
    }
    interface GaugeConfig extends Ext.chart.series.SeriesConfig {
    /**
     
    */
        angleField?: string;
    /**
    Percentage of the radius of the donut hole compared to the entire disk. 
    */
        donut?: number;
    /**
    The store record field name to be used for the gauge value. 
    */
        field?: string;
    /**
    The maximum value of the gauge. 
    */
        maximum?: number;
    /**
    The minimum value of the gauge. 
    */
        minimum?: number;
    /**
    If true, display the gauge as a needle, otherwise as a sector. 
    */
        needle?: boolean;
    /**
    Percentage of the length of needle compared to the radius of the entire disk. 
    */
        needleLength?: number;
    /**
     
    */
        needleLengthRatio?: number;
    /**
    Width of the needle in pixels. 
    */
        needleWidth?: number;
    /**
    Allows to paint sectors of different colors in the background of the gauge,
with optional labels. 
    */
        sectors?: any[];
    /**
    The size of the sector that the series will occupy.

    */
        totalAngle?: number;
    /**
    Directly sets the displayed value of the gauge. 
    */
        value?: number;
    /**
    Indicates whether to show the whole disk or only the marked part. 
    */
        wholeDisk?: boolean;
    }
    /**
    Creates a Gauge Chart. 
    */
    export class Gauge extends Ext.chart.series.Series {
    /**
     
    */
        constructor(config: Ext.chart.series.GaugeConfig);
    /**
    Returns the value of angleField. 
    */
        getAngleField():string;
    /**
    Returns the value of center. 
    */
        getCenter():any[];
    /**
    Returns the value of donut. 
    */
        getDonut():number;
    /**
    Returns the value of field. 
    */
        getField():string;
    /**
    Returns the value of maximum. 
    */
        getMaximum():number;
    /**
    Returns the value of minimum. 
    */
        getMinimum():number;
    /**
    Returns the value of needle. 
    */
        getNeedle():boolean;
    /**
    Returns the value of needleLength. 
    */
        getNeedleLength():number;
    /**
    Returns the value of needleLengthRatio. 
    */
        getNeedleLengthRatio():number;
    /**
    Returns the value of needleWidth. 
    */
        getNeedleWidth():number;
    /**
    Returns the value of radius. 
    */
        getRadius():number;
    /**
    Returns the value of rect. 
    */
        getRect():any[];
    /**
    Returns the value of rotation. 
    */
        getRotation():number;
    /**
    Returns the value of sectors. 
    */
        getSectors():any[];
    /**
    Returns the value of totalAngle. 
    */
        getTotalAngle():number;
    /**
    Returns the value of value. 
    */
        getValue():number;
    /**
    Returns the value of wholeDisk. 
    */
        getWholeDisk():boolean;
    /**
    Sets the value of angleField. 
    */
        setAngleField(angleField: string):void;
    /**
    Sets the value of center. 
    */
        setCenter(center: any[]):void;
    /**
    Sets the value of donut. 
    */
        setDonut(donut: number):void;
    /**
    Sets the value of field. 
    */
        setField(field: string):void;
    /**
    Sets the value of maximum. 
    */
        setMaximum(maximum: number):void;
    /**
    Sets the value of minimum. 
    */
        setMinimum(minimum: number):void;
    /**
    Sets the value of needle. 
    */
        setNeedle(needle: boolean):void;
    /**
    Sets the value of needleLength. 
    */
        setNeedleLength(needleLength: number):void;
    /**
    Sets the value of needleLengthRatio. 
    */
        setNeedleLengthRatio(needleLengthRatio: number):void;
    /**
    Sets the value of needleWidth. 
    */
        setNeedleWidth(needleWidth: number):void;
    /**
    Sets the value of radius. 
    */
        setRadius(radius: number):void;
    /**
    Sets the value of rect. 
    */
        setRect(rect: any[]):void;
    /**
    Sets the value of rotation. 
    */
        setRotation(rotation: number):void;
    /**
    Sets the value of sectors. 
    */
        setSectors(sectors: any[]):void;
    /**
    Sets the value of totalAngle. 
    */
        setTotalAngle(totalAngle: number):void;
    /**
    Sets the value of value. 
    */
        setValue(value: number):void;
    /**
    Sets the value of wholeDisk. 
    */
        setWholeDisk(wholeDisk: boolean):void;
    }
    interface LineConfig extends Ext.chart.series.CartesianConfig {
    /**
    If set to true, the area underneath the line is filled with the color defined as follows, listed by priority:
- The c
    */
        fill?: boolean;
    /**
    The offset distance from the cursor position to the line series to trigger events (then used for highlighting series,
    */
        selectionTolerance?: number;
    /**
    If set to true or a non-zero number, the line will be smoothed/rounded around its points; otherwise
straight line seg
    */
        smooth?: boolean|number;
    /**
    If set to true, the line uses steps instead of straight lines to connect the dots. 
    */
        step?: boolean;
    }
    /**
    Creates a Line Chart. 
    */
    export class Line extends Ext.chart.series.Cartesian {
    /**
     
    */
        constructor();
    /**
    Returns the value of aggregator. 
    */
        getAggregator():any;
    /**
    Returns the value of fill. 
    */
        getFill():boolean;
    /**
    Returns the value of selectionTolerance. 
    */
        getSelectionTolerance():number;
    /**
    Returns the value of smooth. 
    */
        getSmooth():boolean|number;
    /**
    Returns the value of step. 
    */
        getStep():boolean;
    /**
    Sets the value of aggregator. 
    */
        setAggregator(aggregator: any):void;
    /**
    Sets the value of fill. 
    */
        setFill(fill: boolean):void;
    /**
    Sets the value of selectionTolerance. 
    */
        setSelectionTolerance(selectionTolerance: number):void;
    /**
    Sets the value of smooth. 
    */
        setSmooth(smooth: boolean|number):void;
    /**
    Sets the value of step. 
    */
        setStep(step: boolean):void;
    }
    interface PieConfig extends Ext.chart.series.PolarConfig {
    /**
    Whether the pie slices are displayed clockwise. 
    */
        clockwise?: boolean;
    /**
    Specifies the radius of the donut hole, as a percentage of the chart's radius. 
    */
        donut?: number;
    /**
     
    */
        field?: string;
    /**
    Allows adjustment of the radius by a
specific percentage. 
    */
        radiusFactor?: number;
    /**
    The total angle of the pie series. 
    */
        totalAngle?: number;
    }
    /**
    Creates a Pie Chart. 
    */
    export class Pie extends Ext.chart.series.Polar {
    /**
     
    */
        constructor(config: Ext.chart.series.PieConfig);
    /**
    Returns the value of clockwise. 
    */
        getClockwise():boolean;
    /**
    Returns the value of donut. 
    */
        getDonut():number;
    /**
    Returns the pie slice for a given angle 
    */
        getItemForAngle(angle: number):any;
    /**
    Returns the value of lengthField. 
    */
        getLengthField():string;
    /**
    Returns the value of radiusFactor. 
    */
        getRadiusFactor():number;
    /**
    Returns the value of totalAngle. 
    */
        getTotalAngle():number;
    /**
    Sets the value of clockwise. 
    */
        setClockwise(clockwise: boolean):void;
    /**
    Sets the value of donut. 
    */
        setDonut(donut: number):void;
    /**
    Sets the value of lengthField. 
    */
        setLengthField(lengthField: string):void;
    /**
    Sets the value of radiusFactor. 
    */
        setRadiusFactor(radiusFactor: number):void;
    /**
    Sets the value of totalAngle. 
    */
        setTotalAngle(totalAngle: number):void;
    }
    interface Pie3DConfig extends Ext.chart.series.PolarConfig {
    /**
    Whether to set the pie chart as donut chart. 
    */
        donut?: boolean|number;
    /**
     
    */
        field?: string;
    }
    /**
    Creates a 3D Pie Chart. 
    */
    export class Pie3D extends Ext.chart.series.Polar {
    /**
     
    */
        constructor(config: Ext.chart.series.Pie3DConfig);
    /**
    Returns the value of distortion. 
    */
        getDistortion():number;
    /**
    Returns the value of donut. 
    */
        getDonut():boolean|number;
    /**
    Returns the value of rect. 
    */
        getRect():any[];
    /**
    Returns the value of thickness. 
    */
        getThickness():number;
    /**
    Sets the value of distortion. 
    */
        setDistortion(distortion: number):void;
    /**
    Sets the value of donut. 
    */
        setDonut(donut: boolean|number):void;
    /**
    Sets the value of rect. 
    */
        setRect(rect: any[]):void;
    /**
    Sets the value of thickness. 
    */
        setThickness(thickness: number):void;
    }
    interface PolarConfig extends Ext.chart.series.SeriesConfig {
    /**
    Alias for xField. 
    */
        angleField?: string;
    /**
    for the polar series. 
    */
        center?: any[];
    /**
    Alias for yField. 
    */
        lengthField?: string;
    /**
    The x-offset of center of the polar series related to the center of the boundary. 
    */
        offsetX?: number;
    /**
    The y-offset of center of the polar series related to the center of the boundary. 
    */
        offsetY?: number;
    /**
    The radius of the polar series. 
    */
        radius?: number;
    /**
    The angle in degrees at which the first polar series item should start. 
    */
        rotation?: number;
    /**
    The store record field name for the labels used in the radar series.

    */
        xField?: string;
    /**
    The store record field name for the deflection of the graph in the radar series,
or the length of the slices in the p
    */
        yField?: string;
    }
    /**
    Common base class for series implementations that plot values using polar coordinates.

    */
    export class Polar extends Ext.chart.series.Series {
    /**
     
    */
        constructor(config: Ext.chart.series.PolarConfig);
    /**
    Returns the value of center. 
    */
        getCenter():any[];
    /**
    Returns the value of offsetX. 
    */
        getOffsetX():number;
    /**
    Returns the value of offsetY. 
    */
        getOffsetY():number;
    /**
    Returns the value of radius. 
    */
        getRadius():number;
    /**
    Returns the value of rotation. 
    */
        getRotation():number;
    /**
    Returns the value of xAxis. 
    */
        getXAxis():any;
    /**
    Returns the value of xField. 
    */
        getXField():string;
    /**
    Returns the value of yAxis. 
    */
        getYAxis():any;
    /**
    Returns the value of yField. 
    */
        getYField():string;
    /**
    Sets the value of center. 
    */
        setCenter(center: any[]):void;
    /**
    Sets the value of offsetX. 
    */
        setOffsetX(offsetX: number):void;
    /**
    Sets the value of offsetY. 
    */
        setOffsetY(offsetY: number):void;
    /**
    Sets the value of radius. 
    */
        setRadius(radius: number):void;
    /**
    Sets the value of rotation. 
    */
        setRotation(rotation: number):void;
    /**
    Sets the value of xAxis. 
    */
        setXAxis(xAxis: any):void;
    /**
    Sets the value of xField. 
    */
        setXField(xField: string):void;
    /**
    Sets the value of yAxis. 
    */
        setYAxis(yAxis: any):void;
    /**
    Sets the value of yField. 
    */
        setYField(yField: string):void;
    }
    interface RadarConfig extends Ext.chart.series.PolarConfig {
    }
    /**
    Creates a Radar Chart. 
    */
    export class Radar extends Ext.chart.series.Polar {
    /**
     
    */
        constructor(config: Ext.chart.series.RadarConfig);
    }
    interface ScatterConfig extends Ext.chart.series.CartesianConfig {
    }
    /**
    Creates a Scatter Chart. 
    */
    export class Scatter extends Ext.chart.series.Cartesian {
    /**
     
    */
        constructor();
    }
    interface SeriesConfig {
    /**
    The series animation configuration.

    */
        animation?: any;
    /**
    Sets the background of the surface the series is attached.

    */
        background?: any;
    /**
    Setting this config option adds or removes data bindings for other configs. 
    */
        bind?: any;
    /**
    An array of color values which is used, in order of appearance, by the series. 
    */
        colors?: any[];
    /**
    A string alias, a configuration object or an instance of a ViewController for
this container. 
    */
        controller?: any;
    /**
    If true, this component will be the default scope (this pointer) for events
specified with string names so that the s
    */
        defaultListenerScope?: boolean;
    /**
     
    */
        hidden?: boolean|any[];
    /**
    The sprite attributes that will be applied to the highlighted items in the series. 
    */
        highlight?: any;
    /**
    The default style for the highlighted item. 
    */
        highlightCfg?: any;
    /**
    The item currently highlighted in the series.

    */
        highlightItem?: any;
    /**
    The sprite template used to create sprite instances in the series.

    */
        itemInstancing?: any;
    /**
    Object with the following properties: 
    */
        label?: any;
    /**
     
    */
        labelField?: string|string[];
    /**
    Extra distance value for which the labelOverflow listener is triggered.

    */
        labelOverflowPadding?: number;
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    /**
    The sprite template used by marker instances on the series. 
    */
        marker?: any;
    /**
    This is cyclic used if series have multiple marker sprites.

    */
        markerSubStyle?: any;
    /**
    The surface that series markers are attached.

    */
        overlaySurface?: any;
    /**
    One or more names of config properties that this component should publish
to its ViewModel. 
    */
        publishes?: any;
    /**
    Specifies a name for this component inside its component hierarchy. 
    */
        reference?: string;
    /**
    A function that can be provided to set custom styling properties to each rendered element. 
    */
        renderer?: Function;
    /**
    If provided this creates a new Session instance for this component. 
    */
        session?: any;
    /**
    Whether to show this series in the legend. 
    */
        showInLegend?: boolean;
    /**
    Whether markers should be displayed at the data points along the line. 
    */
        showMarkers?: boolean;
    /**
    The store of values used in the series.

    */
        store?: any;
    /**
    Custom style configuration for the sprite used in the series. 
    */
        style?: any;
    /**
    This is the cyclic used if the series has multiple sprites. 
    */
        subStyle?: any;
    /**
    The surface that the series is attached.

    */
        surface?: any;
    /**
    The human-readable name of the series (displayed in the legend).

    */
        title?: string|string[];
    /**
    Add tooltips to the visualization's markers. 
    */
        tooltip?: any;
    /**
    This object holds a map of config properties that will update their binding
as they are modified. 
    */
        twoWayBindable?: any;
    /**
    Colors for the series can be set directly through the 'colors' config, or indirectly
with the current theme or the 'c
    */
        useDarkerStrokeColor?: boolean|number;
    /**
    The ViewModel is a data provider for this component and its children. 
    */
        viewModel?: any;
    }
    /**
    Series is the abstract class containing the common logic to all chart series. 
    */
    export class Series extends Ext.Base {
    /**
    This property is used to determine the property of a bind config that is just
the value. 
    */
        defaultBindProperty: string;
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
    Default series sprite type. 
    */
        seriesType: string;
    /**
    The type of series. 
    */
        type: string;
    /**
     
    */
        constructor(config: Ext.chart.series.SeriesConfig);
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Returns the value of animation. 
    */
        getAnimation():any;
    /**
    Returns the value of background. 
    */
        getBackground():any;
    /**
    Returns the value of bind. 
    */
        getBind():any;
    /**
    Returns the value of colors. 
    */
        getColors():any[];
    /**
    Returns the Ext.app.ViewController instance associated with this
component via the controller config or setController
    */
        getController():Ext.app.ViewController;
    /**
    Returns the value of defaultListenerScope. 
    */
        getDefaultListenerScope():boolean;
    /**
    Returns the value of hidden. 
    */
        getHidden():boolean|any[];
    /**
    Returns the value of highlight. 
    */
        getHighlight():any;
    /**
    Returns the value of highlightCfg. 
    */
        getHighlightCfg():any;
    /**
    Returns the value of highlightItem. 
    */
        getHighlightItem():any;
    /**
    For a given x/y point relative to the main rect, find a corresponding item from this
series, if any. 
    */
        getItemForPoint(x: number, y: number, target?: any):any;
    /**
    Returns the value of itemInstancing. 
    */
        getItemInstancing():any;
    /**
    Returns the value of label. 
    */
        getLabel():any;
    /**
    Returns the value of labelField. 
    */
        getLabelField():string|string[];
    /**
    Returns the value of labelOverflowPadding. 
    */
        getLabelOverflowPadding():number;
    /**
    Returns the value of marker. 
    */
        getMarker():any;
    /**
    Returns the value of markerSubStyle. 
    */
        getMarkerSubStyle():any;
    /**
    Returns the value of overlaySurface. 
    */
        getOverlaySurface():any;
    /**
    Returns the value of publishes. 
    */
        getPublishes():any;
    /**
    Returns the value of reference. 
    */
        getReference():string;
    /**
    Returns the value of renderer. 
    */
        getRenderer():Function;
    /**
    Returns the value of session. 
    */
        getSession():any;
    /**
    Returns the value of showInLegend. 
    */
        getShowInLegend():boolean;
    /**
    Returns the value of showMarkers. 
    */
        getShowMarkers():boolean;
    /**
    Returns sprites the are used to draw this series. 
    */
        getSprites():void;
    /**
    Returns the value of style. 
    */
        getStyle():any;
    /**
    Returns the value of subStyle. 
    */
        getSubStyle():any;
    /**
    Returns the value of surface. 
    */
        getSurface():any;
    /**
    Returns the value of title. 
    */
        getTitle():string|string[];
    /**
    Returns the value of tooltip. 
    */
        getTooltip():any;
    /**
    Returns the value of triggerAfterDraw. 
    */
        getTriggerAfterDraw():boolean;
    /**
    Returns the value of twoWayBindable. 
    */
        getTwoWayBindable():any;
    /**
    Returns the value of useDarkerStrokeColor. 
    */
        getUseDarkerStrokeColor():boolean|number;
    /**
    Returns the value of viewModel. 
    */
        getViewModel():any;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Called by getInherited to initialize the inheritedState the first time it is
requested. 
    */
        initInheritedState(inheritedState: any):void;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Gets the controller that controls this view. 
    */
        lookupController(skipThis?: boolean):Ext.app.ViewController;
    /**
    Returns the Ext.data.Session for this instance. 
    */
        lookupSession(skipThis?: boolean):Ext.data.Session;
    /**
    Returns the Ext.app.ViewModel for this instance. 
    */
        lookupViewModel(skipThis: any):Ext.app.ViewModel;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Provide legend information to target array. 
    */
        provideLegendInfo(target: any[]):void;
    /**
    Publish this components state to the ViewModel. 
    */
        publishState(property?: string, value?: any):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Override the Observable's method to redirect listener scope
resolution to the chart. 
    */
        resolveListenerScope(defaultScope: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    Sets the value of animation. 
    */
        setAnimation(animation: any):void;
    /**
    Sets the value of background. 
    */
        setBackground(background: any):void;
    /**
    Sets the value of bind. 
    */
        setBind(bind: any):void;
    /**
    Sets the value of colors. 
    */
        setColors(colors: any[]):void;
    /**
    Sets the value of controller. 
    */
        setController(controller: any):void;
    /**
    Sets the value of defaultListenerScope. 
    */
        setDefaultListenerScope(defaultListenerScope: boolean):void;
    /**
    Sets the value of hidden. 
    */
        setHidden(hidden: boolean|any[]):void;
    /**
     
    */
        setHiddenByIndex(index: number, value: boolean):void;
    /**
    Sets the value of highlight. 
    */
        setHighlight(highlight: any):void;
    /**
    Sets the value of highlightCfg. 
    */
        setHighlightCfg(highlightCfg: any):void;
    /**
    Sets the value of highlightItem. 
    */
        setHighlightItem(highlightItem: any):void;
    /**
    Sets the value of itemInstancing. 
    */
        setItemInstancing(itemInstancing: any):void;
    /**
    Sets the value of label. 
    */
        setLabel(label: any):any;
    /**
    Sets the value of labelField. 
    */
        setLabelField(labelField: string|string[]):void;
    /**
    Sets the value of labelOverflowPadding. 
    */
        setLabelOverflowPadding(labelOverflowPadding: number):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Sets the value of marker. 
    */
        setMarker(marker: any):void;
    /**
    Sets the value of markerSubStyle. 
    */
        setMarkerSubStyle(markerSubStyle: any):void;
    /**
    Sets the value of overlaySurface. 
    */
        setOverlaySurface(overlaySurface: any):void;
    /**
    Sets the value of publishes. 
    */
        setPublishes(publishes: any):void;
    /**
    Sets the value of reference. 
    */
        setReference(reference: string):void;
    /**
    Sets the value of renderer. 
    */
        setRenderer(renderer: Function):any;
    /**
    Sets the value of session. 
    */
        setSession(session: any):void;
    /**
    Sets the value of showInLegend. 
    */
        setShowInLegend(showInLegend: boolean):void;
    /**
    Sets the value of showMarkers. 
    */
        setShowMarkers(showMarkers: boolean):void;
    /**
    Sets the value of store. 
    */
        setStore(store: any):void;
    /**
    Sets the value of style. 
    */
        setStyle(style: any):void;
    /**
    Sets the value of subStyle. 
    */
        setSubStyle(subStyle: any):void;
    /**
    Sets the value of surface. 
    */
        setSurface(surface: any):void;
    /**
    Sets the value of title. 
    */
        setTitle(title: string|string[]):void;
    /**
    Sets the value of tooltip. 
    */
        setTooltip(tooltip: any):void;
    /**
    Sets the value of triggerAfterDraw. 
    */
        setTriggerAfterDraw(triggerAfterDraw: boolean):void;
    /**
    Sets the value of twoWayBindable. 
    */
        setTwoWayBindable(twoWayBindable: any):void;
    /**
    Sets the value of useDarkerStrokeColor. 
    */
        setUseDarkerStrokeColor(useDarkerStrokeColor: boolean|number):void;
    /**
    Sets the value of viewModel. 
    */
        setViewModel(viewModel: any):void;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    }
    interface StackedCartesianConfig extends Ext.chart.series.CartesianConfig {
    /**
    If true, the height of a stacked bar is always the full height of the chart,
with individual components viewed as sha
    */
        fullStack?: boolean;
    /**
    If the fullStack config is set to true, this will determine
the absolute total value of each stack. 
    */
        fullStackTotal?: boolean;
    /**
    true to stack negative/positive values in respective y-axis directions. 
    */
        splitStacks?: boolean;
    /**
    true to display the series in its stacked configuration. 
    */
        stacked?: boolean;
    }
    /**
    Abstract class for all the stacked cartesian series including area series
and bar series.

    */
    export class StackedCartesian extends Ext.chart.series.Cartesian {
    /**
     
    */
        constructor();
    /**
    Returns the value of fullStack. 
    */
        getFullStack():boolean;
    /**
    Returns the value of fullStackTotal. 
    */
        getFullStackTotal():boolean;
    /**
    Returns the value of splitStacks. 
    */
        getSplitStacks():boolean;
    /**
    Returns the value of stacked. 
    */
        getStacked():boolean;
    /**
    Sets the value of fullStack. 
    */
        setFullStack(fullStack: boolean):void;
    /**
    Sets the value of fullStackTotal. 
    */
        setFullStackTotal(fullStackTotal: boolean):void;
    /**
    Sets the value of splitStacks. 
    */
        setSplitStacks(splitStacks: boolean):void;
    /**
    Sets the value of stacked. 
    */
        setStacked(stacked: boolean):void;
    }
}
declare module Ext.chart.series.sprite {
    interface AggregativeConfig extends Ext.chart.series.sprite.CartesianConfig {
    /**
    Data items representing the closing values of the aggregated data. 
    */
        dataClose?: any;
    /**
    Data items representing the high values of the aggregated data. 
    */
        dataHigh?: any;
    /**
    Data items representing the low values of the aggregated data. 
    */
        dataLow?: any;
    /**
    Data items representing the opening values of the aggregated data. 
    */
        dataOpen?: any;
    }
    /**
    

    */
    export class Aggregative extends Ext.chart.series.sprite.Cartesian {
    /**
     
    */
        constructor();
    /**
    Returns the value of aggregator. 
    */
        getAggregator():any;
    /**
    Sets the value of aggregator. 
    */
        setAggregator(aggregator: any):void;
    }
    interface AreaConfig extends Ext.chart.series.sprite.StackedCartesianConfig {
    /**
    'true' if the area is represented with steps instead of lines. 
    */
        step?: boolean;
    }
    /**
    Area series sprite.

    */
    export class Area extends Ext.chart.series.sprite.StackedCartesian {
    /**
     
    */
        constructor();
    }
    interface BarConfig extends Ext.chart.series.sprite.StackedCartesianConfig {
    /**
    The gap between grouped bars. 
    */
        inGroupGapWidth?: number;
    /**
    The maximum bar width. 
    */
        maxBarWidth?: number;
    /**
    The minimum bar width. 
    */
        minBarWidth?: number;
    /**
    The minimum gap between bars. 
    */
        minGapWidth?: number;
    /**
    The degree of rounding for rounded bars. 
    */
        radius?: number;
    }
    /**
    Draws a sprite used in the bar series.

    */
    export class Bar extends Ext.chart.series.sprite.StackedCartesian {
    /**
     
    */
        constructor();
    }
    interface Bar3DConfig extends Ext.chart.series.sprite.BarConfig {
    /**
    The factor applied to the brightness of the bars. 
    */
        brightnessFactor?: number;
    /**
    The factor applied to the saturation of the bars. 
    */
        saturationFactor?: number;
    }
    /**
    Draws a sprite used in Ext.chart.series.Bar3D series.

    */
    export class Bar3D extends Ext.chart.series.sprite.Bar {
    /**
     
    */
        constructor();
    /**
    Returns the value of series. 
    */
        getSeries():any;
    /**
    Returns the value of showStroke. 
    */
        getShowStroke():boolean;
    /**
    Sets the value of series. 
    */
        setSeries(series: any):void;
    /**
    Sets the value of showStroke. 
    */
        setShowStroke(showStroke: boolean):void;
    }
    interface BoxConfig extends Ext.draw.sprite.SpriteConfig {
    /**
    The factor applied to the brightness of the box. 
    */
        brightnessFactor?: number;
    /**
    The depth of the box. 
    */
        depth?: number;
    /**
    The height of the box. 
    */
        height?: number;
    /**
    The orientation of the box. 
    */
        orientation?: string;
    /**
    The factor applied to the saturation of the box. 
    */
        saturationFactor?: number;
    /**
    Whether to render the stroke or not. 
    */
        showStroke?: boolean;
    /**
    The width of the box. 
    */
        width?: number;
    /**
    The position of the sprite on the x-axis. 
    */
        x?: number;
    /**
    The position of the sprite on the y-axis. 
    */
        y?: number;
    }
    /**
    A sprite that represents a 3D bar or column. 
    */
    export class Box extends Ext.draw.sprite.Sprite {
    /**
     
    */
        constructor(config: Ext.chart.series.sprite.BoxConfig);
    }
    interface CandleStickConfig extends Ext.chart.series.sprite.AggregativeConfig {
    /**
    The bar width of the candles. 
    */
        barWidth?: number;
    /**
    Determines whether candlestick or ohlc is used. 
    */
        ohlcType?: string;
    /**
    The amount of padding between candles. 
    */
        padding?: number;
    }
    /**
    CandleStick series sprite.

    */
    export class CandleStick extends Ext.chart.series.sprite.Aggregative {
    /**
     
    */
        constructor();
    }
    interface CartesianConfig extends Ext.draw.sprite.SpriteConfig {
    /**
    Data maximum on the x-axis. 
    */
        dataMaxX?: number;
    /**
    Data maximum on the y-axis. 
    */
        dataMaxY?: number;
    /**
    Data minimum on the x-axis. 
    */
        dataMinX?: number;
    /**
    Data minimum on the y-axis. 
    */
        dataMinY?: number;
    /**
    Data items on the x-axis. 
    */
        dataX?: any;
    /**
    Data items on the y-axis. 
    */
        dataY?: any;
    /**
    The store field used by the series.

    */
        field?: string;
    /**
    If flipXY is 'true', the series is flipped. 
    */
        flipXY?: boolean;
    /**
    Padding around labels to determine overlap. 
    */
        labelOverflowPadding?: number;
    /**
    Labels used in the series. 
    */
        labels?: any;
    /**
    Data range derived from all the series bound to the x-axis. 
    */
        rangeX?: any[];
    /**
    Data range derived from all the series bound to the y-axis. 
    */
        rangeY?: any[];
    /**
    The distance from the event position to the sprite's data points to trigger interactions (used for 'iteminfo', etc). 
    */
        selectionTolerance?: number;
    }
    /**
    Cartesian sprite.

    */
    export class Cartesian extends Ext.draw.sprite.Sprite {
    /**
     
    */
        constructor();
    /**
    Does a binary search of the data on the x-axis using the given key. 
    */
        binarySearch(key: string):any;
    /**
     
    */
        bindMarker(name: string, marker: Ext.chart.Markers):void;
    /**
    Returns the value of field. 
    */
        getField():string;
    /**
    Get the nearest item index from point (x, y). 
    */
        getIndexNearPoint(x: number, y: number):number;
    /**
    Render the given visible clip range. 
    */
        renderClipped(surface: Ext.draw.Surface, ctx: Ext.draw.engine.Canvas|Ext.draw.engine.SvgContext, clip: any[], rect: any[]):void;
    /**
    Sets the value of field. 
    */
        setField(field: string):void;
    }
    interface LineConfig extends Ext.chart.series.sprite.AggregativeConfig {
    /**
    true if the sprite paints the area underneath the line. 
    */
        fillArea?: boolean;
    /**
    true if the line uses precise stroke. 
    */
        preciseStroke?: boolean;
    /**
    true if the sprite uses line smoothing. 
    */
        smooth?: boolean;
    /**
    true if the line uses steps instead of straight lines to connect the dots. 
    */
        step?: boolean;
    /**
    Absolute maximum y-value. 
    */
        yCap?: number;
    }
    /**
    Line series sprite.

    */
    export class Line extends Ext.chart.series.sprite.Aggregative {
    /**
     
    */
        constructor();
    }
    interface Pie3DPartConfig extends Ext.draw.sprite.PathConfig {
    /**
    The color of the 3D pie part before adding the 3D effect. 
    */
        baseColor?: any;
    /**
    The starting rotation of the polar series. 
    */
        baseRotation?: number;
    /**
    The central point of the series on the x-axis. 
    */
        centerX?: number;
    /**
    The central point of the series on the x-axis. 
    */
        centerY?: number;
    /**
    The distortion of the 3D pie part. 
    */
        distortion?: number;
    /**
    The ending angle of the polar series. 
    */
        endAngle?: number;
    /**
    The ending radius of the polar series. 
    */
        endRho?: number;
    /**
    Margin from the center of the pie. 
    */
        margin?: number;
    /**
    The part of the 3D Pie represented by the sprite. 
    */
        part?: string;
    /**
    The starting angle of the polar series. 
    */
        startAngle?: number;
    /**
    The starting radius of the polar series. 
    */
        startRho?: number;
    /**
    The thickness of the 3D pie part. 
    */
        thickness?: number;
    }
    /**
    Pie3D series sprite.

    */
    export class Pie3DPart extends Ext.draw.sprite.Path {
    /**
     
    */
        constructor();
    /**
     
    */
        bindMarker(name: string, marker: Ext.chart.Markers):void;
    }
    interface PieSliceConfig extends Ext.draw.sprite.SectorConfig {
    /**
    'true' if the pie series uses label callouts. 
    */
        doCallout?: boolean;
    /**
    Label associated with the Pie sprite. 
    */
        label?: string;
    /**
    Padding around labels to determine overlap. 
    */
        labelOverflowPadding?: number;
    }
    /**
    Pie slice sprite.

    */
    export class PieSlice extends Ext.draw.sprite.Sector {
    /**
     
    */
        constructor();
    /**
     
    */
        bindMarker(name: string, marker: Ext.chart.Markers):void;
    /**
    Returns the value of rendererIndex. 
    */
        getRendererIndex():number;
    /**
    Sets the value of rendererIndex. 
    */
        setRendererIndex(rendererIndex: number):void;
    }
    interface PolarConfig extends Ext.draw.sprite.SpriteConfig {
    /**
    The starting rotation of the polar series. 
    */
        baseRotation?: number;
    /**
    The central point of the series on the x-axis. 
    */
        centerX?: number;
    /**
    The central point of the series on the y-axis. 
    */
        centerY?: number;
    /**
    Data maximum on the x-axis. 
    */
        dataMaxX?: number;
    /**
    Data maximum on the y-axis. 
    */
        dataMaxY?: number;
    /**
    Data minimum on the x-axis. 
    */
        dataMinX?: number;
    /**
    Data minimum on the y-axis. 
    */
        dataMinY?: number;
    /**
    Data items on the x-axis. 
    */
        dataX?: any;
    /**
    Data items on the y-axis. 
    */
        dataY?: any;
    /**
    The ending angle of the polar series. 
    */
        endAngle?: number;
    /**
    The ending radius of the polar series. 
    */
        endRho?: number;
    /**
    Padding around labels to determine overlap. 
    */
        labelOverflowPadding?: number;
    /**
    Labels used in the series. 
    */
        labels?: any;
    /**
    Data range derived from all the series bound to the x-axis. 
    */
        rangeX?: any[];
    /**
    Data range derived from all the series bound to the y-axis. 
    */
        rangeY?: any[];
    /**
    The starting angle of the polar series. 
    */
        startAngle?: number;
    /**
    The starting radius of the polar series. 
    */
        startRho?: number;
    }
    /**
    Polar sprite.

    */
    export class Polar extends Ext.draw.sprite.Sprite {
    /**
     
    */
        constructor();
    /**
     
    */
        bindMarker(name: string, marker: Ext.chart.Markers):void;
    /**
    Returns the value of field. 
    */
        getField():any;
    /**
    Sets the value of field. 
    */
        setField(field: any):void;
    }
    interface RadarConfig extends Ext.chart.series.sprite.PolarConfig {
    }
    /**
    Radar series sprite.

    */
    export class Radar extends Ext.chart.series.sprite.Polar {
    /**
     
    */
        constructor();
    }
    interface ScatterConfig extends Ext.chart.series.sprite.CartesianConfig {
    }
    /**
    Scatter series sprite.

    */
    export class Scatter extends Ext.chart.series.sprite.Cartesian {
    /**
     
    */
        constructor();
    }
    interface StackedCartesianConfig extends Ext.chart.series.sprite.CartesianConfig {
    }
    /**
    Stacked cartesian sprite.

    */
    export class StackedCartesian extends Ext.chart.series.sprite.Cartesian {
    /**
     
    */
        constructor();
    }
}
declare module Ext.chart.theme {
    interface BaseConfig {
    /**
    Theme defaults for the axes. 
    */
        axis?: any;
    /**
     
    */
        background?: any;
    /**
    The base color used to generate the Ext.chart.AbstractChart.colors of the theme.

    */
        baseColor?: string|Ext.draw.Color;
    /**
    Theme defaults for the chart. 
    */
        chart?: any;
    /**
    Array of colors/gradients to be used by the theme. 
    */
        colors?: any[];
    /**
    The gradient config to be used by series' sprites. 
    */
        gradients?: any;
    /**
    Theme defaults for the series. 
    */
        series?: any;
    /**
    Default style for the custom chart sprites by type. 
    */
        sprites?: any;
    /**
     
    */
        useGradients?: boolean;
    }
    /**
    Abstract class that provides default styles for non-specified things. 
    */
    export class Base extends Ext.Base {
    /**
    If this property is specified by the target class of this mixin its properties are
used to configure the created Ext.
    */
        factoryConfig: any;
    /**
     
    */
        constructor(config: Ext.chart.theme.BaseConfig);
    /**
    Returns the value of axis. 
    */
        getAxis():any;
    /**
    Returns the value of background. 
    */
        getBackground():any;
    /**
    Returns the value of baseColor. 
    */
        getBaseColor():string|Ext.draw.Color;
    /**
    Returns the value of chart. 
    */
        getChart():any;
    /**
    Returns the value of colors. 
    */
        getColors():any[];
    /**
    Returns the value of gradients. 
    */
        getGradients():any;
    /**
    Returns the value of markerThemes. 
    */
        getMarkerThemes():any;
    /**
    Returns the value of series. 
    */
        getSeries():any;
    /**
    Returns the value of sprites. 
    */
        getSprites():any;
    /**
    Returns the value of useGradients. 
    */
        getUseGradients():boolean;
    /**
    Sets the value of axis. 
    */
        setAxis(axis: any):void;
    /**
    Sets the value of background. 
    */
        setBackground(background: any):void;
    /**
    Sets the value of baseColor. 
    */
        setBaseColor(baseColor: string|Ext.draw.Color):void;
    /**
    Sets the value of chart. 
    */
        setChart(chart: any):void;
    /**
    Sets the value of colors. 
    */
        setColors(colors: any[]):void;
    /**
    Sets the value of gradients. 
    */
        setGradients(gradients: any):void;
    /**
    Sets the value of markerThemes. 
    */
        setMarkerThemes(markerThemes: any):void;
    /**
    Sets the value of series. 
    */
        setSeries(series: any):void;
    /**
    Sets the value of sprites. 
    */
        setSprites(sprites: any):void;
    /**
    Sets the value of useGradients. 
    */
        setUseGradients(useGradients: boolean):void;
    }
    interface DefaultConfig {
    }
    /**
    

    */
    export class Default {
    /**
    If this property is specified by the target class of this mixin its properties are
used to configure the created Ext.
    */
        static factoryConfig: any;
    /**
    Returns the value of axis. 
    */
        static getAxis():any;
    /**
    Returns the value of background. 
    */
        static getBackground():any;
    /**
    Returns the value of baseColor. 
    */
        static getBaseColor():string|Ext.draw.Color;
    /**
    Returns the value of chart. 
    */
        static getChart():any;
    /**
    Returns the value of colors. 
    */
        static getColors():any[];
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the value of gradients. 
    */
        static getGradients():any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Returns the value of markerThemes. 
    */
        static getMarkerThemes():any;
    /**
    Returns the value of series. 
    */
        static getSeries():any;
    /**
    Returns the value of sprites. 
    */
        static getSprites():any;
    /**
    Returns the value of useGradients. 
    */
        static getUseGradients():boolean;
    /**
    Sets the value of axis. 
    */
        static setAxis(axis: any):void;
    /**
    Sets the value of background. 
    */
        static setBackground(background: any):void;
    /**
    Sets the value of baseColor. 
    */
        static setBaseColor(baseColor: string|Ext.draw.Color):void;
    /**
    Sets the value of chart. 
    */
        static setChart(chart: any):void;
    /**
    Sets the value of colors. 
    */
        static setColors(colors: any[]):void;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Sets the value of gradients. 
    */
        static setGradients(gradients: any):void;
    /**
    Sets the value of markerThemes. 
    */
        static setMarkerThemes(markerThemes: any):void;
    /**
    Sets the value of series. 
    */
        static setSeries(series: any):void;
    /**
    Sets the value of sprites. 
    */
        static setSprites(sprites: any):void;
    /**
    Sets the value of useGradients. 
    */
        static setUseGradients(useGradients: boolean):void;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
}
declare module Ext.container {
    interface ButtonGroupConfig extends Ext.panel.PanelConfig {
    /**
    The columns configuration property passed to the configured layout manager. 
    */
        columns?: number;
    /**
    A default ui to use for Button items

    */
        defaultButtonUI?: string;
    }
    /**
    Provides a container for arranging a group of related Buttons in a tabular manner. 
    */
    export class ButtonGroup extends Ext.panel.Panel {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.container.ButtonGroupConfig);
    }
    interface ContainerConfig extends Ext.ComponentConfig {
    /**
    A string component id or the numeric index of the component that should be
initially activated within the container's
    */
        activeItem?: string|number;
    /**
    Defines the anchoring size of container. 
    */
        anchorSize?: any;
    /**
    If true the container will automatically destroy any contained component that is removed
from it, else destruction mu
    */
        autoDestroy?: boolean;
    /**
    An array of events that, when fired, should be bubbled to any parent container. 
    */
        bubbleEvents?: string[];
    /**
    Specifies a child Component to receive focus when this Container's focus
method is called. 
    */
        defaultFocus?: string;
    /**
    The default xtype of child Components to create in this Container when
a child item is specified as a raw configurati
    */
        defaultType?: string;
    /**
    This option is a means of applying default settings to all added items whether added
through the items config or via 
    */
        defaults?: any;
    /**
    True to move any component to the detachedBody when the component is
removed from this container. 
    */
        detachOnRemove?: boolean;
    /**
    A single item, or an array of child Components to be added to this container

Unless configured with a layout, a Cont
    */
        items?: any;
    /**
    Important: In order for child items to be correctly sized and
positioned, typically a layout manager must be specifie
    */
        layout?: any;
    /**
    If true, this container will be marked as being a point in the hierarchy where
references to items with a specified r
    */
        referenceHolder?: boolean;
    /**
    If true, suspend calls to doLayout. 
    */
        suspendLayout?: boolean;
    }
    /**
    Base class for any Ext.Component that may contain other Components. 
    */
    export class Container extends Ext.Component {
    /**
    The MixedCollection containing all the floating child items of this container.

    */
        floatingItems: Ext.util.MixedCollection;
    /**
    true in this class to identify an object as an instantiated Container, or subclass thereof. 
    */
        isContainer: boolean;
    /**
    The MixedCollection containing all the child items of this container.

    */
        items: any;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.container.ContainerConfig);
    /**
    Adds Component(s) to this Container. 
    */
        add(...component: any[]):Ext.Component[]|Ext.Component;
    /**
    Invoked after the Container has laid out (and rendered if necessary)
its child Components. 
    */
        afterLayout(layout: Ext.layout.container.Container):void;
    /**
    Cascades down the component/container heirarchy from this component (passed in
the first call), calling the specified
    */
        cascade(fn: Function, scope?: any, args?: any[]):Ext.container.Container;
    /**
    Retrieves the first direct child of this container which matches the passed selector or component. 
    */
        child(selector?: string|Ext.Component):any;
    /**
    Determines whether the passed Component is either an immediate child of this Container,
or whether it is a descendant. 
    */
        contains(comp: Ext.Component, deep?: boolean):boolean;
    /**
    Manually force this container's layout to be recalculated. 
    */
        doLayout():Ext.container.Container;
    /**
    Retrieves the first descendant of this container which matches the passed selector. 
    */
        down(selector?: string|Ext.Component):any;
    /**
    Return the immediate child Component in which the passed element is located. 
    */
        getChildByElement(el: Ext.dom.Element|HTMLElement|string, deep: boolean):Ext.Component;
    /**
    Examines this container's items property and gets a direct child
component of this container. 
    */
        getComponent(comp: string|number):Ext.Component;
    /**
    Finds the configured default focus item. 
    */
        getDefaultFocus():void;
    /**
    Returns the layout instance currently associated with this Container. 
    */
        getLayout():Ext.layout.container.Container;
    /**
    Used by ComponentQuery, child and down to retrieve all of the items
which can potentially be considered a child of th
    */
        getRefItems(deep: any):void;
    /**
    Returns an object holding the descendants of this view keyed by their
reference. 
    */
        getReferences():any;
    /**
    This method is called to initialize the items collection. 
    */
        initItems():void;
    /**
    Inserts a Component into this Container at a specified index. 
    */
        insert(index: number, component: any):Ext.Component;
    /**
    Gets a reference to a child specified using the reference configuration. 
    */
        lookupReference(key: string):Ext.Component;
    /**
    Moves the given item(s) into this container following after. 
    */
        moveAfter(item: Ext.Component|Ext.Component[], after: Ext.Component):Ext.Component|Ext.Component[];
    /**
    Moves the given item(s) into this container in front of before. 
    */
        moveBefore(item: Ext.Component|Ext.Component[], before: Ext.Component):Ext.Component|Ext.Component[];
    /**
    A method to find a child component after the passed child parameter. 
    */
        nextChild(child: Ext.Component, selector?: string):Ext.Component;
    /**
    This method is invoked after a new Component has been added. 
    */
        onAdd(component: Ext.Component, position: number):void;
    /**
    This method is invoked before adding a new child Component. 
    */
        onBeforeAdd(item: Ext.Component):void;
    /**
    This method is invoked after a new Component has been
removed. 
    */
        onRemove(component: Ext.Component, autoDestroy: boolean):void;
    /**
    A method to find a child component before the passed child parameter. 
    */
        prevChild(child: Ext.Component, selector?: string):Ext.Component;
    /**
    Retrieves all descendant components which match the passed selector. 
    */
        query(selector?: string):Ext.Component[];
    /**
    Retrieves all descendant components which match the passed function. 
    */
        queryBy(fn: Function, scope?: any):Ext.Component[];
    /**
    Finds a component at any level under this container matching the id/itemId. 
    */
        queryById(id: string):Ext.Component;
    /**
    Removes a component from this container. 
    */
        remove(component: Ext.Component|string, autoDestroy?: boolean):Ext.Component;
    /**
    Removes all components from this container. 
    */
        removeAll(autoDestroy?: boolean):Ext.Component[];
    /**
    Sets a component as the active layout item. 
    */
        setActiveItem(item: Ext.Component|number|string):Ext.Component;
    /**
    Reconfigures the initially configured layout. 
    */
        setLayout(configuration: any):void;
    /**
    Traverses the tree rooted at this node in post-order mode, calling the passed function on the nodes at each level. 
    */
        visitPostOrder(selector: any, fn: (node: any) => any, scope?: any, extraArgs?: any[]):void;
    /**
    Traverses the tree rooted at this node in pre-order mode, calling the passed function on the nodes at each level. 
    */
        visitPreOrder(selector: any, fn: (node: any) => any, scope?: any, extraArgs?: any[]):void;
    }
    interface DockingContainerConfig {
    /**
    This object holds the default weights applied to dockedItems that have no weight. 
    */
        defaultDockWeights?: any;
    }
    /**
    

    */
    export class DockingContainer extends Ext.Base {
    /**
    Adds docked item(s) to the container. 
    */
        addDocked(items: any, pos?: number):Ext.Component[];
    /**
    Finds a docked component by id, itemId or position. 
    */
        getDockedComponent(comp: string|number):Ext.Component;
    /**
    Retrieves an array of all currently docked Components. 
    */
        getDockedItems(selector: string, beforeBody: boolean):Ext.Component[];
    /**
    Inserts docked item(s) to the panel at the indicated position. 
    */
        insertDocked(pos: number, items: any):void;
    /**
    Invoked after a docked item is added to the Panel. 
    */
        onDockedAdd(component: Ext.Component):void;
    /**
    Invoked after a docked item is removed from the Panel. 
    */
        onDockedRemove(component: Ext.Component):void;
    /**
    Removes the docked item from the panel. 
    */
        removeDocked(item: Ext.Component, autoDestroy?: boolean):void;
    }
    /**
    This is a utility class for being able to track all items of a particular type
inside any level at a container. 
    */
    export class Monitor extends Ext.Base {
    /**
     
    */
        constructor(config: any);
    }
    interface ViewportConfig extends Ext.container.ContainerConfig {
    /**
    The maximum zoom scale. 
    */
        maxUserScale?: number;
    /**
    This object consists of keys that represent the conditions on which configs
will be applied. 
    */
        responsiveConfig?: any;
    /**
    It is common when using responsiveConfig to have recurring expressions that
make for complex configurations. 
    */
        responsiveFormulas?: any;
    }
    /**
    A specialized container representing the viewable application area (the browser viewport). 
    */
    export class Viewport extends Ext.container.Container {
    /**
    true in this class to identify an object as an instantiated Viewport, or subclass thereof.

    */
        isViewport: boolean;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.container.ViewportConfig);
    }
}
declare module Ext.dashboard {
    interface ColumnConfig extends Ext.container.ContainerConfig {
    }
    /**
    This class manages columns in a Dashboard. 
    */
    export class Column extends Ext.container.Container {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.dashboard.ColumnConfig);
    }
    interface DashboardConfig extends Ext.panel.PanelConfig {
    /**
    An array designating the width of columns in your dashboard's default state as described
by the defaultContent property. 
    */
        columnWidths?: number[];
    /**
    An array of part configuration objects that define your dashboard's
default state. 
    */
        defaultContent?: any[];
    /**
    The maximum number of visible columns. 
    */
        maxColumns?: number;
    /**
    An object keyed by id for the parts that can be created for this Dashboard.

    */
        parts?: any;
    }
    /**
    This class manages a drag-drop Dashboard similar to the legacy Ext JS Portal example. 
    */
    export class Dashboard extends Ext.panel.Panel {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.dashboard.DashboardConfig);
    /**
    Returns the value of maxColumns. 
    */
        getMaxColumns():number;
    /**
    Returns the value of parts. 
    */
        getParts():any;
    /**
    Sets the value of maxColumns. 
    */
        setMaxColumns(maxColumns: number):void;
    /**
    Sets the value of parts. 
    */
        setParts(parts: any):void;
    }
    interface DropZoneConfig extends Ext.dd.DropTargetConfig {
    }
    /**
    Internal class that manages drag/drop for the Dashboard.

    */
    export class DropZone extends Ext.dd.DropTarget {
    /**
    Creates new DropTarget. 
    */
        constructor(dashboard: Ext.dashboard.DropZoneConfig, cfg: Ext.dashboard.DropZoneConfig);
    }
    interface PanelConfig extends Ext.panel.PanelConfig {
    }
    /**
    This class is used to wrap content items in the Dashboard. 
    */
    export class Panel extends Ext.panel.Panel {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.dashboard.PanelConfig);
    }
    interface PartConfig {
    /**
    The configuration object used for creating instances of this Part. 
    */
        viewTemplate?: any;
    }
    /**
    This class encapsulates the creation of items for a Dashboard. 
    */
    export class Part extends Ext.Base {
    /**
    The Dashboard instance that owns this part.

    */
        dashboard: Ext.dashboard.Panel;
    /**
    If this property is specified by the target class of this mixin its properties are
used to configure the created Ext.
    */
        factoryConfig: any;
    /**
     
    */
        constructor(config: Ext.dashboard.PartConfig);
    /**
    This method is responsible for converting a configuration object from displayForm
into a "view" (an object that can b
    */
        createView(config: any):any;
    /**
    This method should display an appropriate edit form (probably a modal Ext.Window
or Ext.Msg.prompt) to get or edit co
    */
        displayForm(instance: Ext.Component, currentConfig: any, callback: (config: any) => any, scope: any):void;
    /**
    Returns the value of id. 
    */
        getId():any;
    /**
    Returns the value of viewTemplate. 
    */
        getViewTemplate():any;
    /**
    Sets the value of id. 
    */
        setId(id: any):void;
    /**
    Sets the value of viewTemplate. 
    */
        setViewTemplate(viewTemplate: any):void;
    }
}
declare module Ext.data {
    interface AbstractStoreConfig {
    /**
    When a Store is used by only one DataView, and should only exist for the lifetime of that view, then
configure the au
    */
        autoDestroy?: boolean;
    /**
    Array of Filters for this store. 
    */
        filters?: any[]|Function[];
    /**
    The direction in which sorting should be applied when grouping. 
    */
        groupDir?: string;
    /**
    The field by which to group data in the store. 
    */
        groupField?: string;
    /**
    The grouper by which to group the data store. 
    */
        grouper?: any;
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    /**
    The number of records considered to form a 'page'. 
    */
        pageSize?: number;
    /**
    true to defer any filtering operation to the server. 
    */
        remoteFilter?: boolean;
    /**
    true if the sorting should be performed on the server side, false if it is local only. 
    */
        remoteSort?: boolean;
    /**
    The initial set of Sorters

    */
        sorters?: Ext.util.Sorter[]|any[];
    /**
    Configure as true to have the filters saved when a client grid saves its state. 
    */
        statefulFilters?: boolean;
    /**
    Unique identifier for this store. 
    */
        storeId?: string;
    }
    /**
    AbstractStore is a superclass of Ext.data.ProxyStore and Ext.data.ChainedStore. 
    */
    export class AbstractStore extends Ext.Base {
    /**
    The page that the Store has most recently loaded (see loadPage) 
    */
        currentPage: number;
    /**
    If this property is specified by the target class of this mixin its properties are
used to configure the created Ext.
    */
        factoryConfig: any;
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    True if the Store has already been destroyed. 
    */
        isDestroyed: boolean;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
    true in this class to identify an object as an instantiated Store, or subclass thereof. 
    */
        isStore: boolean;
    /**
    A counter that is increased by beginUpdate and decreased by endUpdate. 
    */
        updating: number;
    /**
    documented above 
    */
        constructor(config: Ext.data.AbstractStoreConfig);
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Adds a new Filter to this Store's filter set and
by default, applies the updated filter set to the Store's unfiltered
    */
        addFilter(filters: any[]|Ext.util.Filter[], suppressEvent?: boolean):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    This method may be called to indicate the start of multiple changes to the store. 
    */
        beginUpdate():void;
    /**
    Reverts to a view of the Record cache with no filtering applied. 
    */
        clearFilter(suppressEvent?: boolean):void;
    /**
    Clear the store grouping 
    */
        clearGrouping():void;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Checks if a record is in the current active data set. 
    */
        contains(record: Ext.data.Model):boolean;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    This method is called after modifications are complete on a store. 
    */
        endUpdate():void;
    /**
    Filters the data in the Store by one or more fields. 
    */
        filter(filters?: string|Ext.util.Filter[], value?: string):void;
    /**
    Filters by a function. 
    */
        filterBy(fn: (record: Ext.data.Model) => any, scope?: any):void;
    /**
    Finds the index of the first matching Record in this store by a specific field value. 
    */
        find(property: string, value: string|RegExp, startIndex?: number, anyMatch?: boolean, caseSensitive?: boolean, exactMatch?: boolean):number;
    /**
    Find the index of the first matching Record in this Store by a function. 
    */
        findBy(fn: (record: Ext.data.Model, id: any) => any, scope?: any, startIndex?: number):number;
    /**
    Finds the index of the first matching Record in this store by a specific field value. 
    */
        findExact(fieldName: string, value: any, startIndex?: number):number;
    /**
    Finds the first matching Record in this store by a specific field value. 
    */
        findRecord(fieldName: string, value: string|RegExp, startIndex?: number, anyMatch?: boolean, caseSensitive?: boolean, exactMatch?: boolean):Ext.data.Model;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Get the Record at the specified index. 
    */
        getAt(index: number):Ext.data.Model;
    /**
    Returns the value of autoDestroy. 
    */
        getAutoDestroy():boolean;
    /**
    Get the Record with the specified id. 
    */
        getById(id: any):Ext.data.Model;
    /**
    Gets the number of records in store. 
    */
        getCount():number;
    /**
    The current filters applied to the store. 
    */
        getFilters():Ext.util.Collection;
    /**
    Returns the value of groupDir. 
    */
        getGroupDir():string;
    /**
    Returns the value of grouper. 
    */
        getGrouper():any;
    /**
    Returns a collection of readonly sub-collections of your store's records
with grouping applied. 
    */
        getGroups():Ext.util.Collection;
    /**
    Returns the value of pageSize. 
    */
        getPageSize():number;
    /**
    Gathers a range of Records between specified indices. 
    */
        getRange(start: number, end: number):Ext.data.Model[];
    /**
    Returns the value of remoteFilter. 
    */
        getRemoteFilter():boolean;
    /**
    Returns the value of remoteSort. 
    */
        getRemoteSort():boolean;
    /**
    The current sorters applied to the store. 
    */
        getSorters(autoCreate: any):Ext.util.Collection;
    /**
    Returns the value of statefulFilters. 
    */
        getStatefulFilters():boolean;
    /**
    Returns the value of storeId. 
    */
        getStoreId():string;
    /**
    Groups data inside the store. 
    */
        group(grouper: any, direction?: string):void;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Tests whether the store currently has any active filters. 
    */
        isFiltered():boolean;
    /**
    Tests whether the store currently has an active grouper. 
    */
        isGrouped():boolean;
    /**
    Returns true if the Store has been loaded. 
    */
        isLoaded():boolean;
    /**
    Returns true if the Store is currently performing a load operation. 
    */
        isLoading():boolean;
    /**
    Tests whether the store currently has any active sorters. 
    */
        isSorted():boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an individual Filter from the current filter set using the passed Filter/Filter id and
by default, applies th
    */
        removeFilter(toRemove: string|Ext.util.Filter, suppressEvent?: boolean):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    Sets the value of autoDestroy. 
    */
        setAutoDestroy(autoDestroy: boolean):void;
    /**
    Sets the value of filters. 
    */
        setFilters(filters: any[]|Function[]):void;
    /**
    Sets the value of groupDir. 
    */
        setGroupDir(groupDir: string):void;
    /**
    Sets the value of groupField. 
    */
        setGroupField(groupField: string):void;
    /**
    Sets the value of grouper. 
    */
        setGrouper(grouper: any):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Sets the value of pageSize. 
    */
        setPageSize(pageSize: number):void;
    /**
    Sets the value of remoteFilter. 
    */
        setRemoteFilter(remoteFilter: boolean):void;
    /**
    Sets the value of remoteSort. 
    */
        setRemoteSort(remoteSort: boolean):void;
    /**
    Sets the value of sorters. 
    */
        setSorters(sorters: Ext.util.Sorter[]|any[]):void;
    /**
    Sets the value of statefulFilters. 
    */
        setStatefulFilters(statefulFilters: boolean):void;
    /**
    Sets the value of storeId. 
    */
        setStoreId(storeId: string):void;
    /**
    Sorts the data in the Store by one or more of its properties. 
    */
        sort(sorters?: string|Ext.util.Sorter[], direction?: string):Ext.util.Sorter[];
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    }
    interface ArrayStoreConfig extends Ext.data.StoreConfig {
    }
    /**
    Small helper class to make creating Ext.data.Stores from Array data easier. 
    */
    export class ArrayStore extends Ext.data.Store {
    /**
    Creates the store. 
    */
        constructor(config?: Ext.data.ArrayStoreConfig);
    }
    interface BatchConfig {
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    /**
    True to pause the execution of the batch if any operation encounters an exception
(defaults to false). 
    */
        pauseOnException?: boolean;
    }
    /**
    Provides a mechanism to run one or more operations
in a given order. 
    */
    export class Batch extends Ext.Base {
    /**
    Ordered array of operations that raised an exception during the most recent
batch execution and did not successfully 
    */
        exceptions: Ext.data.operation.Operation[];
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
    Creates new Batch object. 
    */
        constructor(config?: Ext.data.BatchConfig);
    /**
    Adds a new operation to this batch at the end of the operations array 
    */
        add(operation: Ext.data.operation.Operation|Ext.data.operation.Operation[]):Ext.data.Batch;
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Gets the currently running operation. 
    */
        getCurrent():Ext.data.operation.Operation;
    /**
    Gets any operations that have returned without success in this batch. 
    */
        getExceptions():Ext.data.operation.Operation[];
    /**
    Gets the operations for this batch. 
    */
        getOperations():Ext.data.operation.Operation[];
    /**
    Returns the value of pauseOnException. 
    */
        getPauseOnException():boolean;
    /**
    Gets the total number of operations in this batch. 
    */
        getTotal():number;
    /**
    Checks if this batch has any exceptions. 
    */
        hasException():boolean;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Checks if this batch is complete. 
    */
        isComplete():boolean;
    /**
    Checks if this batch is running. 
    */
        isRunning():boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Pauses execution of the batch, but does not cancel the current operation 
    */
        pause():Ext.data.Batch;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    Kicks off execution of the batch, continuing from the current operation. 
    */
        retry():Ext.data.Batch;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Sets the value of pauseOnException. 
    */
        setPauseOnException(pauseOnException: boolean):void;
    /**
    Sorts the operations based on their type and
the foreign key dependencies of the entities. 
    */
        sort():void;
    /**
    Kicks off execution of the batch, continuing from the next operation if the previous
operation encountered an excepti
    */
        start(index: any):Ext.data.Batch;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    }
    interface BufferedStoreConfig extends Ext.data.ProxyStoreConfig {
    /**
    The number of extra rows to keep cached on the leading side of scrolling buffer
as scrolling proceeds. 
    */
        leadingBufferZone?: number;
    /**
    The number of pages in addition to twice the required buffered range to keep in the prefetch cache before purging lea
    */
        purgePageCount?: number;
    /**
    The number of extra records to keep cached on the trailing side of scrolling buffer
as scrolling proceeds. 
    */
        trailingBufferZone?: number;
    }
    /**
    A BufferedStore maintains a sparsely populated map of pages corresponding to an extremely large server-side dataset. 
    */
    export class BufferedStore extends Ext.data.ProxyStore {
    /**
    true in this class to identify an object as an instantiated BufferedStore, or subclass thereof. 
    */
        isBufferedStore: boolean;
    /**
    documented above 
    */
        constructor(config: Ext.data.BufferedStoreConfig);
    /**
    We are using applyData so that we can return nothing and prevent the this.data
property to be overridden. 
    */
        applyData(data: any):void;
    /**
    Returns the value of data. 
    */
        getData():number;
    /**
    Returns the value of leadingBufferZone. 
    */
        getLeadingBufferZone():number;
    /**
    Determines the page from a record index 
    */
        getPageFromRecordIndex(index: number):number;
    /**
    Returns the value of purgePageCount. 
    */
        getPurgePageCount():number;
    /**
    Returns the value of trailingBufferZone. 
    */
        getTrailingBufferZone():number;
    /**
    Guarantee a specific range, this will load the store with a range (that
must be the pageSize or smaller) and take car
    */
        guaranteeRange(start: any, end: any, callback: any, scope: any, options: any):void;
    /**
    Get the index of the record within the store. 
    */
        indexOf(record: Ext.data.Model):number;
    /**
    Get the index within the store of the Record with the passed id. 
    */
        indexOfId(id: string):number;
    /**
    Prefetches data into the store using its configured proxy. 
    */
        prefetch(options?: any):void;
    /**
    Prefetches a page of data. 
    */
        prefetchPage(page: number, options?: any):void;
    /**
    Ensures that the specified range of rows is present in the cache. 
    */
        prefetchRange(start: any, end: any):void;
    /**
    Sets the value of data. 
    */
        setData(data: number):void;
    /**
    Sets the value of leadingBufferZone. 
    */
        setLeadingBufferZone(leadingBufferZone: number):void;
    /**
    Sets the value of purgePageCount. 
    */
        setPurgePageCount(purgePageCount: number):void;
    /**
    Sets the value of trailingBufferZone. 
    */
        setTrailingBufferZone(trailingBufferZone: number):void;
    }
    interface ChainedStoreConfig extends Ext.data.AbstractStoreConfig {
    /**
    The backing data source for this chained store. 
    */
        source?: Ext.data.Store|string;
    }
    /**
    A chained store is a store that is a "view" of an existing store. 
    */
    export class ChainedStore extends Ext.data.AbstractStore {
    /**
    documented above 
    */
        constructor();
    /**
    Adds Model instance to the Store. 
    */
        add(...model: any[]):Ext.data.Model[];
    /**
    Runs the aggregate function for all the records in the store. 
    */
        aggregate(fn: Function, scope?: any, grouped?: boolean, field?: string):any;
    /**
    Gets the average value in the store. 
    */
        average(field: string, grouped?: boolean):any;
    /**
    Collects unique values for a particular dataIndex from this store. 
    */
        collect(dataIndex: string, includeOptions?: any):any[];
    /**
    Gets the count of items in the store. 
    */
        count(grouped?: boolean):number;
    /**
    Calls the specified function for each record in the store. 
    */
        each(fn: Function, scope?: any, includeOptions?: any):void;
    /**
    Convenience function for getting the first model instance in the store. 
    */
        first(grouped?: boolean):Ext.data.Model|void;
    /**
    Get the Record with the specified internalId. 
    */
        getByInternalId(internalId: any):Ext.data.Model;
    /**
    Returns the value of extraKeys. 
    */
        getExtraKeys():any;
    /**
    Get the model used for this store. 
    */
        getModel():Ext.data.Model;
    /**
    Returns the value of source. 
    */
        getSource():Ext.data.Store|string;
    /**
    Get the index of the record within the store. 
    */
        indexOf(record: Ext.data.Model):number;
    /**
    Get the index within the store of the Record with the passed id. 
    */
        indexOfId(id: string):number;
    /**
    Inserts Model instances into the Store at the given index and fires the add event. 
    */
        insert(index: number, records: any):Ext.data.Model[];
    /**
    Convenience function for getting the last model instance in the store. 
    */
        last(grouped?: boolean):Ext.data.Model|void;
    /**
    Gets the maximum value in the store. 
    */
        max(field: string, grouped?: boolean):any;
    /**
    Gets the minimum value in the store. 
    */
        min(field: string, grouped?: boolean):any;
    /**
    Query all the cached records in this Store by name/value pair. 
    */
        query(property: string, value: string|RegExp, anyMatch?: boolean, caseSensitive?: boolean, exactMatch?: boolean):Ext.util.Collection;
    /**
    Query all the cached records in this Store using a filtering function. 
    */
        queryBy(fn: (record: Ext.data.Model, id: any) => any, scope?: any):Ext.util.Collection;
    /**
    Sets the value of extraKeys. 
    */
        setExtraKeys(extraKeys: any):void;
    /**
    Sets the value of source. 
    */
        setSource(source: Ext.data.Store|string):void;
    /**
    Sums the value of field for each record in store
and returns the result. 
    */
        sum(field: string, grouped?: boolean):number;
    }
    interface ConnectionConfig {
    /**
    true if this request should run asynchronously. 
    */
        async?: boolean;
    /**
    Whether this request should abort any pending requests. 
    */
        autoAbort?: boolean;
    /**
    True if the response should be treated as binary data. 
    */
        binary?: boolean;
    /**
    True to enable CORS support on the XHR object. 
    */
        cors?: boolean;
    /**
    An object containing request headers which are added to each request made by this object.

    */
        defaultHeaders?: any;
    /**
    The default header to be sent out with any post request. 
    */
        defaultPostHeader?: string;
    /**
    The header to send with Ajax requests. 
    */
        defaultXhrHeader?: string;
    /**
    True to add a unique cache-buster param to GET requests. 
    */
        disableCaching?: boolean;
    /**
    Change the parameter which is sent went disabling caching through a cache buster. 
    */
        disableCachingParam?: string;
    /**
    Any parameters to be appended to the request.

    */
        extraParams?: any;
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    /**
    The default HTTP method to be used for requests. 
    */
        method?: string;
    /**
    The password to pass when using withCredentials. 
    */
        password?: string;
    /**
    The timeout in milliseconds to be used for
requests. 
    */
        timeout?: number;
    /**
    The URL for this connection.

    */
        url?: string;
    /**
    true to send the defaultXhrHeader along with any request. 
    */
        useDefaultXhrHeader?: boolean;
    /**
    The username to pass when using withCredentials. 
    */
        username?: string;
    /**
    True to set withCredentials = true on the XHR object 
    */
        withCredentials?: boolean;
    }
    /**
    The Connection class encapsulates a connection to the page's originating domain, allowing requests to be made either

    */
    export class Connection extends Ext.Base {
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
     
    */
        constructor(config: Ext.data.ConnectionConfig);
    /**
    Aborts an active request. 
    */
        abort(request?: any):void;
    /**
    Aborts all active requests 
    */
        abortAll():void;
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Returns the value of async. 
    */
        getAsync():boolean;
    /**
    Returns the value of autoAbort. 
    */
        getAutoAbort():boolean;
    /**
    Returns the value of binary. 
    */
        getBinary():boolean;
    /**
    Returns the value of cors. 
    */
        getCors():boolean;
    /**
    Returns the value of defaultHeaders. 
    */
        getDefaultHeaders():any;
    /**
    Returns the value of defaultPostHeader. 
    */
        getDefaultPostHeader():string;
    /**
    Returns the value of defaultXdrContentType. 
    */
        getDefaultXdrContentType():string;
    /**
    Returns the value of defaultXhrHeader. 
    */
        getDefaultXhrHeader():string;
    /**
    Returns the value of disableCaching. 
    */
        getDisableCaching():boolean;
    /**
    Returns the value of disableCachingParam. 
    */
        getDisableCachingParam():string;
    /**
    Returns the value of extraParams. 
    */
        getExtraParams():any;
    /**
    Returns the value of isXdr. 
    */
        getIsXdr():boolean;
    /**
    Returns the value of method. 
    */
        getMethod():string;
    /**
    Returns the value of password. 
    */
        getPassword():string;
    /**
    Returns the value of timeout. 
    */
        getTimeout():number;
    /**
    Returns the value of url. 
    */
        getUrl():string;
    /**
    Returns the value of useDefaultXhrHeader. 
    */
        getUseDefaultXhrHeader():boolean;
    /**
    Returns the value of username. 
    */
        getUsername():string;
    /**
    Returns the value of withCredentials. 
    */
        getWithCredentials():boolean;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Determines whether this object has a request outstanding. 
    */
        isLoading(request?: any):boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Checks if the response status was successful 
    */
        parseStatus(status: number):any;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Sends an HTTP request to a remote server. 
    */
        request(options: any):any;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    Sets the value of async. 
    */
        setAsync(async: boolean):void;
    /**
    Sets the value of autoAbort. 
    */
        setAutoAbort(autoAbort: boolean):void;
    /**
    Sets the value of binary. 
    */
        setBinary(binary: boolean):void;
    /**
    Sets the value of cors. 
    */
        setCors(cors: boolean):void;
    /**
    Sets the value of defaultHeaders. 
    */
        setDefaultHeaders(defaultHeaders: any):void;
    /**
    Sets the value of defaultPostHeader. 
    */
        setDefaultPostHeader(defaultPostHeader: string):void;
    /**
    Sets the value of defaultXdrContentType. 
    */
        setDefaultXdrContentType(defaultXdrContentType: string):void;
    /**
    Sets the value of defaultXhrHeader. 
    */
        setDefaultXhrHeader(defaultXhrHeader: string):void;
    /**
    Sets the value of disableCaching. 
    */
        setDisableCaching(disableCaching: boolean):void;
    /**
    Sets the value of disableCachingParam. 
    */
        setDisableCachingParam(disableCachingParam: string):void;
    /**
    Sets the value of extraParams. 
    */
        setExtraParams(extraParams: any):void;
    /**
    Sets the value of isXdr. 
    */
        setIsXdr(isXdr: boolean):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Sets the value of method. 
    */
        setMethod(method: string):void;
    /**
    Sets various options such as the url, params for the request 
    */
        setOptions(options: any, scope: any):any;
    /**
    Sets the value of password. 
    */
        setPassword(password: string):void;
    /**
    Sets the value of timeout. 
    */
        setTimeout(timeout: number):void;
    /**
    Sets the value of url. 
    */
        setUrl(url: string):void;
    /**
    Sets the value of useDefaultXhrHeader. 
    */
        setUseDefaultXhrHeader(useDefaultXhrHeader: boolean):void;
    /**
    Sets the value of username. 
    */
        setUsername(username: string):void;
    /**
    Sets the value of withCredentials. 
    */
        setWithCredentials(withCredentials: boolean):void;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Uploads a form using a hidden iframe. 
    */
        upload(form: string|HTMLElement|Ext.dom.Element, url: string, params: string, options: any):void;
    }
    interface DirectStoreConfig extends Ext.data.StoreConfig {
    }
    /**
    Small helper class to create an Ext.data.Store configured with an Ext.data.proxy.Direct
and Ext.data.reader.Json to m
    */
    export class DirectStore extends Ext.data.Store {
    /**
    End Definitions 
    */
        constructor(config: Ext.data.DirectStoreConfig);
    }
    interface ErrorConfig {
    /**
    The name of the field this error belongs to.

    */
        field?: string;
    /**
    The message containing the description of the error. 
    */
        message?: string;
    }
    /**
    This class hols the results of a validator for an Ext.data.Model. 
    */
    export class Error extends Ext.Base {
    /**
     
    */
        constructor(config: Ext.data.ErrorConfig);
    /**
    Returns the value of field. 
    */
        getField():string;
    /**
    Returns the value of message. 
    */
        getMessage():string;
    /**
    Sets the value of field. 
    */
        setField(field: string):void;
    /**
    Sets the value of message. 
    */
        setMessage(message: string):void;
    }
    interface ErrorCollectionConfig extends Ext.util.MixedCollectionConfig {
    }
    /**
    Wraps a collection of validation error responses and provides convenient functions for
accessing and errors for speci
    */
    export class ErrorCollection extends Ext.util.MixedCollection {
    /**
    Creates new MixedCollection. 
    */
        constructor(config: Ext.data.ErrorCollectionConfig);
    /**
    Returns all of the errors for the given field 
    */
        getByField(fieldName: string):any[];
    /**
    Returns true if there are no errors in the collection 
    */
        isValid():boolean;
    }
    /**
    This class is used to create JSONP requests. 
    */
    export class JsonP {
    /**
    Specifies the GET parameter that will be sent to the server containing the function name to be executed when
the requ
    */
        static callbackKey: string;
    /**
    True to add a unique cache-buster param to requests. 
    */
        static disableCaching: boolean;
    /**
    Change the parameter which is sent went disabling caching through a cache buster. 
    */
        static disableCachingParam: string;
    /**
    A default timeout for any JsonP requests. 
    */
        static timeout: number;
    /**
    Abort a request. 
    */
        static abort(request?: any):void;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Makes a JSONP request. 
    */
        static request(options: any):any;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface JsonPStoreConfig extends Ext.data.StoreConfig {
    }
    /**
    Small helper class to make creating Ext.data.Stores from different domain JSON data easier. 
    */
    export class JsonPStore extends Ext.data.Store {
    /**
    Creates the store. 
    */
        constructor(config: Ext.data.JsonPStoreConfig);
    }
    interface JsonStoreConfig extends Ext.data.StoreConfig {
    }
    /**
    Small helper class to make creating Ext.data.Stores from JSON data easier. 
    */
    export class JsonStore extends Ext.data.Store {
    /**
    Creates the store. 
    */
        constructor(config: Ext.data.JsonStoreConfig);
    }
    interface LocalStoreConfig {
    }
    /**
    A mixin that provides common store methods for Ext.data.Store &amp; Ext.data.ChainedStore.

    */
    export class LocalStore extends Ext.Mixin {
    /**
    Adds Model instance to the Store. 
    */
        add(...model: any[]):Ext.data.Model[];
    /**
    Runs the aggregate function for all the records in the store. 
    */
        aggregate(fn: Function, scope?: any, grouped?: boolean, field?: string):any;
    /**
    Gets the average value in the store. 
    */
        average(field: string, grouped?: boolean):any;
    /**
    Collects unique values for a particular dataIndex from this store. 
    */
        collect(dataIndex: string, includeOptions?: any):any[];
    /**
    Gets the count of items in the store. 
    */
        count(grouped?: boolean):number;
    /**
    Calls the specified function for each record in the store. 
    */
        each(fn: Function, scope?: any, includeOptions?: any):void;
    /**
    Convenience function for getting the first model instance in the store. 
    */
        first(grouped?: boolean):Ext.data.Model|void;
    /**
    Get the Record with the specified id. 
    */
        getById(id: any):Ext.data.Model;
    /**
    Returns the value of extraKeys. 
    */
        getExtraKeys():any;
    /**
    Get the index of the record within the store. 
    */
        indexOf(record: Ext.data.Model):number;
    /**
    Get the index within the store of the Record with the passed id. 
    */
        indexOfId(id: string):number;
    /**
    Inserts Model instances into the Store at the given index and fires the add event. 
    */
        insert(index: number, records: any):Ext.data.Model[];
    /**
    Convenience function for getting the last model instance in the store. 
    */
        last(grouped?: boolean):Ext.data.Model|void;
    /**
    Gets the maximum value in the store. 
    */
        max(field: string, grouped?: boolean):any;
    /**
    Gets the minimum value in the store. 
    */
        min(field: string, grouped?: boolean):any;
    /**
    Query all the cached records in this Store by name/value pair. 
    */
        query(property: string, value: string|RegExp, anyMatch?: boolean, caseSensitive?: boolean, exactMatch?: boolean):Ext.util.Collection;
    /**
    Query all the cached records in this Store using a filtering function. 
    */
        queryBy(fn: (record: Ext.data.Model, id: any) => any, scope?: any):Ext.util.Collection;
    /**
    Sets the value of extraKeys. 
    */
        setExtraKeys(extraKeys: any):void;
    /**
    Sums the value of field for each record in store
and returns the result. 
    */
        sum(field: string, grouped?: boolean):number;
    }
    interface ModelConfig {
    /**
    An array of associations for this model.

    */
        associations?: any[];
    /**
    One or more BelongsTo associations for this model.

    */
        belongsTo?: any;
    /**
    The name of the property a server will use to send back a client-generated id in a
create or update operation. 
    */
        clientIdProperty?: string;
    /**
    Set to false to prevent any converters from being called on fields specified in
a set operation. 
    */
        convertOnSet?: boolean;
    /**
    An Array of Ext.data.field.Field config objects, simply the field
name, or a mix of config objects and strings. 
    */
        fields?: any[]|string[];
    /**
    One or more HasMany associations for this model.

    */
        hasMany?: any;
    /**
    The name of the field treated as this Model's unique id. 
    */
        idProperty?: string;
    /**
    The id generator to use for this model. 
    */
        identifier?: any;
    /**
    A config object for a ManyToMany association. 
    */
        manyToMany?: any;
    /**
    The proxy to use for this class.

    */
        proxy?: any;
    /**
    The name of the schema to which this entity and its
associations belong. 
    */
        schema?: any;
    /**
    If specified this property is used to concatenate multiple errors for each field
as reported by the validators. 
    */
        validationSeparator?: string;
    /**
    An array of validators for this model.

    */
        validators?: any[];
    /**
    If specified, this is the name of the property that contains the entity "version". 
    */
        versionProperty?: string;
    }
    /**
    A Model or Entity represents some object that your application manages. 
    */
    export class Model extends Ext.Base {
    /**
    True if this record has been modified. 
    */
        dirty: boolean;
    /**
    True if this record is pending delete on the server. 
    */
        dropped: boolean;
    /**
    Internal flag used to track whether or not the model instance is currently being edited. 
    */
        editing: boolean;
    /**
    The short name of this entity class. 
    */
        entityName: string;
    /**
    True if this record has been erased on the server. 
    */
        erased: boolean;
    /**
    This property is incremented on each modification of a record. 
    */
        generation: number;
    /**
    The value true to identify this class and its subclasses. 
    */
        isEntity: boolean;
    /**
    The value true to identify this class and its subclasses. 
    */
        isModel: boolean;
    /**
    A hash of field values which holds the initial values of fields before a set of edits
are committed.

    */
        modified: any;
    /**
    True when the record does not yet exist in a server-side database. 
    */
        phantom: boolean;
    /**
    The Ext.data.schema.Schema to which this entity and its associations belong. 
    */
        schema: any;
    /**
    The Ext.data.Session for this record.

    */
        session: Ext.data.Session;
    /**
    The Store to which this instance belongs. 
    */
        store: Ext.data.Store;
    /**
     
    */
        constructor(data: Ext.data.ModelConfig, session: Ext.data.ModelConfig);
    /**
    Aborts a pending load operation. 
    */
        abort():void;
    /**
    Begins an edit. 
    */
        beginEdit():void;
    /**
    Cancels all changes made in the current edit operation. 
    */
        cancelEdit():void;
    /**
    Creates a clone of this record. 
    */
        clone(session?: Ext.data.Session):Ext.data.Model;
    /**
    Usually called by the Ext.data.Store which owns the model instance. 
    */
        commit(silent?: boolean, modifiedFieldNames?: string[]):void;
    /**
    Creates a clean copy of this record. 
    */
        copy(newId?: string, session?: Ext.data.Session):Ext.data.Model;
    /**
    Marks this record as dropped and waiting to be deleted on the server. 
    */
        drop(cascade?: boolean):void;
    /**
    Ends an edit. 
    */
        endEdit(silent?: boolean, modifiedFieldNames?: string[]):void;
    /**
     
    */
        erase(options?: any):Ext.data.operation.Destroy;
    /**
    Returns the value of the given field. 
    */
        get(fieldName: string):any;
    /**
    Gets all of the data from this Models loaded associations. 
    */
        getAssociatedData(result?: any, options?: any):any;
    /**
    Gets an object of only the fields that have been modified since this record was
created or committed. 
    */
        getChanges():any;
    /**
    Returns the array of fields that are declared as critical (must always send). 
    */
        getCriticalFields():Ext.data.field.Field[];
    /**
    Gets all values for each field in this model and returns an object containing the
current data. 
    */
        getData(options?: any):any;
    /**
    Get the fields array for this model. 
    */
        getFields():Ext.data.field.Field[];
    /**
    Returns the unique ID allocated to this model instance as defined by idProperty. 
    */
        getId():number|string;
    /**
    Get the idProperty for this model. 
    */
        getIdProperty():string;
    /**
    Returns the original value of a modified field. 
    */
        getModified(fieldName: string):any;
    /**
    Return a unique observable ID. 
    */
        getObservableId():void;
    /**
    This method returns the value of a field given its name prior to its most recent
change. 
    */
        getPrevious(fieldName: string):any;
    /**
    Returns the configured Proxy for this Model. 
    */
        getProxy():Ext.data.proxy.Proxy;
    /**
    Returns the array of fields that are declared as non-persist or "transient". 
    */
        getTransientFields():Ext.data.field.Field[];
    /**
    Returns the Ext.data.Validation record holding the results of this record's
validators. 
    */
        getValidation(refresh?: boolean):Ext.data.Validation;
    /**
    Checks whether this model is loading data from the proxy. 
    */
        isLoading():boolean;
    /**
    Returns true if the passed field name has been modified since the load or last commit. 
    */
        isModified(fieldName: string):boolean;
    /**
    Checks if the model is valid. 
    */
        isValid():boolean;
    /**
    Tells this model instance that an observer is looking at it. 
    */
        join(item: Ext.data.Store):void;
    /**
     
    */
        load(options?: any):Ext.data.operation.Read;
    /**
    This method is called by the Ext.data.reader.Reader after loading a model from
the server. 
    */
        onLoad():void;
    /**
    Usually called by the Ext.data.Store to which this model instance has been joined. 
    */
        reject(silent?: boolean):void;
    /**
     
    */
        save(options?: any):Ext.data.operation.Create|Ext.data.operation.Update|Ext.data.operation.Destroy;
    /**
    Sets the given field to the given value. 
    */
        set(fieldName: any, newValue: any, options?: any):string[];
    /**
    Sets the model instance's id field to the given id. 
    */
        setId(id: number|string):void;
    /**
    Set the session for this record. 
    */
        setSession(session: Ext.data.Session):void;
    /**
    Returns a url-suitable string for this model instance. 
    */
        toUrl():string;
    /**
    Tells this model instance that it has been removed from the store. 
    */
        unjoin(store: Ext.data.Store):void;
    /**
    Validates the current data against all of its configured validators. 
    */
        validate():Ext.data.ErrorCollection;
    /**
    This method adds the given set of fields to this model class. 
    */
        addFields(newFields: string[]|any[]):void;
    /**
    Returns the configured Proxy for this Model. 
    */
        getProxy():Ext.data.proxy.Proxy;
    /**
    Asynchronously loads a model instance by id. 
    */
        load(id: number|string, options?: any, session?: Ext.data.Session):Ext.data.Model;
    /**
    Removes the given set of fields from this model. 
    */
        removeFields(removeFields: boolean|string[]):void;
    /**
    This method replaces the specified set of fields with a given set of new fields. 
    */
        replaceFields(newFields: string[]|any[], removeFields: boolean|string[]):void;
    /**
    Sets the Proxy to use for this model. 
    */
        setProxy(proxy: any):Ext.data.proxy.Proxy;
    }
    /**
    This class has been deprecated. 
    */
    export class ModelManager {
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Returns the Ext.data.Model class for a given model name 
    */
        static getModel(id: any):Ext.data.Model;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface NodeInterfaceConfig {
    /**
    Set to false to deny dragging of this node. 
    */
        allowDrag?: boolean;
    /**
    Set to false to deny dropping on this node. 
    */
        allowDrop?: boolean;
    /**
    Set to true or false to show a checkbox alongside this node. 
    */
        checked?: boolean;
    /**
    Array of child nodes. 
    */
        children?: Ext.data.NodeInterface[];
    /**
    CSS class to apply to this node.

    */
        cls?: string;
    /**
    False to prevent expanding/collapsing of this node. 
    */
        expandable?: boolean;
    /**
    True if the node is expanded. 
    */
        expanded?: boolean;
    /**
    A URL for a link that's created when this config is specified. 
    */
        href?: string;
    /**
    Target for link. 
    */
        hrefTarget?: string;
    /**
    URL for this node's icon. 
    */
        icon?: string;
    /**
    CSS class to apply for this node's icon. 
    */
        iconCls?: string;
    /**
    Set to true to indicate that this child can have no children. 
    */
        leaf?: boolean;
    /**
    Tooltip showDelay. 
    */
        qshowDelay?: number;
    /**
    Tooltip text to show on this node. 
    */
        qtip?: string;
    /**
    Tooltip title. 
    */
        qtitle?: string;
    /**
    The text to show on node label (html tags are accepted). 
    */
        text?: string;
    }
    /**
    This class is used as a set of methods that are applied to the prototype of a
Model to decorate it with a Node API. 
    */
    export class NodeInterface extends Ext.Base {
    /**
    An array of this nodes children. 
    */
        childNodes: Ext.data.NodeInterface[];
    /**
    A reference to this node's first child node. 
    */
        firstChild: Ext.data.NodeInterface;
    /**
    true in this class to identify an object as an instantiated Node, or subclass thereof. 
    */
        isNode: boolean;
    /**
    A reference to this node's last child node. 
    */
        lastChild: Ext.data.NodeInterface;
    /**
    A reference to this node's next sibling node. 
    */
        nextSibling: Ext.data.NodeInterface;
    /**
    A reference to this node's parent node. 
    */
        parentNode: Ext.data.NodeInterface;
    /**
    A reference to this node's previous sibling node. 
    */
        previousSibling: Ext.data.NodeInterface;
    /**
    Inserts node(s) as the last child node of this node. 
    */
        appendChild(node: any, suppressEvents?: boolean, commit?: boolean):Ext.data.NodeInterface;
    /**
    Bubbles up the tree from this node, calling the specified function with each node. 
    */
        bubble(fn: Function, scope?: any, args?: any[]):void;
    /**
    Cascades down the tree from this node, calling the specified functions with each node. 
    */
        cascadeBy(spec: any):void;
    /**
    Collapse this node. 
    */
        collapse(recursive?: boolean, callback?: Function, scope?: any):void;
    /**
    Collapse all the children of this node. 
    */
        collapseChildren(recursive?: Function, callback?: Function, scope?: any):void;
    /**
    Returns true if this node is an ancestor (at any point) of the passed node. 
    */
        contains(node: Ext.data.NodeInterface):boolean;
    /**
    Creates a copy (clone) of this Node. 
    */
        copy(id?: string, deep?: boolean):Ext.data.NodeInterface;
    /**
    Ensures that the passed object is an instance of a Record with the NodeInterface applied 
    */
        createNode(node: any):Ext.data.NodeInterface;
    /**
    Iterates the child nodes of this node, calling the specified function
with each node. 
    */
        eachChild(fn: Function, scope?: any, args?: any[]):void;
    /**
    Destroys the node. 
    */
        erase(options: any):void;
    /**
    Expand this node. 
    */
        expand(recursive?: boolean, callback?: Function, scope?: any):void;
    /**
    Expand all the children of this node. 
    */
        expandChildren(recursive?: boolean, callback?: Function, scope?: any):void;
    /**
    Finds the first child that has the attribute with the specified value. 
    */
        findChild(attribute: string, value: any, deep?: boolean):Ext.data.NodeInterface;
    /**
    Finds the first child by a custom function. 
    */
        findChildBy(fn: Function, scope?: any, deep?: boolean):Ext.data.NodeInterface;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Returns the child node at the specified index. 
    */
        getChildAt(index: number):Ext.data.NodeInterface;
    /**
    Returns depth of this node (the root node has a depth of 0) 
    */
        getDepth():number;
    /**
    Returns the tree this node is in. 
    */
        getOwnerTree():Ext.tree.Panel;
    /**
    Gets the hierarchical path from the root of the current node. 
    */
        getPath(field?: string, separator?: string):string;
    /**
    Returns the Ext.data.TreeStore which owns this node. 
    */
        getTreeStore():Ext.data.TreeStore;
    /**
    Returns true if this node has one or more child nodes, else false. 
    */
        hasChildNodes():boolean;
    /**
    Returns the index of a child node 
    */
        indexOf(node: Ext.data.NodeInterface):number;
    /**
    Returns the index of a child node that matches the id 
    */
        indexOfId(id: string):number;
    /**
    Inserts the first node before the second node in this nodes childNodes collection. 
    */
        insertBefore(node: any, refNode: Ext.data.NodeInterface):Ext.data.NodeInterface;
    /**
    Inserts a node into this node. 
    */
        insertChild(index: number, node: any):Ext.data.NodeInterface;
    /**
    Returns true if the passed node is an ancestor (at any point) of this node. 
    */
        isAncestor(node: Ext.data.NodeInterface):boolean;
    /**
    Returns true if this node is a branch node, and the entire branch is fully loaded. 
    */
        isBranchLoaded():boolean;
    /**
    Returns true if this node has one or more child nodes, or if the expandable
node attribute is explicitly specified as
    */
        isExpandable():boolean;
    /**
    Returns true if this node is expanded. 
    */
        isExpanded():boolean;
    /**
    Returns true if this node is the first child of its parent 
    */
        isFirst():boolean;
    /**
    Returns true if this node is the last child of its parent 
    */
        isLast():boolean;
    /**
    Returns true if this node is a leaf 
    */
        isLeaf():boolean;
    /**
    Returns true if this node is loaded 
    */
        isLoaded():boolean;
    /**
    Returns true if this node is loading 
    */
        isLoading():boolean;
    /**
    Returns true if this node is the root node 
    */
        isRoot():boolean;
    /**
    Returns true if this node is visible. 
    */
        isVisible():boolean;
    /**
    Removes this node from its parent. 
    */
        remove(erase?: boolean):Ext.data.NodeInterface;
    /**
    Removes all child nodes from this node. 
    */
        removeAll(erase?: boolean):Ext.data.NodeInterface;
    /**
    Removes a child node from this node. 
    */
        removeChild(node: Ext.data.NodeInterface, erase?: boolean):Ext.data.NodeInterface;
    /**
    Replaces one child node in this node with another. 
    */
        replaceChild(newChild: Ext.data.NodeInterface, oldChild: Ext.data.NodeInterface):Ext.data.NodeInterface;
    /**
    Creates an object representation of this node including its children. 
    */
        serialize(writerParam: any):void;
    /**
    Sorts this nodes children using the supplied sort function. 
    */
        sort(sortFn?: Function, recursive?: boolean, suppressEvent?: boolean):void;
    /**
    Updates general data of this node like isFirst, isLast, depth. 
    */
        updateInfo(commit: boolean, info: any):void;
    /**
    This method allows you to decorate a Model's class to implement the NodeInterface. 
    */
        decorate(model: Ext.Class|Ext.data.Model):void;
    }
    interface NodeStoreConfig extends Ext.data.StoreConfig {
    /**
    Set to true to automatically prepend a leaf sorter. 
    */
        folderSort?: boolean;
    /**
    The Record you want to bind this Store to. 
    */
        node?: Ext.data.Model;
    /**
    Set this to true if you want this NodeStore to represent
all the descendants of the node in its flat data collection. 
    */
        recursive?: boolean;
    /**
    false to not include the root node in this Stores collection. 
    */
        rootVisible?: boolean;
    }
    /**
    Node Store

    */
    export class NodeStore extends Ext.data.Store {
    /**
    Recursion level counter. 
    */
        isExpandingOrCollapsing: number;
    /**
    true in this class to identify an object as an instantiated NodeStore, or subclass thereof. 
    */
        isNodeStore: boolean;
    /**
    Creates the store. 
    */
        constructor(config?: Ext.data.NodeStoreConfig);
    /**
    Returns the value of folderSort. 
    */
        getFolderSort():boolean;
    /**
    Returns the value of node. 
    */
        getNode():Ext.data.Model;
    /**
    Returns the value of recursive. 
    */
        getRecursive():boolean;
    /**
    Returns the value of rootVisible. 
    */
        getRootVisible():boolean;
    /**
     
    */
        isVisible(node: any):boolean;
    /**
    Sets the value of folderSort. 
    */
        setFolderSort(folderSort: boolean):void;
    /**
    Sets the value of node. 
    */
        setNode(node: Ext.data.Model):void;
    /**
    Sets the value of recursive. 
    */
        setRecursive(recursive: boolean):void;
    /**
    Sets the value of rootVisible. 
    */
        setRootVisible(rootVisible: boolean):void;
    }
    interface PageMapConfig extends Ext.util.LruCacheConfig {
    /**
    The size of pages in this map. 
    */
        pageSize?: number;
    /**
    The root property to use for aggregation, filtering and sorting. 
    */
        rootProperty?: string;
    }
    /**
    Private class for use by only Store when configured buffered: true.

    */
    export class PageMap extends Ext.util.LruCache {
    /**
    Creates new HashMap. 
    */
        constructor(config?: Ext.data.PageMapConfig);
    /**
    Returns the first record in this page map which elicits a true return value from the
passed selection function. 
    */
        findBy(fn: (rec: any, index: any) => any, scope?: any):any;
    /**
    Returns the index in the whole dataset of the first record in this page map which elicits a true return value from th
    */
        findIndexBy(fn: (rec: any, index: any) => any, scope?: any):number;
    /**
    Returns the value of pageSize. 
    */
        getPageSize():number;
    /**
    Returns the value of rootProperty. 
    */
        getRootProperty():string;
    /**
    Returns the value of store. 
    */
        getStore():any;
    /**
    Sets the value of pageSize. 
    */
        setPageSize(pageSize: number):void;
    /**
    Sets the value of rootProperty. 
    */
        setRootProperty(rootProperty: string):void;
    /**
    Sets the value of store. 
    */
        setStore(store: any):void;
    }
    interface ProxyStoreConfig extends Ext.data.AbstractStoreConfig {
    /**
    If data is not specified, and if autoLoad is true or an Object, this store's load method is automatically called
afte
    */
        autoLoad?: any;
    /**
    True to automatically sync the Store with its Proxy after every edit to one of its Records. 
    */
        autoSync?: boolean;
    /**
    Sets the updating behavior based on batch synchronization. 
    */
        batchUpdateMode?: string;
    /**
    An Array of Ext.data.field.Field config objects, simply the field
name, or a mix of config objects and strings. 
    */
        fields?: any[]|string[];
    /**
    Name of the Model associated with this store. 
    */
        model?: string|Ext.data.Model;
    /**
    The Proxy to use for this Store. 
    */
        proxy?: any;
    /**
    If true, any sorters attached to this Store will be run after loading data, before the datachanged event is fired. 
    */
        sortOnLoad?: boolean;
    /**
    This config controls whether removed records are remembered by this store for
later saving to the server. 
    */
        trackRemoved?: boolean;
    }
    /**
    ProxyStore is a superclass of Ext.data.Store and Ext.data.BufferedStore. 
    */
    export class ProxyStore extends Ext.data.AbstractStore {
    /**
    Property to hold the last options from a load method call. 
    */
        lastOptions: any;
    /**
    Temporary cache in which removed model instances are kept until successfully
synchronised with a Proxy, at which poin
    */
        removed: Ext.data.Model[];
    /**
    documented above 
    */
        constructor(config: Ext.data.ProxyStoreConfig);
    /**
    Returns the value of autoLoad. 
    */
        getAutoLoad():any;
    /**
    Returns the value of autoSync. 
    */
        getAutoSync():boolean;
    /**
    Returns the value of batchUpdateMode. 
    */
        getBatchUpdateMode():string;
    /**
    Returns the value of fields. 
    */
        getFields():any[]|string[];
    /**
    Returns the value of model. 
    */
        getModel():string|Ext.data.Model;
    /**
    Gets all records added or updated since the last commit. 
    */
        getModifiedRecords():Ext.data.Model[];
    /**
    Returns all phantom records in this store. 
    */
        getNewRecords():Ext.data.Model[];
    /**
    Returns the value of proxy. 
    */
        getProxy():any;
    /**
    Returns any records that have been removed from the store but not yet destroyed on the proxy. 
    */
        getRemovedRecords():Ext.data.Model[];
    /**
    Returns the value of sortOnLoad. 
    */
        getSortOnLoad():boolean;
    /**
    Returns the total number of Model instances that the Proxy
indicates exist. 
    */
        getTotalCount():number;
    /**
    Returns the value of trackRemoved. 
    */
        getTrackRemoved():boolean;
    /**
    Returns all valid, non-phantom Model instances that have been updated in the Store but not yet synchronized with the 
    */
        getUpdatedRecords():Ext.data.Model[];
    /**
    Loads the Store using its configured proxy. 
    */
        load(options?: any):Ext.data.Store;
    /**
    Reloads the store using the last options passed to the load method. 
    */
        reload(options?: any):void;
    /**
    Removes all records from the store. 
    */
        removeAll():void;
    /**
    Resumes automatically syncing the Store with its Proxy. 
    */
        resumeAutoSync(syncNow: boolean):void;
    /**
    Saves all pending changes via the configured proxy. 
    */
        save():void;
    /**
    Sets the value of autoLoad. 
    */
        setAutoLoad(autoLoad: any):void;
    /**
    Sets the value of autoSync. 
    */
        setAutoSync(autoSync: boolean):void;
    /**
    Sets the value of batchUpdateMode. 
    */
        setBatchUpdateMode(batchUpdateMode: string):void;
    /**
    Sets the value of fields. 
    */
        setFields(fields: any[]|string[]):void;
    /**
    Sets the value of model. 
    */
        setModel(model: string|Ext.data.Model):void;
    /**
    Sets the value of proxy. 
    */
        setProxy(proxy: any):void;
    /**
    Sets the value of sortOnLoad. 
    */
        setSortOnLoad(sortOnLoad: boolean):void;
    /**
    Sets the value of trackRemoved. 
    */
        setTrackRemoved(trackRemoved: boolean):void;
    /**
    Suspends automatically syncing the Store with its Proxy. 
    */
        suspendAutoSync():void;
    /**
    Synchronizes the store with its proxy. 
    */
        sync(options?: any):Ext.data.Store;
    }
    interface RequestConfig {
    /**
    The name of the action this Request represents. 
    */
        action?: string;
    /**
    True to request binary data from the server. 
    */
        binary?: boolean;
    /**
    Some requests (like JsonP) want to send an additional key that contains
the name of the callback function.

    */
        callbackKey?: string;
    /**
    Whether or not to disable caching for this request. 
    */
        disableCaching?: boolean;
    /**
    Some requests (like XMLHttpRequests) want to send additional server headers. 
    */
        headers?: any;
    /**
    This is used by some write actions to attach data to the request without encoding it
as a parameter.

    */
        jsonData?: any;
    /**
    The HTTP method to use on this Request. 
    */
        method?: string;
    /**
    The operation this request belongs to.

    */
        operation?: Ext.data.operation.Operation;
    /**
    HTTP request params. 
    */
        params?: any;
    /**
    Most oData feeds require basic HTTP authentication. 
    */
        password?: string;
    /**
    The proxy this request belongs to.

    */
        proxy?: Ext.data.proxy.Proxy;
    /**
    The url to access on this Request.

    */
        url?: string;
    /**
    Most oData feeds require basic HTTP authentication. 
    */
        username?: string;
    /**
    This field is necessary when using cross-origin resource sharing. 
    */
        withCredentials?: boolean;
    /**
    This is used by some write actions to attach data to the request without encoding it
as a parameter, but instead send
    */
        xmlData?: any;
    }
    /**
    Simple class that represents a Request that will be made by any Ext.data.proxy.Server subclass. 
    */
    export class Request extends Ext.Base {
    /**
    Creates the Request object. 
    */
        constructor(config?: Ext.data.RequestConfig);
    /**
    Returns the value of action. 
    */
        getAction():string;
    /**
    Returns the value of args. 
    */
        getArgs():any;
    /**
    Returns the value of binary. 
    */
        getBinary():boolean;
    /**
    Returns the value of callback. 
    */
        getCallback():any;
    /**
    Returns the value of callbackKey. 
    */
        getCallbackKey():string;
    /**
    Returns the value of directFn. 
    */
        getDirectFn():any;
    /**
    Returns the value of disableCaching. 
    */
        getDisableCaching():boolean;
    /**
    Returns the value of headers. 
    */
        getHeaders():any;
    /**
    Returns the value of jsonData. 
    */
        getJsonData():any;
    /**
    Returns the value of method. 
    */
        getMethod():string;
    /**
    Returns the value of operation. 
    */
        getOperation():Ext.data.operation.Operation;
    /**
    Gets a single param from the params. 
    */
        getParam(key: string):any;
    /**
    Returns the value of params. 
    */
        getParams():any;
    /**
    Returns the value of password. 
    */
        getPassword():string;
    /**
    Returns the value of proxy. 
    */
        getProxy():Ext.data.proxy.Proxy;
    /**
    Returns the value of records. 
    */
        getRecords():any;
    /**
    Returns the value of scope. 
    */
        getScope():any;
    /**
    Returns the value of timeout. 
    */
        getTimeout():number;
    /**
    Returns the value of url. 
    */
        getUrl():string;
    /**
    Returns the value of useDefaultXhrHeader. 
    */
        getUseDefaultXhrHeader():any;
    /**
    Returns the value of username. 
    */
        getUsername():string;
    /**
    Returns the value of withCredentials. 
    */
        getWithCredentials():boolean;
    /**
    Returns the value of xmlData. 
    */
        getXmlData():any;
    /**
    Sets the value of action. 
    */
        setAction(action: string):void;
    /**
    Sets the value of args. 
    */
        setArgs(args: any):void;
    /**
    Sets the value of binary. 
    */
        setBinary(binary: boolean):void;
    /**
    Sets the value of callback. 
    */
        setCallback(callback: any):void;
    /**
    Sets the value of callbackKey. 
    */
        setCallbackKey(callbackKey: string):void;
    /**
    Sets the value of directFn. 
    */
        setDirectFn(directFn: any):void;
    /**
    Sets the value of disableCaching. 
    */
        setDisableCaching(disableCaching: boolean):void;
    /**
    Sets the value of headers. 
    */
        setHeaders(headers: any):void;
    /**
    Sets the value of jsonData. 
    */
        setJsonData(jsonData: any):void;
    /**
    Sets the value of method. 
    */
        setMethod(method: string):void;
    /**
    Sets the value of operation. 
    */
        setOperation(operation: Ext.data.operation.Operation):void;
    /**
    Sets a single param value in the params. 
    */
        setParam(key: string, value: any):void;
    /**
    Sets the value of params. 
    */
        setParams(params: any):void;
    /**
    Sets the value of password. 
    */
        setPassword(password: string):void;
    /**
    Sets the value of proxy. 
    */
        setProxy(proxy: Ext.data.proxy.Proxy):void;
    /**
    Sets the value of records. 
    */
        setRecords(records: any):void;
    /**
    Sets the value of scope. 
    */
        setScope(scope: any):void;
    /**
    Sets the value of timeout. 
    */
        setTimeout(timeout: number):void;
    /**
    Sets the value of url. 
    */
        setUrl(url: string):void;
    /**
    Sets the value of useDefaultXhrHeader. 
    */
        setUseDefaultXhrHeader(useDefaultXhrHeader: any):void;
    /**
    Sets the value of username. 
    */
        setUsername(username: string):void;
    /**
    Sets the value of withCredentials. 
    */
        setWithCredentials(withCredentials: boolean):void;
    /**
    Sets the value of xmlData. 
    */
        setXmlData(xmlData: any):void;
    }
    interface ResultSetConfig {
    /**
    The number of records in this ResultSet. 
    */
        count?: number;
    /**
    True if the records have already been loaded. 
    */
        loaded?: boolean;
    /**
    The message that was read in from the data

    */
        message?: string;
    /**
    The metadata object from a server sourced JSON data packet.

    */
        metadata?: any;
    /**
    The array of record instances or record config objects.

    */
        records?: Ext.data.Model[]|any[];
    /**
    True if the ResultSet loaded successfully, false if any errors were encountered. 
    */
        success?: boolean;
    /**
    The total number of records reported by the data source. 
    */
        total?: number;
    }
    /**
    Simple wrapper class that represents a set of records returned by a Proxy.

    */
    export class ResultSet extends Ext.Base {
    /**
    Identifies this class as a result set. 
    */
        isResultSet: boolean;
    /**
    Creates the resultSet 
    */
        constructor(config?: Ext.data.ResultSetConfig);
    /**
    Returns the value of loaded. 
    */
        getLoaded():boolean;
    /**
    Returns the value of message. 
    */
        getMessage():string;
    /**
    Returns the value of metadata. 
    */
        getMetadata():any;
    /**
    Returns the value of records. 
    */
        getRecords():Ext.data.Model[]|any[];
    /**
    Returns the value of success. 
    */
        getSuccess():boolean;
    /**
    Returns the value of total. 
    */
        getTotal():number;
    /**
    Sets the value of count. 
    */
        setCount(count: number):void;
    /**
    Sets the value of loaded. 
    */
        setLoaded(loaded: boolean):void;
    /**
    Sets the value of message. 
    */
        setMessage(message: string):void;
    /**
    Sets the value of metadata. 
    */
        setMetadata(metadata: any):void;
    /**
    Sets the value of records. 
    */
        setRecords(records: Ext.data.Model[]|any[]):void;
    /**
    Sets the value of success. 
    */
        setSuccess(success: boolean):void;
    /**
    Sets the value of total. 
    */
        setTotal(total: number):void;
    }
    interface SessionConfig {
    /**
    true to automatically destroy this session when a component it is attached
to is destroyed. 
    */
        autoDestroy?: boolean;
    /**
    The parent session for this session.

    */
        parent?: Ext.data.Session;
    /**
     
    */
        schema?: string|Ext.data.schema.Schema;
    }
    /**
    This class manages models and their associations. 
    */
    export class Session extends Ext.Base {
    /**
     
    */
        constructor(config: Ext.data.SessionConfig);
    /**
    Adds an existing record instance to the session. 
    */
        adopt(record: Ext.data.Model):void;
    /**
    Marks the session as "clean" by calling Ext.data.Model.commit on each record
that is known to the session. 
    */
        commit():void;
    /**
    Creates a new record and tracks it in this session. 
    */
        createRecord(type: string|Ext.Class, data?: any):Ext.data.Model;
    /**
    Returns the value of autoDestroy. 
    */
        getAutoDestroy():boolean;
    /**
    Returns an object describing all of the modified fields, created or dropped records
and many-to-many association chan
    */
        getChanges():any;
    /**
    The same functionality as getChanges, however we also take into account our
parent session. 
    */
        getChangesForParent():any;
    /**
    Returns the value of crudProperties. 
    */
        getCrudProperties():any;
    /**
    Transforms a list of ids into a list of records for a particular type. 
    */
        getEntityList(entityType: Ext.Class, ids: any[]):Ext.data.Model[];
    /**
    Gets a user friendly identifier for a Model. 
    */
        getModelIdentifier(entityType: Ext.Class, id: any):string;
    /**
    Returns the value of parent. 
    */
        getParent():Ext.data.Session;
    /**
    Get a cached record from the session. 
    */
        getRecord(type: string|Ext.Class|Ext.data.Model, id: any, autoLoad?: any):Ext.data.Model;
    /**
    Returns an Ext.data.Batch containing the Ext.data.operation.Operation instances
that are needed to save all of the ch
    */
        getSaveBatch(sort?: boolean):Ext.data.Batch;
    /**
    Returns the value of schema. 
    */
        getSchema():string|Ext.data.schema.Schema;
    /**
    Triggered when an associated item from update references a record
that does not exist in the session. 
    */
        onInvalidAssociationEntity(entityType: Ext.Class, id: any):void;
    /**
    Triggered when an drop block from update tries to create a record
that already exists. 
    */
        onInvalidEntityCreate(entityType: Ext.Class, id: any):void;
    /**
    Triggered when an drop block from update references a record
that does not exist in the session. 
    */
        onInvalidEntityDrop(entityType: Ext.Class, id: any):void;
    /**
    Triggered when an drop block from update tries to create a record
that already exists. 
    */
        onInvalidEntityRead(entityType: Ext.Class, id: any):void;
    /**
    Triggered when an update block from update references a record
that does not exist in the session. 
    */
        onInvalidEntityUpdate(entityType: Ext.Class, id: any, dropped: boolean):void;
    /**
    Gets an existing record from the session. 
    */
        peekRecord(type: string|Ext.Class, id: any, deep?: boolean):Ext.data.Model;
    /**
    Save any changes in this session to a parent session. 
    */
        save():void;
    /**
    Sets the value of autoDestroy. 
    */
        setAutoDestroy(autoDestroy: boolean):void;
    /**
    Sets the value of crudProperties. 
    */
        setCrudProperties(crudProperties: any):void;
    /**
    Sets the value of parent. 
    */
        setParent(parent: Ext.data.Session):void;
    /**
    Sets the value of schema. 
    */
        setSchema(schema: string|Ext.data.schema.Schema):void;
    /**
    Create a child session with this session as the parent. 
    */
        spawn():Ext.data.Session;
    /**
    Complete a bulk update for this session. 
    */
        update(data: any):void;
    /**
    Walks the internal data tracked by this session and calls methods on the provided
visitor object. 
    */
        visitData(visitor: any):any;
    }
    /**
    This class defines a series of static methods that are used on a
Ext.data.Field for performing sorting. 
    */
    export class SortTypes {
    /**
    The regular expression used to strip commas 
    */
        static stripCommasRe: RegExp;
    /**
    The regular expression used to strip tags 
    */
        static stripTagsRE: RegExp;
    /**
    Date sorting 
    */
        static asDate(s: any):number;
    /**
    Float sorting 
    */
        static asFloat(s: any):number;
    /**
    Integer sorting 
    */
        static asInt(s: any):number;
    /**
    Strips all HTML tags to sort on text only 
    */
        static asText(s: any):string;
    /**
    Case insensitive string 
    */
        static asUCString(s: any):string;
    /**
    Strips all HTML tags to sort on text only - Case insensitive 
    */
        static asUCText(s: any):string;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Default sort that does nothing 
    */
        static none(s: any):any;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface StoreConfig extends Ext.data.ProxyStoreConfig {
    /**
    True to empty the store when loading another page via loadPage,
nextPage or previousPage. 
    */
        clearOnPageLoad?: boolean;
    /**
    true to clear anything in the removed record collection when the store loads. 
    */
        clearRemovedOnLoad?: boolean;
    /**
    Array of Model instances or data objects to load locally. 
    */
        data?: any[]|Ext.data.Model[];
    /**
    The session for this store. 
    */
        session?: Ext.data.Session;
    }
    /**
    The Store class encapsulates a client side cache of Model objects. 
    */
    export class Store extends Ext.data.ProxyStore {
    /**
    The number of times records have been loaded into the store. 
    */
        loadCount: number;
    /**
    Creates the store. 
    */
        constructor(config?: Ext.data.StoreConfig);
    /**
    Adds Model instance to the Store. 
    */
        add(...model: any[]):Ext.data.Model[];
    /**
    (Local sort only) Inserts the passed Record into the Store at the index where it
should go based on the current sort 
    */
        addSorted(record: Ext.data.Model):void;
    /**
    Runs the aggregate function for all the records in the store. 
    */
        aggregate(fn: Function, scope?: any, grouped?: boolean, field?: string):any;
    /**
    Gets the average value in the store. 
    */
        average(field: string, grouped?: boolean):any;
    /**
    Collects unique values for a particular dataIndex from this store. 
    */
        collect(dataIndex: string, includeOptions?: any):any[];
    /**
    Commits all Records with outstanding changes. 
    */
        commitChanges():void;
    /**
    Gets the count of items in the store. 
    */
        count(grouped?: boolean):number;
    /**
    Calls the specified function for each record in the store. 
    */
        each(fn: Function, scope?: any, includeOptions?: any):void;
    /**
    Convenience function for getting the first model instance in the store. 
    */
        first(grouped?: boolean):Ext.data.Model|void;
    /**
    Get the Record with the specified internalId. 
    */
        getByInternalId(internalId: any):Ext.data.Model;
    /**
    Returns the value of clearOnPageLoad. 
    */
        getClearOnPageLoad():boolean;
    /**
    Returns the value of clearRemovedOnLoad. 
    */
        getClearRemovedOnLoad():boolean;
    /**
    Returns the store's records. 
    */
        getData():Ext.util.Collection;
    /**
    Returns the value of extraKeys. 
    */
        getExtraKeys():any;
    /**
    Returns the value of session. 
    */
        getSession():Ext.data.Session;
    /**
    Get the index of the record within the store. 
    */
        indexOf(record: Ext.data.Model):number;
    /**
    Get the index within the store of the Record with the passed id. 
    */
        indexOfId(id: string):number;
    /**
    Inserts Model instances into the Store at the given index and fires the add event. 
    */
        insert(index: number, records: any):Ext.data.Model[];
    /**
    Convenience function for getting the last model instance in the store. 
    */
        last(grouped?: boolean):Ext.data.Model|void;
    /**
    Loads an array of data straight into the Store. 
    */
        loadData(data: Ext.data.Model[]|any[], append?: boolean):void;
    /**
    Loads a given 'page' of data by setting the start and limit values appropriately. 
    */
        loadPage(page: number, options?: any):void;
    /**
    Loads data via the bound Proxy's reader

Use this method if you are attempting to load data and want to utilize the c
    */
        loadRawData(data: any[], append?: boolean):boolean;
    /**
    Loads an array of model instances into the store, fires the datachanged event. 
    */
        loadRecords(records: Ext.data.Model[], options: any):void;
    /**
    Gets the maximum value in the store. 
    */
        max(field: string, grouped?: boolean):any;
    /**
    Gets the minimum value in the store. 
    */
        min(field: string, grouped?: boolean):any;
    /**
    Loads the next 'page' in the current data set 
    */
        nextPage(options: any):void;
    /**
    Loads the previous 'page' in the current data set 
    */
        previousPage(options: any):void;
    /**
    Query all the cached records in this Store by name/value pair. 
    */
        query(property: string, value: string|RegExp, anyMatch?: boolean, caseSensitive?: boolean, exactMatch?: boolean):Ext.util.Collection;
    /**
    Query all the cached records in this Store using a filtering function. 
    */
        queryBy(fn: (record: Ext.data.Model, id: any) => any, scope?: any):Ext.util.Collection;
    /**
    Rejects outstanding changes on all modified records
and re-insert any records that were removed locally. 
    */
        rejectChanges():void;
    /**
    Removes the specified record(s) from the Store, firing the remove
event for the removed records. 
    */
        remove(records: Ext.data.Model|Ext.data.Model[]|number|number[]):void;
    /**
    Removes the model instance(s) at the given index 
    */
        removeAt(index: number, count?: number):void;
    /**
    Sets the value of clearOnPageLoad. 
    */
        setClearOnPageLoad(clearOnPageLoad: boolean):void;
    /**
    Sets the value of clearRemovedOnLoad. 
    */
        setClearRemovedOnLoad(clearRemovedOnLoad: boolean):void;
    /**
    Loads an array of data directly into the Store. 
    */
        setData(data: Ext.data.Model[]|any[]):void;
    /**
    Sets the value of extraKeys. 
    */
        setExtraKeys(extraKeys: any):void;
    /**
    Sets the value of session. 
    */
        setSession(session: Ext.data.Session):void;
    /**
    Sums the value of field for each record in store
and returns the result. 
    */
        sum(field: string, grouped?: boolean):number;
    }
    interface StoreManagerConfig {
    }
    /**
    Contains a collection of all stores that are created that have an identifier. 
    */
    export class StoreManager {
    /**
    This object holds a key for any event that has a listener. 
    */
        static hasListeners: any;
    /**
    true in this class to identify an object as an instantiated MixedCollection, or subclass thereof. 
    */
        static isMixedCollection: boolean;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        static isObservable: boolean;
    /**
    true in this class to identify an object as an instantiated Sortable, or subclass thereof. 
    */
        static isSortable: boolean;
    /**
    Adds an item to the collection. 
    */
        static add(key: any, obj?: any):any;
    /**
    Appends an after-event handler. 
    */
        static addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Adds all elements of an Array or an Object to the collection. 
    */
        static addAll(objs: any):void;
    /**
    Appends a before-event handler. 
    */
        static addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        static addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        static addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Removes all items from the collection. 
    */
        static clear():void;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        static clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        static clearManagedListeners():void;
    /**
    Creates a shallow copy of this collection 
    */
        static clone():Ext.util.MixedCollection;
    /**
    Collects unique values of a particular property in this MixedCollection 
    */
        static collect(property: string, root?: string, allowBlank?: boolean):any[];
    /**
    Returns true if the collection contains the passed Object as an item. 
    */
        static contains(o: any):boolean;
    /**
    Returns true if the collection contains the passed Object as a key. 
    */
        static containsKey(key: string):boolean;
    /**
    Executes the specified function once for every item in the collection. 
    */
        static each(fn: (item: any, index: number, len: number) => any, scope?: any):void;
    /**
    Executes the specified function once for every key in the collection, passing each
key, and its associated item as th
    */
        static eachKey(fn: (key: string, item: any, index: number, len: number) => any, scope?: any):void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        static enableBubble(eventNames: string|string[]):void;
    /**
    Filters the objects in this collection by a set of Filters, or by a single
property/value pair with optional paramete
    */
        static filter(property: Ext.util.Filter[]|string, value: string|RegExp, anyMatch?: boolean, caseSensitive?: boolean):Ext.util.MixedCollection;
    /**
    Filter by a function. 
    */
        static filterBy(fn: (item: any, key: string) => any, scope?: any):Ext.util.MixedCollection;
    /**
    Returns the first item in the collection which elicits a true return value from the passed selection function. 
    */
        static find():void;
    /**
    Returns the first item in the collection which elicits a true return value from the
passed selection function. 
    */
        static findBy(fn: (item: any, key: string) => any, scope?: any):any;
    /**
    Finds the index of the first matching object in this collection by a specific property/value. 
    */
        static findIndex(property: string, value: string|RegExp, start?: number, anyMatch?: boolean, caseSensitive?: boolean):number;
    /**
    Find the index of the first matching object in this collection by a function. 
    */
        static findIndexBy(fn: (item: any, key: string) => any, scope?: any, start?: number):number;
    /**
    Calculates the insertion index of the new item based upon the comparison function passed, or the current sort order. 
    */
        static findInsertionIndex(newItem: any, sorterFn?: Function):number;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        static fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        static fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        static fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Returns the first item in the collection. 
    */
        static first():any;
    /**
    Returns a comparator function which compares two items and returns -1, 0, or 1 depending
on the currently defined set
    */
        static generateComparator():void;
    /**
    Returns the item associated with the passed key OR index. 
    */
        static get(key: string|number):any;
    /**
    Returns the item at the specified index. 
    */
        static getAt(index: number):any;
    /**
    Returns the item associated with the passed key. 
    */
        static getByKey(key: string|number):any;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the number of items in the collection. 
    */
        static getCount():number;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    getKey implementation for MixedCollection 
    */
        static getKey(o: any):any;
    /**
    Returns a range of items in this collection 
    */
        static getRange(startIndex?: number, endIndex?: number):any[];
    /**
    Returns the value of sorters. 
    */
        static getSorters():Ext.util.Sorter[]|any[];
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        static hasListener(eventName: string):boolean;
    /**
    Returns index within the collection of the passed Object. 
    */
        static indexOf(o: any):number;
    /**
    Returns index within the collection of the passed key. 
    */
        static indexOfKey(key: string):number;
    /**
    Inserts an item at the specified index in the collection. 
    */
        static insert(index: number, key: any, o?: any):any;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        static isSuspended(event?: string):boolean;
    /**
    Returns the last item in the collection. 
    */
        static last():any;
    /**
    Gets a registered Store by id 
    */
        static lookup(store: any):Ext.data.Store;
    /**
    Shorthand for addManagedListener. 
    */
        static mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        static mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        static on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        static onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        static onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Registers one or more Stores with the StoreManager. 
    */
        static register(...stores: Ext.data.Store[]):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        static relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Remove an item from the collection. 
    */
        static remove(o: any):any;
    /**
    Removes a before-event handler. 
    */
        static removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Remove all items in the collection. 
    */
        static removeAll(items?: any[]):Ext.util.MixedCollection;
    /**
    Remove an item from a specified index in the collection. 
    */
        static removeAt(index: number):any;
    /**
    Removes an item associated with the passed key fom the collection. 
    */
        static removeAtKey(key: string):any;
    /**
    Removes a before-event handler. 
    */
        static removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        static removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        static removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Remove a range of items starting at a specified index in the collection. 
    */
        static removeRange(index: number, removeCount?: number):any;
    /**
    Reorders each of the items based on a mapping from old index to new index. 
    */
        static reorder(mapping: any):void;
    /**
    Replaces an item in the collection. 
    */
        static replace(key: string, o: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        static resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        static resumeEvents(discardQueue?: boolean):void;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    An alias for addListener. 
    */
        static setListeners(listeners: any):void;
    /**
    Sets the value of sorters. 
    */
        static setSorters(sorters: Ext.util.Sorter[]|any[]):void;
    /**
    Updates the sorters collection and triggers sorting of this Sortable. 
    */
        static sort(sorters?: string|Ext.util.Sorter[], direction?: string, insertionPosition?: string):Ext.util.Sorter[];
    /**
    Sorts the collection by a single sorter function 
    */
        static sortBy(sorterFn: Function):void;
    /**
    Sorts this collection by keys. 
    */
        static sortByKey(direction?: string, fn?: Function):void;
    /**
    Collects all of the values of the given property and returns their sum 
    */
        static sum(property: string, root?: string, start?: number, end?: number):number;
    /**
    Suspends firing of the named event(s). 
    */
        static suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        static suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        static un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        static unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        static unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Unregisters one or more Stores with the StoreManager 
    */
        static unregister(...stores: any[]):void;
    /**
    Change the key for an existing item in the collection. 
    */
        static updateKey(oldKey: any, newKey: any):void;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface TreeModelConfig extends Ext.data.ModelConfig {
    /**
    The class name of child nodes to create when reading child nodes from
raw data. 
    */
        childType?: string;
    }
    /**
    This class is used as a base class from which to derive Models used in Trees.

    */
    export class TreeModel extends Ext.data.Model {
    /**
     
    */
        constructor(data: Ext.data.TreeModelConfig, session: Ext.data.TreeModelConfig);
    /**
    Retrieves the first direct child of this container which matches the passed selector or component. 
    */
        child(selector?: string|Ext.Component):any;
    /**
    Retrieves the first descendant of this container which matches the passed selector. 
    */
        down(selector?: string|Ext.Component):any;
    /**
    Retrieves all descendant components which match the passed selector. 
    */
        query(selector?: string):Ext.Component[];
    /**
    Retrieves all descendant components which match the passed function. 
    */
        queryBy(fn: Function, scope?: any):Ext.Component[];
    /**
    Finds a component at any level under this container matching the id/itemId. 
    */
        queryById(id: string):Ext.Component;
    /**
    Traverses the tree rooted at this node in post-order mode, calling the passed function on the nodes at each level. 
    */
        visitPostOrder(selector: any, fn: (node: any) => any, scope?: any, extraArgs?: any[]):void;
    /**
    Traverses the tree rooted at this node in pre-order mode, calling the passed function on the nodes at each level. 
    */
        visitPreOrder(selector: any, fn: (node: any) => any, scope?: any, extraArgs?: any[]):void;
    }
    interface TreeStoreConfig extends Ext.data.NodeStoreConfig {
    /**
    Remove previously existing child nodes before loading. 
    */
        clearOnLoad?: boolean;
    /**
    The default root id. 
    */
        defaultRootId?: string;
    /**
     
    */
        defaultRootProperty?: string;
    /**
    The default root text (if not specified)/ 
    */
        defaultRootText?: string;
    /**
    The order in which to prioritize how filters are applied to nodes. 
    */
        filterer?: string;
    /**
    Set to true to prevent child nodes from being loaded until the the node is
expanded or loaded explicitly. 
    */
        lazyFill?: boolean;
    /**
    The name of the parameter sent to the server which contains the identifier of the node. 
    */
        nodeParam?: string;
    /**
    This config allows node data to be returned from the server in linear format without having to structure it into chil
    */
        parentIdProperty?: string;
    /**
    The root node for this store. 
    */
        root?: any;
    }
    /**
    The TreeStore is a store implementation that owns the root node of
a tree, and provides methods to load either local 
    */
    export class TreeStore extends Ext.data.NodeStore {
    /**
    true in this class to identify an object as an instantiated TreeStore, or subclass thereof. 
    */
        isTreeStore: boolean;
    /**
    Creates the store. 
    */
        constructor(config: Ext.data.TreeStoreConfig);
    /**
    Finds the first matching node in the tree by a specific field value regardless of visibility
due to collapsed states;
    */
        findNode(fieldName: string, value: string|RegExp, anyMatch?: boolean, caseSensitive?: boolean, exactMatch?: boolean):Ext.data.NodeInterface;
    /**
    Returns the value of clearOnLoad. 
    */
        getClearOnLoad():boolean;
    /**
    Returns the value of defaultRootId. 
    */
        getDefaultRootId():string;
    /**
    Returns the value of defaultRootProperty. 
    */
        getDefaultRootProperty():string;
    /**
    Returns the value of defaultRootText. 
    */
        getDefaultRootText():string;
    /**
    Returns the record node by id regardless of visibility due to collapsed states;
all nodes present in the tree structu
    */
        getNodeById(id: string):Ext.data.NodeInterface;
    /**
    Returns the value of nodeParam. 
    */
        getNodeParam():string;
    /**
    Returns the value of parentIdProperty. 
    */
        getParentIdProperty():string;
    /**
    Returns the value of root. 
    */
        getRoot():any;
    /**
    Returns the root node for this tree. 
    */
        getRootNode():Ext.data.NodeInterface;
    /**
    Sets the value of clearOnLoad. 
    */
        setClearOnLoad(clearOnLoad: boolean):void;
    /**
    Sets the value of defaultRootId. 
    */
        setDefaultRootId(defaultRootId: string):void;
    /**
    Sets the value of defaultRootProperty. 
    */
        setDefaultRootProperty(defaultRootProperty: string):void;
    /**
    Sets the value of defaultRootText. 
    */
        setDefaultRootText(defaultRootText: string):void;
    /**
    Sets the value of nodeParam. 
    */
        setNodeParam(nodeParam: string):void;
    /**
    Sets the value of parentIdProperty. 
    */
        setParentIdProperty(parentIdProperty: string):void;
    /**
    Sets the value of root. 
    */
        setRoot(root: any):void;
    /**
    Sets the root node for this store. 
    */
        setRootNode(root: any):Ext.data.NodeInterface;
    }
    /**
     
    */
    export class Types {
    /**
    This data type means that no conversion is applied to the raw data before it is placed into a Record.

    */
        static AUTO: any;
    /**
    This data type means that the raw data is converted into a boolean before it is placed into
a Record. 
    */
        static BOOL: any;
    /**
    This data type means that the raw data is converted into a boolean before it is placed into
a Record. 
    */
        static BOOLEAN: any;
    /**
    This data type means that the raw data is converted into a Date before it is placed into a Record. 
    */
        static DATE: any;
    /**
    This data type means that the raw data is converted into a number before it is placed into a Record. 
    */
        static FLOAT: any;
    /**
    This data type means that the raw data is converted into an integer before it is placed into a Record. 
    */
        static INT: any;
    /**
    This data type means that the raw data is converted into an integer before it is placed into a Record. 
    */
        static INTEGER: any;
    /**
    This data type means that the raw data is converted into a number before it is placed into a Record. 
    */
        static NUMBER: any;
    /**
    This data type means that the raw data is converted into a String before it is placed into a Record.

    */
        static STRING: any;
    /**
    A regular expression for stripping non-numeric characters from a numeric value. 
    */
        static stripRe: RegExp;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface ValidationConfig extends Ext.data.ModelConfig {
    }
    /**
    This class is used to hold validation errors for a record. 
    */
    export class Validation extends Ext.data.Model {
    /**
    The associated record for this validation instance.

    */
        record: Ext.data.Model;
    /**
     
    */
        constructor(data: Ext.data.ValidationConfig, session: Ext.data.ValidationConfig);
    }
    interface XmlStoreConfig extends Ext.data.StoreConfig {
    }
    /**
    Small helper class to make creating Ext.data.Stores from XML data easier. 
    */
    export class XmlStore extends Ext.data.Store {
    /**
    Creates the store. 
    */
        constructor(config: Ext.data.XmlStoreConfig);
    }
}
declare module Ext.data.amf {
    interface EncoderConfig {
    }
    /**
    This class serializes data in the Action Message Format (AMF) format. 
    */
    export class Encoder extends Ext.Base {
    /**
    The constructed byte array. 
    */
        bytes: any[];
    /**
    Creates new Encoder. 
    */
        constructor(config: Ext.data.amf.EncoderConfig);
    /**
    Sets the functions that will correctly serialize for the relevant
protocol version. 
    */
        applyFormat(protocol_version: number):void;
    /**
    Reset all class states and starts a new empty array for encoding data. 
    */
        clear():void;
    /**
    Convert a UTF 16 char to a UTF 8 char 
    */
        encodeUtf8Char(c: number):any[];
    /**
    Encode 16- or 32-bit integers into big-endian (network order) bytes 
    */
        encodeXInt(value: number, byte_count: number):any[];
    /**
    Returns the value of format. 
    */
        getFormat():number;
    /**
    Tries to determine if an object is an XML document 
    */
        isXmlDocument(item: any):boolean;
    /**
    Sets the value of format. 
    */
        setFormat(format: number):void;
    /**
    Writes a key-value pair in AMF0 format. 
    */
        write0ObjectProperty(key: string, value: any):void;
    /**
    Writes a short UTF8 string preceded with a 16-bit length. 
    */
        write0ShortUtf8String(str: string):void;
    /**
    Writes a strict-array in AMF0 format. 
    */
        write0StrictArray(arr: any[]):void;
    /**
    Write a byte array in AMF3 format. 
    */
        write3ByteArray(arr: any[]):void;
    /**
    Writes an Legacy XMLDocument (ActionScript Legacy XML object) in AMF3
format. 
    */
        write3XmlDocument(xml: any):void;
    /**
    Writes an AMF packet to the byte array 
    */
        writeAmfPacket(headers: any[], messages: any[]):void;
    /**
    Write the appropriate data items to the byte array. 
    */
        writeObject(item: any):void;
    }
    /**
    This class represents an Action Message Format (AMF) Packet. 
    */
    export class Packet extends Ext.Base {
    /**
    The decoded headers. 
    */
        headers: any[];
    /**
    The decoded messages. 
    */
        messages: any[];
    /**
    The AMF version number (0 or 3) 
    */
        version: number;
    /**
    Decodes an AMF btye array and sets the decoded data as the
Packet's version, headers, and messages properties 
    */
        decode(byteArray: any[]):Ext.data.amf.Packet;
    /**
    Decodes an AMF3 byte array and that has one value and returns it. 
    */
        decodeValue(byteArray: any[]):any;
    }
    interface ProxyConfig extends Ext.data.proxy.AjaxConfig {
    }
    /**
    The AMF Proxy is an Ajax Proxy that requests
binary data from a remote server and parses it into records using an
AMF
    */
    export class Proxy extends Ext.data.proxy.Ajax {
    /**
    Note that if this HttpProxy is being used by a Store, then the Store's call to
load will override any specified callb
    */
        constructor(config?: Ext.data.amf.ProxyConfig);
    }
    interface ReaderConfig extends Ext.data.reader.JsonConfig {
    /**
    AMF Packets can contain multiple messages. 
    */
        messageIndex?: number;
    }
    /**
    The AMF Reader is used by an AMF Proxy to read
records from a server response that contains binary data in either AMF
    */
    export class Reader extends Ext.data.reader.Json {
    /**
    Creates new Reader. 
    */
        constructor(config?: Ext.data.amf.ReaderConfig);
    }
    interface RemotingMessageConfig {
    }
    /**
    Represents a remote call to be sent to the server.

    */
    export class RemotingMessage extends Ext.Base {
    /**
    typically an array of parameters to pass to a method call 
    */
        body: any[];
    /**
    
identifies the calling client.



    */
        clientID: string;
    /**
    the service destination on the server 
    */
        destination: string;
    /**
    the headers to attach to the message. 
    */
        headers: any;
    /**
    message identifier 
    */
        messageId: string;
    /**
    the method name to call 
    */
        operation: string;
    /**
    should be empty for security purposes 
    */
        source: any[];
    /**
    how long the message is still valid for passing 
    */
        timeToLive: number;
    /**
    when the message was created 
    */
        timestamp: number;
    /**
    Creates new message. 
    */
        constructor(config: Ext.data.amf.RemotingMessageConfig);
    /**
    Returns an AMFX encoded version of the message. 
    */
        encodeMessage():void;
    /**
    Returns the value of $flexType. 
    */
        get$flexType():string;
    /**
    Sets the value of $flexType. 
    */
        set$flexType($flexType: string):void;
    }
    /**
    This class parses an XML-based AMFX message and returns the deserialized
objects. 
    */
    export class XmlDecoder extends Ext.Base {
    /**
    Creates new encoder. 
    */
        constructor(config: any);
    /**
    Clears the accumulated data and reference tables 
    */
        clear():void;
    /**
    Reads and returns a decoded AMFX packet. 
    */
        readAmfxMessage(xml: string):any;
    /**
    Parses and returns an AMFX array. 
    */
        readArray(node: any):any[];
    /**
    Parses and returns an AMFX dictionary. 
    */
        readDictionary(node: any):any;
    /**
    Parses and returns an AMFX object. 
    */
        readObject(node: any):any;
    /**
    Parses and return an object / array / dictionary / date from reference 
    */
        readObjectRef(node: any):any;
    /**
    Reads a string or string reference and return the value 
    */
        readString(node: any):string;
    /**
    Parses and returns an ordered list of trait names 
    */
        readTraits(node: any):any[];
    /**
    Parses an HTML element returning the appropriate JavaScript value from the AMFX data. 
    */
        readValue(node: HTMLElement):any;
    /**
    Accepts Flex-style UID and decodes the number in the first four bytes (8 hex digits) of data. 
    */
        decodeTidFromFlexUID(messageId: string):number;
    /**
    Deserializes an AMF3 binary object from a byte array 
    */
        readAMF3Value(bytes: any[]):any;
    /**
    parses a node containing a byte array in hexadecimal format, returning the reconstructed array. 
    */
        readByteArray(node: any):any[];
    }
    /**
    This class serializes data in the Action Message Format XML (AMFX) format. 
    */
    export class XmlEncoder extends Ext.Base {
    /**
    The output string 
    */
        body: string;
    /**
    Creates new encoder. 
    */
        constructor(config: any);
    /**
    Clears the accumulated data, starting with an empty string 
    */
        clear():void;
    /**
    Encodes an AMFX remoting message with the AMFX envelope. 
    */
        encodeAmfxRemotingPacket(message: Ext.data.amf.RemotingMessage):void;
    /**
    Encodes an array, marking it as an ECMA array if it has associative (non-ordinal) indices 
    */
        encodeArray(array: any[]):void;
    /**
    Returns an encoded boolean 
    */
        encodeBoolean(val: boolean):void;
    /**
    Encodes a byte arrat in AMFX format 
    */
        encodeByteArray(array: any[]):void;
    /**
    Encode a date 
    */
        encodeDate(date: Date):void;
    /**
    Returns an encoded double 
    */
        encodeDouble(num: number):void;
    /**
    Encodes a generic object into AMFX format. 
    */
        encodeGenericObject(obj: any):string;
    /**
    Returns an encoded int 
    */
        encodeInt(num: number):void;
    /**
    Returns the encoding for null 
    */
        encodeNull():void;
    /**
    Returns an encoded number. 
    */
        encodeNumber(num: number):void;
    /**
    encode the appropriate data item. 
    */
        encodeObject(item: any):string;
    /**
    Returns an encoded string 
    */
        encodeString(str: string):void;
    /**
    Returns the encoding for undefined (which is the same as the encoding for null) 
    */
        encodeUndefined():void;
    /**
    Encodes an xml document into a CDATA section 
    */
        encodeXml(xml: any):void;
    /**
    Tries to determine if an object is an XML document 
    */
        isXmlDocument(item: any):boolean;
    /**
    Writes an AMFX remoting message with the AMFX envelope to the string. 
    */
        writeAmfxRemotingPacket(message: Ext.data.amf.RemotingMessage):void;
    /**
    Writes an array to the string, marking it as an ECMA array if it has associative (non-ordinal) indices 
    */
        writeArray(array: any[]):void;
    /**
    Writes a boolean value to the string 
    */
        writeBoolean(val: boolean):void;
    /**
    Writes an AMFX byte array to the string. 
    */
        writeByteArray(array: any[]):void;
    /**
    Write a date to the string 
    */
        writeDate(date: Date):void;
    /**
    Writes a double tag with the content. 
    */
        writeDouble(num: number):void;
    /**
    Writes a generic object to the string. 
    */
        writeGenericObject(obj: any):void;
    /**
    Writes a int tag with the content. 
    */
        writeInt(num: number):void;
    /**
    Writes the null value to the string 
    */
        writeNull():void;
    /**
    Writes a number, deciding if to use int or double as the tag 
    */
        writeNumber(num: number):void;
    /**
    Writes the appropriate data item to the string. 
    */
        writeObject(item: any):void;
    /**
    Writes a string tag with the string content. 
    */
        writeString(str: string):void;
    /**
    Writes the undefined value to the string 
    */
        writeUndefined():void;
    /**
    Write an XML document to the string 
    */
        writeXml(xml: any):void;
    /**
    Utility function to generate a flex-friendly UID 
    */
        generateFlexUID(id: number):string;
    /**
    Returns a random integer between the specified range (inclusive) 
    */
        randomInt(from: number, to: number):number;
    }
}
declare module Ext.data.field {
    interface BooleanConfig extends Ext.data.field.FieldConfig {
    }
    /**
    

    */
    export class Boolean extends Ext.data.field.Field {
    /**
    Values matching this regular expression are considered true. 
    */
        trueRe: RegExp;
    /**
     
    */
        constructor(config: Ext.data.field.BooleanConfig);
    }
    interface DateConfig extends Ext.data.field.FieldConfig {
    /**
    Serves as a default for the dateReadFormat and dateWriteFormat config options. 
    */
        dateFormat?: string;
    /**
    Used when converting received data into a Date when the type is specified as "date". 
    */
        dateReadFormat?: string;
    /**
    Provides a custom format when serializing dates with a Ext.data.writer.Writer. 
    */
        dateWriteFormat?: string;
    }
    /**
    This class provides Date specific processing for fields. 
    */
    export class Date extends Ext.data.field.Field {
    /**
     
    */
        constructor(config: Ext.data.field.DateConfig);
    /**
    Gets the dateFormat for this field. 
    */
        getDateFormat():string;
    /**
    Gets the dateReadFormat for this field. 
    */
        getDateReadFormat():string;
    /**
    Gets the dateWriteFormat for this field. 
    */
        getDateWriteFormat():string;
    }
    interface FieldConfig {
    /**
    Use when converting received data into a &lt;code&gt;int&lt;/code&gt;,
&lt;code&gt;float&lt;/code&gt;, &lt;code&gt;bo
    */
        allowNull?: boolean;
    /**
    This config defines a simple field calculation function. 
    */
        calculate?: Function;
    /**
    If specified this config overrides the convert method. 
    */
        convert?: Function;
    /**
    A critical field is a field that must always be sent to the server even if it has
not changed. 
    */
        critical?: boolean;
    /**
    The default value used when the creating an instance from a raw data object,
and the property referenced by the mappi
    */
        defaultValue?: any;
    /**
    The field name or names within the Model on which the value
of this field depends, and from which a new value may be 
    */
        depends?: string|string[];
    /**
    (Optional) A path expression for use by the Ext.data.reader.Reader implementation that is creating the
Model to extra
    */
        mapping?: string|number|Function;
    /**
    The name by which the field is referenced within the Model. 
    */
        name?: string;
    /**
    False to exclude this field from the Ext.data.Model.modified fields in a
record. 
    */
        persist?: boolean;
    /**
    The name of the entity referenced by this field. 
    */
        reference?: any;
    /**
    A function which converts the Model's value for this Field into a form which can be used by whatever Writer
is being 
    */
        serialize?: Function;
    /**
    A function which converts a Field's value to a comparable value in order to ensure
correct sort ordering. 
    */
        sortType?: Function|string;
    /**
    true if the value of this field is unique amongst all instances. 
    */
        unique?: boolean;
    /**
    An array of validators for this field. 
    */
        validators?: any[];
    }
    /**
    Fields are used to define the members of a Model. 
    */
    export class Field extends Ext.Base {
    /**
    This property is true if this field has a calculate
method or a convert method that operates on the entire
record as 
    */
        calculated: boolean;
    /**
    The default message to present for an invalid field. 
    */
        defaultInvalidMessage: string;
    /**
    The class (derived from Ext.data.Model) that defined this field. 
    */
        definedBy: Ext.Class;
    /**
    If this property is specified by the target class of this mixin its properties are
used to configure the created Ext.
    */
        factoryConfig: any;
    /**
    This property is set to true if this is an id
field. 
    */
        identifier: boolean;
    /**
    The position of this field in the Ext.data.Model in which it was defined.

    */
        ordinal: number;
    /**
    A regular expression for stripping non-numeric characters from a numeric value. 
    */
        stripRe: RegExp;
    /**
     
    */
        constructor(config: Ext.data.field.FieldConfig);
    /**
    Compares two values to retrieve their relative position in sort order, taking into account
any sortType. 
    */
        collate(value1: any, value2: any):number;
    /**
    Compares two values to retrieve their relative position in sort order. 
    */
        compare(value1: any, value2: any):number;
    /**
    A function which converts the value provided by the Reader into the value that will
be stored in the record. 
    */
        convert(value: any, record: Ext.data.Model):any;
    /**
    Gets allowBlank for this field. 
    */
        getAllowBlank():boolean;
    /**
    Gets allowNull for this field. 
    */
        getAllowNull():boolean;
    /**
    Gets converter for this field. 
    */
        getConvert():Function;
    /**
    Gets the defaultValue for this field. 
    */
        getDefaultValue():any;
    /**
    Gets the depends for this field. 
    */
        getDepends():string[];
    /**
    Get the mapping for this field. 
    */
        getMapping():any;
    /**
    Gets the persist for this field. 
    */
        getPersist():boolean;
    /**
    Gets the sortDir for this field. 
    */
        getSortDir():string;
    /**
    Gets the sortType for this field. 
    */
        getSortType():Function;
    /**
    Gets a string representation of the type of this field. 
    */
        getType():string;
    /**
    Checks if this field has a mapping applied. 
    */
        hasMapping():boolean;
    /**
    Tests whether two values are equal based on this field type. 
    */
        isEqual(value1: any, value2: any):boolean;
    /**
    A function which converts the Model's value for this Field into a form which can be used by whatever Writer
is being 
    */
        serialize(value: any, record: Ext.data.Model):string;
    /**
    Validates the passed value for this field. 
    */
        validate(value: any, separator?: string, errors?: Ext.data.ErrorCollection):boolean|string;
    }
    interface IntegerConfig extends Ext.data.field.FieldConfig {
    }
    /**
    

    */
    export class Integer extends Ext.data.field.Field {
    /**
     
    */
        constructor(config: Ext.data.field.IntegerConfig);
    }
    interface NumberConfig extends Ext.data.field.IntegerConfig {
    }
    /**
    

    */
    export class Number extends Ext.data.field.Integer {
    /**
     
    */
        constructor(config: Ext.data.field.NumberConfig);
    }
    interface StringConfig extends Ext.data.field.FieldConfig {
    }
    /**
    

    */
    export class String extends Ext.data.field.Field {
    /**
     
    */
        constructor(config: Ext.data.field.StringConfig);
    }
}
declare module Ext.data.flash {
    /**
    Simulates an XMLHttpRequest object's methods and properties as returned
form the flash polyfill plugin. 
    */
    export class BinaryXhr extends Ext.Base {
    /**
    The connection's simulated readyState. 
    */
        readyState: number;
    /**
    The binary bytes returned.

    */
        responseBytes: any[];
    /**
    Connection status code returned by flash or the server. 
    */
        status: number;
    /**
    Status text (if any) returned by flash or the server. 
    */
        statusText: string;
    /**
    Creates a new instance of BinaryXhr. 
    */
        constructor(config: any);
    /**
    Abort this connection. 
    */
        abort():void;
    /**
    As in XMLHttpRequest. 
    */
        getAllResponseHeaders():void;
    /**
    As in XMLHttpRequest. 
    */
        getResponseHeader(header: any):void;
    /**
    As in XMLHttpRequest. 
    */
        onreadystatechange():void;
    /**
    As in XMLHttpRequest. 
    */
        open(method: any, url: any, async: any, user: any, password: any):void;
    /**
    As in XMLHttpRequest. 
    */
        overrideMimeType(mimeType: any):void;
    /**
    Initiate the request. 
    */
        send(body: any[]):void;
    /**
    As in XMLHttpRequest. 
    */
        setRequestHeader(header: any, value: any):void;
    }
}
declare module Ext.data.identifier {
    interface GeneratorConfig {
    /**
    The id for this generator.

    */
        id?: string;
    }
    /**
    This class is a base for all id generators. 
    */
    export class Generator extends Ext.Base {
    /**
    this is used by Factoryable 
    */
        factoryConfig: any;
    /**
    true in this class to identify an object as an instantiated IdGenerator, or subclass thereof. 
    */
        isGenerator: boolean;
    /**
    Initializes a new instance. 
    */
        constructor(config?: Ext.data.identifier.GeneratorConfig);
    /**
    Generates and returns the next id. 
    */
        generate():number|string;
    /**
    Returns the value of id. 
    */
        getId():string;
    /**
    Sets the value of id. 
    */
        setId(id: string):void;
    }
    interface NegativeConfig extends Ext.data.identifier.SequentialConfig {
    }
    /**
    This class id generator produces successive negative numbers for id's. 
    */
    export class Negative extends Ext.data.identifier.Sequential {
    /**
    Initializes a new instance. 
    */
        constructor(config?: Ext.data.identifier.NegativeConfig);
    }
    interface SequentialConfig extends Ext.data.identifier.GeneratorConfig {
    /**
    The number by which to adjust the seed after for the next sequential id. 
    */
        increment?: number;
    /**
    The string to place in front of the sequential number for each generated id.

    */
        prefix?: string;
    /**
    The number at which to start generating sequential id's. 
    */
        seed?: number;
    }
    /**
    This class is a sequential id generator. 
    */
    export class Sequential extends Ext.data.identifier.Generator {
    /**
    Initializes a new instance. 
    */
        constructor(config?: Ext.data.identifier.SequentialConfig);
    /**
    Returns the value of increment. 
    */
        getIncrement():number;
    /**
    Returns the value of prefix. 
    */
        getPrefix():string;
    /**
    Returns the value of seed. 
    */
        getSeed():number;
    /**
    Sets the value of increment. 
    */
        setIncrement(increment: number):void;
    /**
    Sets the value of prefix. 
    */
        setPrefix(prefix: string):void;
    /**
    Sets the value of seed. 
    */
        setSeed(seed: number):void;
    }
    interface UuidConfig extends Ext.data.identifier.GeneratorConfig {
    /**
    A clock value to help avoid duplicates. 
    */
        clockSeq?: number;
    /**
    This value is a 48-bit number. 
    */
        salt?: any;
    /**
    When created, this value is a 60-bit number. 
    */
        timestamp?: any;
    /**
    The Version of UUID. 
    */
        version?: number;
    }
    /**
    This class generates UUID's according to RFC 4122. 
    */
    export class Uuid extends Ext.data.identifier.Generator {
    /**
    Initializes a new instance. 
    */
        constructor(config?: Ext.data.identifier.UuidConfig);
    /**
    Reconfigures this generator given new config properties. 
    */
        reconfigure(config: any):void;
    }
}
declare module Ext.data.matrix {
    /**
    This class manages a many-to-many matrix for a Session.

    */
    export class Matrix extends Ext.Base {
    /**
    The ManyToMany association for this matrix.

    */
        association: Ext.data.schema.ManyToMany;
    /**
    The Session owning this matrix.

    */
        session: Ext.data.Session;
    /**
    data: [
         [ leftId, rightId, -1/0/1 ],   // === DELETED/UNMODIFIED/ADDED
          ...
    */
        constructor(session: any, matrix: any);
    }
    /**
    This class manages one side of a Matrix.

    */
    export class Side extends Ext.Base {
    /**
    Either 0 or 1 which is the index of our id value in an association entry.

    */
        index: number;
    /**
    Reference to the opposite side of the matrix.

    */
        inverse: Ext.data.matrix.Side;
    /**
    

    */
        matrix: Ext.data.matrix.Matrix;
    /**
    The role for this side of the matrix.

    */
        role: Ext.data.schema.Role;
    /**
    Keyed by the id for this side of the matrix to yield a Slice. 
    */
        slices: any;
    }
    /**
    This class manages one side of a Matrix.

    */
    export class Slice extends Ext.Base {
    /**
    The id of the interested entity. 
    */
        id: string|number;
    /**
     
    */
        members: any;
    /**
    The side of the matrix to which this slice belongs.

    */
        side: Ext.data.matrix.Side;
    /**
     
    */
        constructor(side: any, id: any);
    }
}
declare module Ext.data.operation {
    interface CreateConfig extends Ext.data.operation.OperationConfig {
    }
    /**
    Enacpsulates a create operation as performed by a proxy. 
    */
    export class Create extends Ext.data.operation.Operation {
    /**
    Creates new Operation object. 
    */
        constructor(config?: Ext.data.operation.CreateConfig);
    /**
    Returns the value of recordCreator. 
    */
        getRecordCreator():any;
    /**
    Sets the value of recordCreator. 
    */
        setRecordCreator(recordCreator: any):void;
    }
    interface DestroyConfig extends Ext.data.operation.OperationConfig {
    }
    /**
    Encapsulates a destroy operation as performed by a proxy. 
    */
    export class Destroy extends Ext.data.operation.Operation {
    /**
    Creates new Operation object. 
    */
        constructor(config?: Ext.data.operation.DestroyConfig);
    }
    interface OperationConfig {
    /**
    The batch for this operation, if applicable

    */
        batch?: Ext.data.Batch;
    /**
    Function to execute when operation completed. 
    */
        callback?: Function;
    /**
    The id of the operation.

    */
        id?: any;
    /**
    Parameters to pass along with the request when performing the operation.

    */
        params?: any;
    /**
    The proxy for this operation

    */
        proxy?: Ext.data.proxy.Proxy;
    /**
    The records associated with this operation. 
    */
        records?: Ext.data.Model[];
    /**
    The request for this operation.

    */
        request?: Ext.data.Request;
    /**
    The ResultSet for this operation.

    */
        resultSet?: Ext.data.ResultSet;
    /**
    Scope for the callback function.

    */
        scope?: any;
    /**
    True if this Operation is to be executed synchronously. 
    */
        synchronous?: boolean;
    /**
    The url for this operation. 
    */
        url?: string;
    }
    /**
    Represents a read or write operation performed by a Proxy. 
    */
    export class Operation extends Ext.Base {
    /**
    Creates new Operation object. 
    */
        constructor(config?: Ext.data.operation.OperationConfig);
    /**
    Aborts the processing of this operation on the proxy. 
    */
        abort():void;
    /**
    Checks whether this operation should cause writing to occur. 
    */
        allowWrite():boolean;
    /**
    Process records in the operation after the response is successful and the result
set is parsed correctly. 
    */
        doProcess(resultSet: Ext.data.ResultSet, request: Ext.data.Request, response: any):void;
    /**
    Returns the value of batch. 
    */
        getBatch():Ext.data.Batch;
    /**
    Returns the value of callback. 
    */
        getCallback():Function;
    /**
    Returns the error string or object that was set using setException 
    */
        getError():any;
    /**
    Returns the value of id. 
    */
        getId():any;
    /**
    Returns the value of params. 
    */
        getParams():any;
    /**
    Returns the value of proxy. 
    */
        getProxy():Ext.data.proxy.Proxy;
    /**
    Returns the records associated with this operation. 
    */
        getRecords():Ext.data.Model[];
    /**
    Returns the value of request. 
    */
        getRequest():Ext.data.Request;
    /**
    Returns the value of resultSet. 
    */
        getResultSet():Ext.data.ResultSet;
    /**
    Returns the value of scope. 
    */
        getScope():any;
    /**
    Returns the value of synchronous. 
    */
        getSynchronous():boolean;
    /**
    Returns the value of url. 
    */
        getUrl():string;
    /**
    Returns true if this Operation encountered an exception (see also getError) 
    */
        hasException():boolean;
    /**
    Returns true if the Operation has been completed 
    */
        isComplete():boolean;
    /**
    Returns true if the Operation has been started but has not yet completed. 
    */
        isRunning():boolean;
    /**
    Returns true if the Operation has been started. 
    */
        isStarted():boolean;
    /**
    Sets the value of batch. 
    */
        setBatch(batch: Ext.data.Batch):void;
    /**
    Sets the value of callback. 
    */
        setCallback(callback: Function):void;
    /**
    Marks the Operation as completed. 
    */
        setCompleted():void;
    /**
    Marks the Operation as having experienced an exception. 
    */
        setException(error?: any):void;
    /**
    Sets the value of id. 
    */
        setId(id: any):void;
    /**
    Sets the value of params. 
    */
        setParams(params: any):void;
    /**
    Sets the value of proxy. 
    */
        setProxy(proxy: Ext.data.proxy.Proxy):void;
    /**
    Sets the value of records. 
    */
        setRecords(records: Ext.data.Model[]):void;
    /**
    Sets the value of request. 
    */
        setRequest(request: Ext.data.Request):void;
    /**
    Sets the value of resultSet. 
    */
        setResultSet(resultSet: Ext.data.ResultSet):void;
    /**
    Sets the value of scope. 
    */
        setScope(scope: any):void;
    /**
    Marks the Operation as started. 
    */
        setStarted():void;
    /**
    Marks the Operation as successful. 
    */
        setSuccessful(complete?: boolean):void;
    /**
    Sets the value of synchronous. 
    */
        setSynchronous(synchronous: boolean):void;
    /**
    Sets the value of url. 
    */
        setUrl(url: string):void;
    /**
    Returns true if the Operation has completed and was successful 
    */
        wasSuccessful():boolean;
    }
    interface ReadConfig extends Ext.data.operation.OperationConfig {
    /**
    Optional array of filter objects. 
    */
        filters?: Ext.util.Filter[];
    /**
    Optional grouping configuration. 
    */
        grouper?: Ext.util.Grouper;
    /**
    The number of records to load. 
    */
        limit?: number;
    /**
    The page for this operation.

    */
        page?: number;
    /**
    Optional array of sorter objects. 
    */
        sorters?: Ext.util.Sorter[];
    /**
    The start index (offset), used in paging when running a 'read' action.

    */
        start?: number;
    }
    /**
    Enacpsulates a read operation as performed by a proxy. 
    */
    export class Read extends Ext.data.operation.Operation {
    /**
    Creates new Operation object. 
    */
        constructor(config?: Ext.data.operation.ReadConfig);
    /**
    Returns the value of filters. 
    */
        getFilters():Ext.util.Filter[];
    /**
    Returns the value of grouper. 
    */
        getGrouper():Ext.util.Grouper;
    /**
    Returns the value of limit. 
    */
        getLimit():number;
    /**
    Returns the value of page. 
    */
        getPage():number;
    /**
    Returns the value of sorters. 
    */
        getSorters():Ext.util.Sorter[];
    /**
    Returns the value of start. 
    */
        getStart():number;
    /**
    Sets the value of filters. 
    */
        setFilters(filters: Ext.util.Filter[]):void;
    /**
    Sets the value of grouper. 
    */
        setGrouper(grouper: Ext.util.Grouper):void;
    /**
    Sets the value of limit. 
    */
        setLimit(limit: number):void;
    /**
    Sets the value of page. 
    */
        setPage(page: number):void;
    /**
    Sets the value of sorters. 
    */
        setSorters(sorters: Ext.util.Sorter[]):void;
    /**
    Sets the value of start. 
    */
        setStart(start: number):void;
    }
    interface UpdateConfig extends Ext.data.operation.OperationConfig {
    }
    /**
    Enacpsulates a update operation as performed by a proxy. 
    */
    export class Update extends Ext.data.operation.Operation {
    /**
    Creates new Operation object. 
    */
        constructor(config?: Ext.data.operation.UpdateConfig);
    /**
    Returns the value of recordCreator. 
    */
        getRecordCreator():any;
    /**
    Sets the value of recordCreator. 
    */
        setRecordCreator(recordCreator: any):void;
    }
}
declare module Ext.data.proxy {
    interface AjaxConfig extends Ext.data.proxy.ServerConfig {
    /**
    Mapping of action name to HTTP request method. 
    */
        actionMethods?: any;
    /**
    True to request binary data from the server. 
    */
        binary?: boolean;
    /**
    Any headers to add to the Ajax request. 
    */
        headers?: any;
    /**
    true to have any request parameters sent as jsonData
where they can be parsed from the raw request. 
    */
        paramsAsJson?: boolean;
    /**
    Most oData feeds require basic HTTP authentication. 
    */
        password?: string;
    /**
    Set this to false to not send the default Xhr header (X-Requested-With) with every request. 
    */
        useDefaultXhrHeader?: boolean;
    /**
    Most oData feeds require basic HTTP authentication. 
    */
        username?: string;
    /**
    This configuration is sometimes necessary when using cross-origin resource sharing. 
    */
        withCredentials?: boolean;
    }
    /**
    AjaxProxy is one of the most widely-used ways of getting data into your application. 
    */
    export class Ajax extends Ext.data.proxy.Server {
    /**
    Note that if this HttpProxy is being used by a Store, then the Store's call to
load will override any specified callb
    */
        constructor(config?: Ext.data.proxy.AjaxConfig);
    /**
    Aborts a running request. 
    */
        abort(request?: Ext.data.Request):void;
    /**
    Returns the value of actionMethods. 
    */
        getActionMethods():any;
    /**
    Returns the value of binary. 
    */
        getBinary():boolean;
    /**
    Returns the value of headers. 
    */
        getHeaders():any;
    /**
    Returns the HTTP method name for a given request. 
    */
        getMethod(request: Ext.data.Request):string;
    /**
    Returns the value of paramsAsJson. 
    */
        getParamsAsJson():boolean;
    /**
    Returns the value of password. 
    */
        getPassword():string;
    /**
    Returns the value of useDefaultXhrHeader. 
    */
        getUseDefaultXhrHeader():boolean;
    /**
    Returns the value of username. 
    */
        getUsername():string;
    /**
    Returns the value of withCredentials. 
    */
        getWithCredentials():boolean;
    /**
    Sets the value of actionMethods. 
    */
        setActionMethods(actionMethods: any):void;
    /**
    Sets the value of binary. 
    */
        setBinary(binary: boolean):void;
    /**
    Sets the value of headers. 
    */
        setHeaders(headers: any):void;
    /**
    Sets the value of paramsAsJson. 
    */
        setParamsAsJson(paramsAsJson: boolean):void;
    /**
    Sets the value of password. 
    */
        setPassword(password: string):void;
    /**
    Sets the value of useDefaultXhrHeader. 
    */
        setUseDefaultXhrHeader(useDefaultXhrHeader: boolean):void;
    /**
    Sets the value of username. 
    */
        setUsername(username: string):void;
    /**
    Sets the value of withCredentials. 
    */
        setWithCredentials(withCredentials: boolean):void;
    }
    interface ClientConfig extends Ext.data.proxy.ProxyConfig {
    }
    /**
    Base class for any client-side storage. 
    */
    export class Client extends Ext.data.proxy.Proxy {
    /**
    Creates the Proxy 
    */
        constructor(config?: Ext.data.proxy.ClientConfig);
    /**
    Abstract function that must be implemented by each ClientProxy subclass. 
    */
        clear():void;
    }
    interface DirectConfig extends Ext.data.proxy.ServerConfig {
    /**
    Function to call when executing a request. 
    */
        directFn?: Function|string;
    /**
    Optional set of fixed parameters to send with every Proxy request, similar to
extraParams but available with all CRUD
    */
        metadata?: any;
    /**
    Defaults to undefined. 
    */
        paramOrder?: string|string[];
    /**
    Send parameters as a collection of named arguments. 
    */
        paramsAsHash?: boolean;
    }
    /**
    This class is used to send requests to the server using Ext.Direct. 
    */
    export class Direct extends Ext.data.proxy.Server {
    /**
    Creates the Proxy 
    */
        constructor(config?: Ext.data.proxy.DirectConfig);
    /**
    Template method to allow subclasses to specify how to get the response for the reader. 
    */
        extractResponseData(response: any):any;
    /**
    Returns the value of directFn. 
    */
        getDirectFn():Function|string;
    /**
    Returns the value of metadata. 
    */
        getMetadata():any;
    /**
    Returns the value of paramOrder. 
    */
        getParamOrder():string|string[];
    /**
    Returns the value of paramsAsHash. 
    */
        getParamsAsHash():boolean;
    /**
    Sets the value of directFn. 
    */
        setDirectFn(directFn: Function|string):void;
    /**
    Sets up an exception on the operation 
    */
        setException(operation: Ext.data.operation.Operation, response: any):void;
    /**
    Sets the value of metadata. 
    */
        setMetadata(metadata: any):void;
    /**
    Sets the value of paramOrder. 
    */
        setParamOrder(paramOrder: string|string[]):void;
    /**
    Sets the value of paramsAsHash. 
    */
        setParamsAsHash(paramsAsHash: boolean):void;
    }
    interface JsonPConfig extends Ext.data.proxy.ServerConfig {
    /**
    True to automatically append the request's params to the generated url. 
    */
        autoAppendParams?: boolean;
    /**
    See Ext.data.JsonP.callbackKey. 
    */
        callbackKey?: string;
    /**
    The HTTP parameter name to use when passing records to the server and the Json writer is not configured
to encode rec
    */
        recordParam?: string;
    }
    /**
    The JsonP proxy is useful when you need to load data from a domain other than the one your application is running on. 
    */
    export class JsonP extends Ext.data.proxy.Server {
    /**
    Creates the Proxy 
    */
        constructor(config?: Ext.data.proxy.JsonPConfig);
    /**
    Aborts a server request. 
    */
        abort(request?: Ext.data.Request):void;
    /**
    Encodes an array of records into a value suitable to be added to the request params as the recordParam parameter. 
    */
        encodeRecords(records: Ext.data.Model[]):any[];
    /**
    Returns the value of autoAppendParams. 
    */
        getAutoAppendParams():boolean;
    /**
    Returns the value of callbackKey. 
    */
        getCallbackKey():string;
    /**
    Returns the value of recordParam. 
    */
        getRecordParam():string;
    /**
    Sets the value of autoAppendParams. 
    */
        setAutoAppendParams(autoAppendParams: boolean):void;
    /**
    Sets the value of callbackKey. 
    */
        setCallbackKey(callbackKey: string):void;
    /**
    Sets the value of recordParam. 
    */
        setRecordParam(recordParam: string):void;
    }
    interface LocalStorageConfig extends Ext.data.proxy.WebStorageConfig {
    }
    /**
    The LocalStorageProxy uses the new HTML5 localStorage API to save Model data locally on the
client browser. 
    */
    export class LocalStorage extends Ext.data.proxy.WebStorage {
    /**
    Creates the proxy, throws an error if local storage is not supported in the current browser. 
    */
        constructor(config?: Ext.data.proxy.LocalStorageConfig);
    }
    interface MemoryConfig extends Ext.data.proxy.ClientConfig {
    /**
    Optional data to pass to configured Reader.

    */
        data?: any;
    /**
    Configure as true to enable this MemoryProxy to honour a read operation's start and limit options. 
    */
        enablePaging?: boolean;
    }
    /**
    In-memory proxy. 
    */
    export class Memory extends Ext.data.proxy.Client {
    /**
    Creates the Proxy 
    */
        constructor(config?: Ext.data.proxy.MemoryConfig);
    /**
    Returns the value of data. 
    */
        getData():any;
    /**
    Returns the value of enablePaging. 
    */
        getEnablePaging():boolean;
    /**
    Sets the value of data. 
    */
        setData(data: any):void;
    /**
    Sets the value of enablePaging. 
    */
        setEnablePaging(enablePaging: boolean):void;
    }
    interface ProxyConfig {
    /**
    True to batch actions of a particular type when synchronizing the store. 
    */
        batchActions?: boolean;
    /**
    Comma-separated ordering 'create', 'update' and 'destroy' actions when batching. 
    */
        batchOrder?: string;
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    /**
    The name of the Model to tie to this Proxy. 
    */
        model?: string|Ext.data.Model;
    /**
    The Ext.data.reader.Reader to use to decode the server's response or data read
from client. 
    */
        reader?: any;
    /**
    The Ext.data.writer.Writer to use to encode any request sent to the server or
saved to client. 
    */
        writer?: any;
    }
    /**
    Proxies are used by Stores to handle the loading and saving of Model
data. 
    */
    export class Proxy extends Ext.Base {
    /**
    If this property is specified by the target class of this mixin its properties are
used to configure the created Ext.
    */
        factoryConfig: any;
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
    true in this class to identify an object as an instantiated Proxy, or subclass thereof. 
    */
        isProxy: boolean;
    /**
    Identifies the proxy as (a)synchronous. 
    */
        isSynchronous: boolean;
    /**
    Creates the Proxy 
    */
        constructor(config?: Ext.data.proxy.ProxyConfig);
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Performs a batch of Operations, in the order specified by batchOrder. 
    */
        batch(options: any):Ext.data.Batch;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Performs the given destroy operation. 
    */
        erase(operation: Ext.data.operation.Operation):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Returns the value of batchActions. 
    */
        getBatchActions():boolean;
    /**
    Returns the value of batchOrder. 
    */
        getBatchOrder():string;
    /**
    Returns the value of model. 
    */
        getModel():string|Ext.data.Model;
    /**
    Returns the value of reader. 
    */
        getReader():any;
    /**
    Returns the value of writer. 
    */
        getWriter():any;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Performs the given read operation. 
    */
        read(operation: Ext.data.operation.Operation):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    Sets the value of batchActions. 
    */
        setBatchActions(batchActions: boolean):void;
    /**
    Sets the value of batchOrder. 
    */
        setBatchOrder(batchOrder: string):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Sets the value of model. 
    */
        setModel(model: string|Ext.data.Model):void;
    /**
    Sets the value of reader. 
    */
        setReader(reader: any):void;
    /**
    Sets the value of writer. 
    */
        setWriter(writer: any):void;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Performs the given update operation. 
    */
        update(operation: Ext.data.operation.Operation):void;
    }
    interface RestConfig extends Ext.data.proxy.AjaxConfig {
    /**
    True to automatically append the ID of a Model instance when performing a request based on that single instance. 
    */
        appendId?: boolean;
    /**
    Optional data format to send to the server when making any request (e.g. 
    */
        format?: string;
    }
    /**
    The Rest proxy is a specialization of the AjaxProxy which simply maps the four actions
(create, read, update and dest
    */
    export class Rest extends Ext.data.proxy.Ajax {
    /**
    Note that if this HttpProxy is being used by a Store, then the Store's call to
load will override any specified callb
    */
        constructor(config?: Ext.data.proxy.RestConfig);
    /**
    Returns the value of appendId. 
    */
        getAppendId():boolean;
    /**
    Returns the value of format. 
    */
        getFormat():string;
    /**
    Sets the value of appendId. 
    */
        setAppendId(appendId: boolean):void;
    /**
    Sets the value of format. 
    */
        setFormat(format: string):void;
    }
    interface ServerConfig extends Ext.data.proxy.ProxyConfig {
    /**
    Specific urls to call on CRUD action methods "create", "read", "update" and "destroy". 
    */
        api?: any;
    /**
    The name of the cache param added to the url when using noCache. 
    */
        cacheString?: string;
    /**
    The name of the direction parameter to send in a request. 
    */
        directionParam?: string;
    /**
    Extra parameters that will be included on every request. 
    */
        extraParams?: any;
    /**
    The name of the 'filter' parameter to send in a request. 
    */
        filterParam?: string;
    /**
    The name of the direction parameter to send in a request. 
    */
        groupDirectionParam?: string;
    /**
    The name of the 'group' parameter to send in a request. 
    */
        groupParam?: string;
    /**
    The name of the parameter which carries the id of the entity being operated upon. 
    */
        idParam?: string;
    /**
    The name of the 'limit' parameter to send in a request. 
    */
        limitParam?: string;
    /**
    Disable caching by adding a unique parameter name to the request. 
    */
        noCache?: boolean;
    /**
    The name of the 'page' parameter to send in a request. 
    */
        pageParam?: string;
    /**
    Enabling simpleGroupMode in conjunction with remoteGroup will only send one group property and a direction when a
rem
    */
        simpleGroupMode?: boolean;
    /**
    Enabling simpleSortMode in conjunction with remoteSort will only send one sort property and a direction when a
remote
    */
        simpleSortMode?: boolean;
    /**
    The name of the 'sort' parameter to send in a request. 
    */
        sortParam?: string;
    /**
    The name of the 'start' parameter to send in a request. 
    */
        startParam?: string;
    /**
    The number of milliseconds to wait for a response. 
    */
        timeout?: number;
    /**
    The URL from which to request the data object. 
    */
        url?: string;
    }
    /**
    ServerProxy is a superclass of JsonPProxy and AjaxProxy, and
would not usually be used directly.

    */
    export class Server extends Ext.data.proxy.Proxy {
    /**
    Creates the Proxy 
    */
        constructor(config?: Ext.data.proxy.ServerConfig);
    /**
    Optional callback function which can be used to clean up after a request has been completed. 
    */
        afterRequest(request: Ext.data.Request, success: boolean):void;
    /**
    Encode any values being sent to the server. 
    */
        applyEncoding(value: any[]):any;
    /**
    Creates an Request object from Operation. 
    */
        buildRequest(operation: Ext.data.operation.Operation):Ext.data.Request;
    /**
    Generates a url based on a given Ext.data.Request object. 
    */
        buildUrl(request: Ext.data.Request):string;
    /**
    In ServerProxy subclasses, the create, read, update and erase methods all
pass through to doRequest. 
    */
        doRequest(operation: Ext.data.operation.Operation, callback: Function, scope: any):void;
    /**
    Encodes the array of Ext.util.Filter objects into a string to be sent in the request url. 
    */
        encodeFilters(filters: Ext.util.Filter[]):string;
    /**
    Encodes the array of Ext.util.Sorter objects into a string to be sent in the request url. 
    */
        encodeSorters(sorters: Ext.util.Sorter[], preventArray?: boolean):string;
    /**
    Returns the value of api. 
    */
        getApi():any;
    /**
    Returns the value of cacheString. 
    */
        getCacheString():string;
    /**
    Returns the value of directionParam. 
    */
        getDirectionParam():string;
    /**
    Returns the value of extraParams. 
    */
        getExtraParams():any;
    /**
    Returns the value of filterParam. 
    */
        getFilterParam():string;
    /**
    Returns the value of groupDirectionParam. 
    */
        getGroupDirectionParam():string;
    /**
    Returns the value of groupParam. 
    */
        getGroupParam():string;
    /**
    Returns the value of idParam. 
    */
        getIdParam():string;
    /**
    Returns the value of limitParam. 
    */
        getLimitParam():string;
    /**
    Returns the value of noCache. 
    */
        getNoCache():boolean;
    /**
    Returns the value of pageParam. 
    */
        getPageParam():string;
    /**
    Returns the value of simpleGroupMode. 
    */
        getSimpleGroupMode():boolean;
    /**
    Returns the value of simpleSortMode. 
    */
        getSimpleSortMode():boolean;
    /**
    Returns the value of sortParam. 
    */
        getSortParam():string;
    /**
    Returns the value of startParam. 
    */
        getStartParam():string;
    /**
    Returns the value of timeout. 
    */
        getTimeout():number;
    /**
    Processes response, which may involve updating or committing records, each of which
will inform the owning stores and
    */
        processResponse(success: any, operation: any, request: any, response: any):void;
    /**
    Sets the value of api. 
    */
        setApi(api: any):void;
    /**
    Sets the value of cacheString. 
    */
        setCacheString(cacheString: string):void;
    /**
    Sets the value of directionParam. 
    */
        setDirectionParam(directionParam: string):void;
    /**
    Sets a value in the underlying extraParams. 
    */
        setExtraParam(name: string, value: any):void;
    /**
    Sets the value of extraParams. 
    */
        setExtraParams(extraParams: any):void;
    /**
    Sets the value of filterParam. 
    */
        setFilterParam(filterParam: string):void;
    /**
    Sets the value of groupDirectionParam. 
    */
        setGroupDirectionParam(groupDirectionParam: string):void;
    /**
    Sets the value of groupParam. 
    */
        setGroupParam(groupParam: string):void;
    /**
    Sets the value of idParam. 
    */
        setIdParam(idParam: string):void;
    /**
    Sets the value of limitParam. 
    */
        setLimitParam(limitParam: string):void;
    /**
    Sets the value of noCache. 
    */
        setNoCache(noCache: boolean):void;
    /**
    Sets the value of pageParam. 
    */
        setPageParam(pageParam: string):void;
    /**
    Sets the value of simpleGroupMode. 
    */
        setSimpleGroupMode(simpleGroupMode: boolean):void;
    /**
    Sets the value of simpleSortMode. 
    */
        setSimpleSortMode(simpleSortMode: boolean):void;
    /**
    Sets the value of sortParam. 
    */
        setSortParam(sortParam: string):void;
    /**
    Sets the value of startParam. 
    */
        setStartParam(startParam: string):void;
    /**
    Sets the value of timeout. 
    */
        setTimeout(timeout: number):void;
    /**
    Sets the value of url. 
    */
        setUrl(url: string):void;
    }
    interface SessionStorageConfig extends Ext.data.proxy.WebStorageConfig {
    }
    /**
    Proxy which uses HTML5 session storage as its data storage/retrieval mechanism. 
    */
    export class SessionStorage extends Ext.data.proxy.WebStorage {
    /**
    Creates the proxy, throws an error if local storage is not supported in the current browser. 
    */
        constructor(config?: Ext.data.proxy.SessionStorageConfig);
    }
    interface SqlConfig extends Ext.data.proxy.ClientConfig {
    /**
    Database name to access tables from 
    */
        database?: string;
    /**
    Optional Table name to use if not provided ModelName will be used

    */
        table?: string;
    }
    /**
    SQL proxy lets you store data in a SQL database. 
    */
    export class Sql extends Ext.data.proxy.Client {
    /**
    Creates the Proxy 
    */
        constructor(config?: Ext.data.proxy.SqlConfig);
    /**
    Returns the value of columns. 
    */
        getColumns():string;
    /**
    Returns the value of database. 
    */
        getDatabase():string;
    /**
    Returns the value of defaultDateFormat. 
    */
        getDefaultDateFormat():string;
    /**
    Formats the data for each record before sending it to the server. 
    */
        getRecordData(record: any):any;
    /**
    Returns the value of table. 
    */
        getTable():string;
    /**
    Returns the value of tableExists. 
    */
        getTableExists():boolean;
    /**
    Returns the value of uniqueIdStrategy. 
    */
        getUniqueIdStrategy():boolean;
    /**
    Sets the value of columns. 
    */
        setColumns(columns: string):void;
    /**
    Sets the value of database. 
    */
        setDatabase(database: string):void;
    /**
    Sets the value of defaultDateFormat. 
    */
        setDefaultDateFormat(defaultDateFormat: string):void;
    /**
    Sets the value of table. 
    */
        setTable(table: string):void;
    /**
    Sets the value of tableExists. 
    */
        setTableExists(tableExists: boolean):void;
    /**
    Sets the value of uniqueIdStrategy. 
    */
        setUniqueIdStrategy(uniqueIdStrategy: boolean):void;
    }
    interface WebStorageConfig extends Ext.data.proxy.ClientConfig {
    /**
    The unique ID used as the key in which all record data are stored in the local storage object.

    */
        id?: string;
    }
    /**
    WebStorageProxy is simply a superclass for the LocalStorage and SessionStorage proxies. 
    */
    export class WebStorage extends Ext.data.proxy.Client {
    /**
    Cached map of records already retrieved by this Proxy. 
    */
        cache: any;
    /**
    Creates the proxy, throws an error if local storage is not supported in the current browser. 
    */
        constructor(config?: Ext.data.proxy.WebStorageConfig);
    /**
    Returns the value of id. 
    */
        getId():string;
    /**
    Sets the value of id. 
    */
        setId(id: string):void;
    /**
    Saves the given record in the Proxy. 
    */
        setRecord(record: Ext.data.Model, id?: string):void;
    }
}
declare module Ext.data.reader {
    interface ArrayConfig extends Ext.data.reader.JsonConfig {
    }
    /**
    Data reader class to create an Array of Ext.data.Model objects from an Array. 
    */
    export class Array extends Ext.data.reader.Json {
    /**
    Create a new ArrayReader 
    */
        constructor(meta: Ext.data.reader.ArrayConfig);
    }
    interface JsonConfig extends Ext.data.reader.ReaderConfig {
    /**
    Name of the property from which to retrieve the metaData attribute. 
    */
        metaProperty?: string;
    /**
    The reader will keep a copy of the most recent request in the rawData property. 
    */
        preserveRawData?: boolean;
    /**
    The optional location within the JSON response that the record data itself can be found at. 
    */
        record?: string;
    /**
    True to ensure that field names/mappings are treated as literals when
reading values. 
    */
        useSimpleAccessors?: boolean;
    }
    /**
    The JSON Reader is used by a Proxy to read a server response that is sent back in JSON format. 
    */
    export class Json extends Ext.data.reader.Reader {
    /**
    Creates new Reader. 
    */
        constructor(config?: Ext.data.reader.JsonConfig);
    /**
    Returns the value of metaProperty. 
    */
        getMetaProperty():string;
    /**
    Returns the value of preserveRawData. 
    */
        getPreserveRawData():boolean;
    /**
    Returns the value of record. 
    */
        getRecord():string;
    /**
    Returns the value of useSimpleAccessors. 
    */
        getUseSimpleAccessors():boolean;
    /**
    Sets the value of metaProperty. 
    */
        setMetaProperty(metaProperty: string):void;
    /**
    Sets the value of preserveRawData. 
    */
        setPreserveRawData(preserveRawData: boolean):void;
    /**
    Sets the value of record. 
    */
        setRecord(record: string):void;
    /**
    Sets the value of useSimpleAccessors. 
    */
        setUseSimpleAccessors(useSimpleAccessors: boolean):void;
    }
    interface ReaderConfig {
    /**
    True to automatically parse models nested within other models in a response object. 
    */
        implicitIncludes?: boolean;
    /**
    Determines if the Reader will keep raw data
received from the server in the rawData property. 
    */
        keepRawData?: boolean;
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    /**
    The name of the property which contains a response message for exception handling. 
    */
        messageProperty?: string;
    /**
    The model to use for this reader. 
    */
        model?: string|Ext.data.Model;
    /**
    True to extract the records from a data packet even if the successProperty returns false. 
    */
        readRecordsOnFailure?: boolean;
    /**
    The property that contains data items corresponding to the
Model(s) of the configured Reader. 
    */
        rootProperty?: string|Function;
    /**
    Name of the property from which to retrieve the success attribute, the value of which indicates
whether a given reque
    */
        successProperty?: string;
    /**
    Name of the property from which to retrieve the total number of records in the dataset. 
    */
        totalProperty?: string;
    /**
    If a transform function is set, it will be invoked just before readRecords executes. 
    */
        transform?: any;
    /**
    The name of the property in a node raw data block which indicates the type of the model to be created from that raw d
    */
        typeProperty?: string;
    }
    /**
    Readers are used to interpret data to be loaded into a Model instance or a Store - often in response to an AJAX request. 
    */
    export class Reader extends Ext.Base {
    /**
    If this property is specified by the target class of this mixin its properties are
used to configure the created Ext.
    */
        factoryConfig: any;
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
    true in this class to identify an object as an instantiated Reader, or subclass thereof. 
    */
        isReader: boolean;
    /**
    The raw meta data that was most recently read, if any. 
    */
        metaData: any;
    /**
    The raw data object that was last passed to readRecords. 
    */
        rawData: any;
    /**
    Creates new Reader. 
    */
        constructor(config?: Ext.data.reader.ReaderConfig);
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    This method provides a hook to do any data transformation before the reading process
begins. 
    */
        getData(data: any):any;
    /**
    Returns the value of implicitIncludes. 
    */
        getImplicitIncludes():boolean;
    /**
    Returns the value of keepRawData. 
    */
        getKeepRawData():boolean;
    /**
    Returns the value of messageProperty. 
    */
        getMessageProperty():string;
    /**
    Returns the value of model. 
    */
        getModel():string|Ext.data.Model;
    /**
    Returns the value of readRecordsOnFailure. 
    */
        getReadRecordsOnFailure():boolean;
    /**
    Takes a raw response object (as passed to the read method) and returns the useful data
segment from it. 
    */
        getResponseData(response: any):any;
    /**
    Returns the value of rootProperty. 
    */
        getRootProperty():string|Function;
    /**
    Returns the value of successProperty. 
    */
        getSuccessProperty():string;
    /**
    Returns the value of totalProperty. 
    */
        getTotalProperty():string;
    /**
    Returns the value of transform. 
    */
        getTransform():any;
    /**
    Returns the value of typeProperty. 
    */
        getTypeProperty():string;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Reads the given response object. 
    */
        read(response: any, readOptions?: any):Ext.data.ResultSet;
    /**
    Abstracts common functionality used by all Reader subclasses. 
    */
        readRecords(data: any, readOptions?: any):Ext.data.ResultSet;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    Sets the value of implicitIncludes. 
    */
        setImplicitIncludes(implicitIncludes: boolean):void;
    /**
    Sets the value of keepRawData. 
    */
        setKeepRawData(keepRawData: boolean):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Sets the value of messageProperty. 
    */
        setMessageProperty(messageProperty: string):void;
    /**
    Sets the value of model. 
    */
        setModel(model: string|Ext.data.Model):void;
    /**
    Sets the value of readRecordsOnFailure. 
    */
        setReadRecordsOnFailure(readRecordsOnFailure: boolean):void;
    /**
    Sets the value of rootProperty. 
    */
        setRootProperty(rootProperty: string|Function):void;
    /**
    Sets the value of successProperty. 
    */
        setSuccessProperty(successProperty: string):void;
    /**
    Sets the value of totalProperty. 
    */
        setTotalProperty(totalProperty: string):void;
    /**
    Sets the value of transform. 
    */
        setTransform(transform: any):void;
    /**
    Sets the value of typeProperty. 
    */
        setTypeProperty(typeProperty: string):void;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    }
    interface XmlConfig extends Ext.data.reader.ReaderConfig {
    /**
    A namespace prefix that will be prepended to the field name when reading a
field from an XML node. 
    */
        namespace?: string;
    /**
    The DomQuery path to the repeated element which contains record information. 
    */
        record?: string;
    }
    /**
    The XML Reader is used by a Proxy to read a server response that is sent back in XML format. 
    */
    export class Xml extends Ext.data.reader.Reader {
    /**
    Copy of rawData. 
    */
        xmlData: any;
    /**
    Creates new Reader. 
    */
        constructor(config?: Ext.data.reader.XmlConfig);
    /**
    Returns the value of namespace. 
    */
        getNamespace():string;
    /**
    Returns the value of record. 
    */
        getRecord():string;
    /**
    Sets the value of namespace. 
    */
        setNamespace(namespace: string):void;
    /**
    Sets the value of record. 
    */
        setRecord(record: string):void;
    }
}
declare module Ext.data.schema {
    interface AssociationConfig {
    /**
    The name of this association.

    */
        name?: string;
    }
    /**
    This class and its derivatives describe how two entities are related to each other. 
    */
    export class Association extends Ext.Base {
    /**
    

    */
        definedBy: Ext.Class;
    /**
    

    */
        field: Ext.data.field.Field;
    /**
    

    */
        left: Ext.data.schema.Role;
    /**
    

    */
        nullable: boolean;
    /**
    Points at either left or right objects if one is the owning party in this
association or is null if there is no owner.

    */
        owner: any;
    /**
    

    */
        right: Ext.data.schema.Role;
    /**
    

    */
        schema: Ext.data.schema.Schema;
    }
    interface ManyToManyConfig extends Ext.data.schema.AssociationConfig {
    }
    /**
    This relationship describes the case where any one entity of one type may relate to any
number of entities of another
    */
    export class ManyToMany extends Ext.data.schema.Association {
    }
    interface ManyToOneConfig extends Ext.data.schema.AssociationConfig {
    }
    /**
    This type of association describes the case where one entity is referenced by zero or
more other entities typically u
    */
    export class ManyToOne extends Ext.data.schema.Association {
    }
    /**
    This class provides name derivation methods for use by a Schema. 
    */
    export class Namer extends Ext.Base {
    /**
    If this property is specified by the target class of this mixin its properties are
used to configure the created Ext.
    */
        factoryConfig: any;
    /**
    Given the name of a foreign key field, return the role of the related entity. 
    */
        fieldRole(name: any):void;
    /**
    Returns the name for a one-to-many association given the left and right type and
the associating role. 
    */
        manyToOne(leftType: any, leftRole: any, rightType: any, rightRole: any):void;
    }
    interface OneToOneConfig extends Ext.data.schema.AssociationConfig {
    }
    /**
    This type of association is similar to many-to-one,
except that the reference field also has set
unique to true. 
    */
    export class OneToOne extends Ext.data.schema.Association {
    }
    /**
    

    */
    export class Role extends Ext.Base {
    /**
    

    */
        association: Ext.data.schema.Association;
    /**
    The Ext.data.Model derived class.

    */
        cls: Ext.Class;
    /**
    

    */
        inverse: Ext.data.schema.Role;
    /**
     
    */
        isMany: boolean;
    /**
     
    */
        left: boolean;
    /**
     
    */
        owner: boolean;
    /**
    

    */
        role: string;
    /**
     
    */
        side: string;
    /**
    The Ext.data.Model.entityName derived class.

    */
        type: string;
    /**
     
    */
        constructor(association: any, config: any);
    }
    interface SchemaConfig {
    /**
    This config is used to initialize the Ext.data.Model.identifier config
for classes that do not define one.

    */
        defaultIdentifier?: any;
    /**
    Specifies or configures the name generator for the schema. 
    */
        namer?: any;
    /**
    The namespace for entity classes in this schema.

    */
        namespace?: string;
    /**
    This is a template used to produce Ext.data.proxy.Proxy configurations for
Models that do not define an explicit proxy. 
    */
        proxy?: any;
    /**
    This is the URL prefix used for all requests to the server. 
    */
        urlPrefix?: string;
    }
    /**
    A Schema is a collection of related entities and their respective
associations. 
    */
    export class Schema extends Ext.Base {
    /**
    The number of associations
in this schema. 
    */
        assocCount: number;
    /**
    The number of entities in this
schema. 
    */
        entityCount: number;
    /**
    If this property is specified by the target class of this mixin its properties are
used to configure the created Ext.
    */
        factoryConfig: any;
    /**
    The name of the schema's type. 
    */
        type: string;
    /**
     
    */
        constructor(config: Ext.data.schema.SchemaConfig);
    /**
    Adds an entry from a matrix config declared by an
entity. 
    */
        addMatrix(entityType: Ext.Class, matrixName: string, relation?: string, left?: any, right?: any):void;
    /**
    Adds a reference field association for an entity
to this schema. 
    */
        addReference(entityType: Ext.Class, referenceField: Ext.data.field.Field, association?: string, role?: string, inverse?: string, type?: string, descr?: any, unique?: boolean):void;
    /**
    Returns an Association by name. 
    */
        getAssociation(name: string):Ext.data.schema.Association;
    /**
    Returns the value of defaultIdentifier. 
    */
        getDefaultIdentifier():any;
    /**
    Returns an entity by name. 
    */
        getEntity(name: string):Ext.data.Model;
    /**
    Get the entity name taking into account the namespace. 
    */
        getEntityName(cls: string|Ext.data.Model):string;
    /**
    Returns the value of namer. 
    */
        getNamer():any;
    /**
    Returns the value of namespace. 
    */
        getNamespace():string;
    /**
    Returns the value of proxy. 
    */
        getProxy():any;
    /**
    Returns the value of urlPrefix. 
    */
        getUrlPrefix():string;
    /**
    Checks if the passed entity has attached associations that need to be read when
using nested loading. 
    */
        hasAssociations(name: string|Ext.Class|Ext.data.Model):boolean;
    /**
    Checks if an entity is defined 
    */
        hasEntity(entity: string|Ext.data.Model):boolean;
    /**
    Sets the value of defaultIdentifier. 
    */
        setDefaultIdentifier(defaultIdentifier: any):void;
    /**
    Sets the value of namer. 
    */
        setNamer(namer: any):void;
    /**
    Sets the value of namespace. 
    */
        setNamespace(namespace: string):void;
    /**
    Sets the value of proxy. 
    */
        setProxy(proxy: any):void;
    /**
    Sets the value of urlPrefix. 
    */
        setUrlPrefix(urlPrefix: string):void;
    /**
    Returns the Schema instance given its id or config object. 
    */
        get(config: any):Ext.data.schema.Schema;
    }
}
declare module Ext.data.session {
    /**
    This class is used internally by Ext.data.Session.getSaveBatch and is
not intended for direct use. 
    */
    export class BatchVisitor extends Ext.Base {
    /**
     
    */
        constructor(batch: any);
    }
    /**
    This class is used internally by Ext.data.Session.getChanges to build
up an object describing changes in the session. 
    */
    export class ChangesVisitor extends Ext.Base {
    /**
     
    */
        constructor(session: any);
    }
    /**
    This visitor class adds extra capability to consider changes as
they would be considered for a parent session.

    */
    export class ChildChangesVisitor extends Ext.data.session.ChangesVisitor {
    /**
     
    */
        constructor();
    }
}
declare module Ext.data.validator {
    interface BoundConfig {
    /**
    The error message to return when the value is not in the specified range
and both the minimum and maximum are specified.

    */
        bothMessage?: string;
    /**
    The error message to return when the value is empty. 
    */
        emptyMessage?: string;
    /**
    The maximum length value.

    */
        max?: number;
    /**
    The error message to return when the value is more than the maximum
and only a maximum is specified.

    */
        maxOnlyMessage?: string;
    /**
    The minimum length value.

    */
        min?: number;
    /**
    The error message to return when the value is less than the minimum
and only a minimum is specified.

    */
        minOnlyMessage?: string;
    }
    /**
    A superclass for a validator that checks if a value is within a certain range.

    */
    export class Bound extends Ext.data.validator.Validator {
    /**
    Creates new Validator. 
    */
        constructor();
    /**
    Returns the value of emptyMessage. 
    */
        getEmptyMessage():string;
    /**
    Returns the value of max. 
    */
        getMax():number;
    /**
    Returns the value of maxOnlyMessage. 
    */
        getMaxOnlyMessage():string;
    /**
    Returns the value of min. 
    */
        getMin():number;
    /**
    Returns the value of minOnlyMessage. 
    */
        getMinOnlyMessage():string;
    /**
    Sets the value of emptyMessage. 
    */
        setEmptyMessage(emptyMessage: string):void;
    /**
    Sets the value of max. 
    */
        setMax(max: number):void;
    /**
    Sets the value of maxOnlyMessage. 
    */
        setMaxOnlyMessage(maxOnlyMessage: string):void;
    /**
    Sets the value of min. 
    */
        setMin(min: number):void;
    /**
    Sets the value of minOnlyMessage. 
    */
        setMinOnlyMessage(minOnlyMessage: string):void;
    }
    interface EmailConfig extends Ext.data.validator.FormatConfig {
    }
    /**
    Validates that the value is a valid email.

    */
    export class Email extends Ext.data.validator.Format {
    /**
     
    */
        constructor();
    }
    interface ExclusionConfig extends Ext.data.validator.ListConfig {
    /**
    The error message to return when the passed value exists in the
specified list. 
    */
        message?: string;
    }
    /**
    Validates that the value does not exist in a list of values.

    */
    export class Exclusion extends Ext.data.validator.List {
    /**
     
    */
        constructor();
    /**
    Returns the value of message. 
    */
        getMessage():string;
    /**
    Sets the value of message. 
    */
        setMessage(message: string):void;
    }
    interface FormatConfig {
    /**
    The matcher regex to test against the value.

    */
        matcher?: RegExp;
    /**
    The error message to return when the value does not match the format. 
    */
        message?: string;
    }
    /**
    Validates that the passed value matches a specific format specified by a regex. 
    */
    export class Format extends Ext.data.validator.Validator {
    /**
     
    */
        constructor();
    /**
    Returns the value of matcher. 
    */
        getMatcher():RegExp;
    /**
    Returns the value of message. 
    */
        getMessage():string;
    /**
    Sets the value of matcher. 
    */
        setMatcher(matcher: RegExp):void;
    /**
    Sets the value of message. 
    */
        setMessage(message: string):void;
    }
    interface InclusionConfig extends Ext.data.validator.ListConfig {
    /**
    The error message to return when the passed value does not exist
in the specified list. 
    */
        message?: string;
    }
    /**
    Validates that the value exists in a list of values.

    */
    export class Inclusion extends Ext.data.validator.List {
    /**
     
    */
        constructor();
    /**
    Returns the value of message. 
    */
        getMessage():string;
    /**
    Sets the value of message. 
    */
        setMessage(message: string):void;
    }
    interface LengthConfig extends Ext.data.validator.BoundConfig {
    }
    /**
    Validates that the length of the value is between a min and max.

    */
    export class Length extends Ext.data.validator.Bound {
    /**
    Creates new Validator. 
    */
        constructor();
    /**
    Returns the value of bothMessage. 
    */
        getBothMessage():string;
    /**
    Sets the value of bothMessage. 
    */
        setBothMessage(bothMessage: string):void;
    }
    interface ListConfig {
    /**
    The list to check the passed value against.

    */
        list?: any[];
    }
    /**
    A superclass for inclusion/exclusion validators.

    */
    export class List extends Ext.data.validator.Validator {
    /**
    Creates new Validator. 
    */
        constructor(config: Ext.data.validator.ListConfig);
    /**
    Returns the value of list. 
    */
        getList():any[];
    /**
    Sets the value of list. 
    */
        setList(list: any[]):void;
    }
    interface PresenceConfig {
    /**
    true to allow '' as a valid value. 
    */
        allowEmpty?: boolean;
    /**
    The error message to return when the value is not specified. 
    */
        message?: string;
    }
    /**
    Validates that the passed value is not null or undefined or ''.

    */
    export class Presence extends Ext.data.validator.Validator {
    /**
    Creates new Validator. 
    */
        constructor(config: Ext.data.validator.PresenceConfig);
    /**
    Returns the value of allowEmpty. 
    */
        getAllowEmpty():boolean;
    /**
    Returns the value of message. 
    */
        getMessage():string;
    /**
    Sets the value of allowEmpty. 
    */
        setAllowEmpty(allowEmpty: boolean):void;
    /**
    Sets the value of message. 
    */
        setMessage(message: string):void;
    }
    interface RangeConfig extends Ext.data.validator.BoundConfig {
    /**
    The error message to return when the value is not numeric. 
    */
        nanMessage?: string;
    }
    /**
    Validates that the the value is between a min and max.

    */
    export class Range extends Ext.data.validator.Bound {
    /**
    Creates new Validator. 
    */
        constructor();
    /**
    Returns the value of bothMessage. 
    */
        getBothMessage():string;
    /**
    Returns the value of nanMessage. 
    */
        getNanMessage():string;
    /**
    Sets the value of bothMessage. 
    */
        setBothMessage(bothMessage: string):void;
    /**
    Sets the value of nanMessage. 
    */
        setNanMessage(nanMessage: string):void;
    }
    /**
    The base class for validators to be used to validate fields in
a model. 
    */
    export class Validator extends Ext.Base {
    /**
    If this property is specified by the target class of this mixin its properties are
used to configure the created Ext.
    */
        factoryConfig: any;
    /**
    A string representation of this format. 
    */
        type: string;
    /**
    Creates new Validator. 
    */
        constructor(config: any);
    /**
    Validates the passed value. 
    */
        validate(value: any, record: Ext.data.Model):boolean|string;
    }
}
declare module Ext.data.writer {
    interface JsonConfig extends Ext.data.writer.WriterConfig {
    /**
    Configure with false to ensure that records are always wrapped in an array, even if there is only
one record being sent. 
    */
        allowSingle?: boolean;
    /**
    Configure true to send record data (all record fields if writeAllFields is true)
as a JSON encoded HTTP parameter nam
    */
        encode?: boolean;
    /**
    By default, when dot-delimited field mappings are
used (e.g. 
    */
        expandData?: boolean;
    /**
    The HTTP parameter name by which JSON encoded records will be passed to the server if the
encode option is true.

    */
        rootProperty?: string;
    }
    /**
    This class is used to write Ext.data.Model data to the server in a JSON format. 
    */
    export class Json extends Ext.data.writer.Writer {
    /**
     
    */
        constructor(config: Ext.data.writer.JsonConfig);
    /**
    Returns the value of allowSingle. 
    */
        getAllowSingle():boolean;
    /**
    Returns the value of encode. 
    */
        getEncode():boolean;
    /**
    Returns the value of expandData. 
    */
        getExpandData():boolean;
    /**
    The Reader classes support dot-delimited data mappings for extracting nested raw data into fields, so the
writer must
    */
        getExpandedData(data: any):void;
    /**
    Returns the value of rootProperty. 
    */
        getRootProperty():string;
    /**
    Sets the value of allowSingle. 
    */
        setAllowSingle(allowSingle: boolean):void;
    /**
    Sets the value of encode. 
    */
        setEncode(encode: boolean):void;
    /**
    Sets the value of expandData. 
    */
        setExpandData(expandData: boolean):void;
    /**
    Sets the value of rootProperty. 
    */
        setRootProperty(rootProperty: string):void;
    }
    interface WriterConfig {
    /**
    This object contains the options passed to Ext.data.Model.getData when
writing Ext.data.Model.phantom records or when
    */
        allDataOptions?: any;
    /**
    When specified this property causes the Ext.data.Model.idProperty of
newly created records to be sent to the server a
    */
        clientIdProperty?: string;
    /**
    This is used for each field of type date in the model to format the value before
it is sent to the server.

    */
        dateFormat?: string;
    /**
    This property is used to read the key for each value that will be sent to the
server. 
    */
        nameProperty?: string;
    /**
    This object contains the options passed to Ext.data.Model.getData when
writing non Ext.data.Model.phantom records or 
    */
        partialDataOptions?: any;
    /**
    If a transform function is set, it will be invoked just before writeRecords
executes. 
    */
        transform?: any;
    /**
    true to write all fields from the record to the
server. 
    */
        writeAllFields?: boolean;
    /**
    By default, each record's id is always included in the output for non-phantom
records since in most cases the id will
    */
        writeRecordId?: boolean;
    }
    /**
    Base Writer class used by most subclasses of Ext.data.proxy.Server. 
    */
    export class Writer extends Ext.Base {
    /**
    If this property is specified by the target class of this mixin its properties are
used to configure the created Ext.
    */
        factoryConfig: any;
    /**
    true in this class to identify an object as an instantiated Writer, or subclass thereof. 
    */
        isWriter: boolean;
    /**
    Creates new Writer. 
    */
        constructor(config?: Ext.data.writer.WriterConfig);
    /**
    Returns the value of allDataOptions. 
    */
        getAllDataOptions():any;
    /**
    Returns the value of clientIdProperty. 
    */
        getClientIdProperty():string;
    /**
    Returns the value of dateFormat. 
    */
        getDateFormat():string;
    /**
    Returns the value of nameProperty. 
    */
        getNameProperty():string;
    /**
    Returns the value of partialDataOptions. 
    */
        getPartialDataOptions():any;
    /**
    Formats the data for each record before sending it to the server. 
    */
        getRecordData(record: Ext.data.Model, operation?: Ext.data.operation.Operation):any;
    /**
    Returns the value of transform. 
    */
        getTransform():any;
    /**
    Returns the value of writeAllFields. 
    */
        getWriteAllFields():boolean;
    /**
    Returns the value of writeRecordId. 
    */
        getWriteRecordId():boolean;
    /**
    Sets the value of allDataOptions. 
    */
        setAllDataOptions(allDataOptions: any):void;
    /**
    Sets the value of clientIdProperty. 
    */
        setClientIdProperty(clientIdProperty: string):void;
    /**
    Sets the value of dateFormat. 
    */
        setDateFormat(dateFormat: string):void;
    /**
    Sets the value of nameProperty. 
    */
        setNameProperty(nameProperty: string):void;
    /**
    Sets the value of partialDataOptions. 
    */
        setPartialDataOptions(partialDataOptions: any):void;
    /**
    Sets the value of transform. 
    */
        setTransform(transform: any):void;
    /**
    Sets the value of writeAllFields. 
    */
        setWriteAllFields(writeAllFields: boolean):void;
    /**
    Sets the value of writeRecordId. 
    */
        setWriteRecordId(writeRecordId: boolean):void;
    /**
    Prepares a Proxy's Ext.data.Request object. 
    */
        write(request: Ext.data.Request):Ext.data.Request;
    /**
    Write the record data to the request in the appropriate format. 
    */
        writeRecords(request: Ext.data.Request, data: any[]):Ext.data.Request;
    }
    interface XmlConfig extends Ext.data.writer.WriterConfig {
    /**
    The root to be used if documentRoot is empty and a root is required
to form a valid XML document. 
    */
        defaultDocumentRoot?: string;
    /**
    The name of the root element of the document. 
    */
        documentRoot?: string;
    /**
    A header to use in the XML document (such as setting the encoding or version). 
    */
        header?: string;
    /**
    The name of the node to use for each record. 
    */
        record?: string;
    }
    /**
    This class is used to write Ext.data.Model data to the server in an XML format. 
    */
    export class Xml extends Ext.data.writer.Writer {
    /**
    Creates new Writer. 
    */
        constructor(config?: Ext.data.writer.XmlConfig);
    /**
    Returns the value of defaultDocumentRoot. 
    */
        getDefaultDocumentRoot():string;
    /**
    Returns the value of documentRoot. 
    */
        getDocumentRoot():string;
    /**
    Returns the value of header. 
    */
        getHeader():string;
    /**
    Returns the value of record. 
    */
        getRecord():string;
    /**
    Serializes an object to XML. 
    */
        objectToElement(name: string, o: any, output?: any[]):void;
    /**
    Sets the value of defaultDocumentRoot. 
    */
        setDefaultDocumentRoot(defaultDocumentRoot: string):void;
    /**
    Sets the value of documentRoot. 
    */
        setDocumentRoot(documentRoot: string):void;
    /**
    Sets the value of header. 
    */
        setHeader(header: string):void;
    /**
    Sets the value of record. 
    */
        setRecord(record: string):void;
    }
}
declare module Ext.dd {
    /**
    A DragDrop implementation where the linked element follows the
mouse cursor during a drag.

    */
    export class DD extends Ext.dd.DragDrop {
    /**
    When set to true, the utility automatically tries to scroll the browser
window when a drag and drop element is dragge
    */
        scroll: boolean;
    /**
    Creates new DD instance. 
    */
        constructor(id: string, sGroup: string, config: any);
    /**
    Sets the element to the location of the mousedown or click event,
maintaining the cursor location relative to the loc
    */
        alignElWithMouse(el: HTMLElement, iPageX: number, iPageY: number):void;
    /**
    Sets the pointer offset to the distance between the linked element's top
left corner and the location the element was
    */
        autoOffset(iPageX: number, iPageY: number):void;
    /**
    Event that fires prior to the onDrag event. 
    */
        b4Drag(e: any):void;
    /**
    Event that fires prior to the onMouseDown event. 
    */
        b4MouseDown(e: any):void;
    /**
    Saves the most recent position so that we can reset the constraints and
tick marks on-demand. 
    */
        cachePosition(iPageX?: number, iPageY?: number):void;
    /**
    Sets the pointer offset. 
    */
        setDelta(iDeltaX: number, iDeltaY: number):void;
    /**
    Sets the drag element to the location of the mousedown or click event,
maintaining the cursor location relative to th
    */
        setDragElPos(iPageX: number, iPageY: number):void;
    }
    /**
    A DragDrop implementation that inserts an empty, bordered div into
the document that follows the cursor during drag o
    */
    export class DDProxy extends Ext.dd.DD {
    /**
    By default the frame is positioned exactly where the drag element is, so
we use the cursor offset provided by Ext.dd.DD. 
    */
        centerFrame: boolean;
    /**
    By default we resize the drag frame to be the same size as the element
we want to drag (this is to get the frame effe
    */
        resizeFrame: boolean;
    /**
    The default drag frame div id 
    */
        dragElId: string;
    /**
    Creates new DDProxy. 
    */
        constructor(id: string, sGroup: string, config: any);
    /**
    Creates the proxy element if it does not yet exist 
    */
        createFrame():void;
    /**
    Initialization for the drag frame element. 
    */
        initFrame():void;
    }
    /**
    A DragDrop implementation that does not move, but can be a drop
target. 
    */
    export class DDTarget extends Ext.dd.DragDrop {
    /**
    Creates new DDTarget. 
    */
        constructor(id: string, sGroup: string, config: any);
    }
    /**
    Defines the interface and base operation of items that that can be
dragged or can be drop targets. 
    */
    export class DragDrop extends Ext.Base {
    /**
    The available property is false until the linked dom element is accessible. 
    */
        available: boolean;
    /**
    Configuration attributes passed into the constructor

    */
        config: any;
    /**
    Provides default constraint padding to "constrainTo" elements. 
    */
        defaultPadding: any;
    /**
    The group defines a logical collection of DragDrop objects that are
related. 
    */
        groups: any;
    /**
    By default, drags can only be initiated if the mousedown occurs in the
region the linked element is. 
    */
        hasOuterHandles: boolean;
    /**
    The id of the element associated with this object. 
    */
        id: string;
    /**
    Set to false to enable a DragDrop object to fire drag events while dragging
over its own Element. 
    */
        ignoreSelf: boolean;
    /**
    An Array of CSS class names for elements to be considered in valid as drag handles.

    */
        invalidHandleClasses: string[];
    /**
    An object who's property names identify the IDs of elements to be considered invalid as drag handles. 
    */
        invalidHandleIds: any;
    /**
    An object who's property names identify HTML tags to be considered invalid as drag handles. 
    */
        invalidHandleTypes: any;
    /**
    By default, all instances can be a drop target. 
    */
        isTarget: boolean;
    /**
    Maintain offsets when we resetconstraints. 
    */
        maintainOffset: boolean;
    /**
    When set to true, other DD objects in cooperating DDGroups do not receive
notification events when this DD object is 
    */
        moveOnly: boolean;
    /**
    The padding configured for this drag and drop object for calculating
the drop zone intersection with this object. 
    */
        padding: number[];
    /**
    By default the drag and drop instance will only respond to the primary
button click (left button for a right-handed m
    */
        primaryButtonOnly: boolean;
    /**
    Array of pixel locations the element will snap to if we specified a
horizontal graduation/interval. 
    */
        xTicks: number[];
    /**
    Array of pixel locations the element will snap to if we specified a
vertical graduation/interval. 
    */
        yTicks: number[];
    /**
    Creates new DragDrop. 
    */
        constructor(id: string, sGroup: string, config: any);
    /**
    Lets you specify a css class of elements that will not initiate a drag 
    */
        addInvalidHandleClass(cssClass: string):void;
    /**
    Lets you to specify an element id for a child of a drag handle
that should not initiate a drag 
    */
        addInvalidHandleId(id: string):void;
    /**
    Allows you to specify a tag name that should not start a drag operation
when clicked. 
    */
        addInvalidHandleType(tagName: string):void;
    /**
    Adds this instance to a group of related drag/drop objects. 
    */
        addToGroup(sGroup: string):void;
    /**
    Applies the configuration parameters that were passed into the constructor. 
    */
        applyConfig():void;
    /**
    Clears any constraints applied to this instance. 
    */
        clearConstraints():void;
    /**
    Clears any tick interval defined for this instance 
    */
        clearTicks():void;
    /**
    Initializes the drag drop object's constraints to restrict movement to a certain element. 
    */
        constrainTo(constrainTo: string|HTMLElement|Ext.dom.Element, pad?: any, inContent?: boolean):void;
    /**
    Called when we are done dragging the object 
    */
        endDrag(e: Event):void;
    /**
    Returns a reference to the actual element to drag. 
    */
        getDragEl():HTMLElement;
    /**
    Returns a reference to the linked element 
    */
        getEl():HTMLElement;
    /**
    Sets up the DragDrop object. 
    */
        init(id: string, sGroup: string, config: any):void;
    /**
    Initializes Targeting functionality only ...
    */
        initTarget(id: string, sGroup: string, config: any):void;
    /**
    Returns true if this instance is locked, or the drag drop mgr is locked
(meaning that all drag/drop is disabled on th
    */
        isLocked():boolean;
    /**
    Checks the tag exclusion list to see if this click should be ignored 
    */
        isValidHandleChild(node: HTMLElement):boolean;
    /**
    Locks this instance 
    */
        lock():void;
    /**
    Override the onAvailable method to do what is needed after the initial
position was determined. 
    */
        onAvailable():void;
    /**
    Abstract method called during the onMouseMove event while dragging an
object. 
    */
        onDrag(e: Event):void;
    /**
    Abstract method called when this item is dropped on another DragDrop
obj 
    */
        onDragDrop(e: Event, id: string|Ext.dd.DragDrop[]):void;
    /**
    Abstract method called when this element fist begins hovering over
another DragDrop obj 
    */
        onDragEnter(e: Event, id: string|Ext.dd.DragDrop[]):void;
    /**
    Abstract method called when we are no longer hovering over an element 
    */
        onDragOut(e: Event, id: string|Ext.dd.DragDrop[]):void;
    /**
    Abstract method called when this element is hovering over another
DragDrop obj 
    */
        onDragOver(e: Event, id: string|Ext.dd.DragDrop[]):void;
    /**
    Abstract method called when this item is dropped on an area with no
drop target 
    */
        onInvalidDrop(e: Event):void;
    /**
    Called when a drag/drop obj gets a mousedown 
    */
        onMouseDown(e: Event):void;
    /**
    Called when a drag/drop obj gets a mouseup 
    */
        onMouseUp(e: Event):void;
    /**
    Removes this instance from the supplied interaction group 
    */
        removeFromGroup(sGroup: string):void;
    /**
    Unsets an invalid css class 
    */
        removeInvalidHandleClass(cssClass: string):void;
    /**
    Unsets an invalid handle id 
    */
        removeInvalidHandleId(id: string):void;
    /**
    Unsets an excluded tag name set by addInvalidHandleType 
    */
        removeInvalidHandleType(tagName: string):void;
    /**
    Must be called if you manually reposition a dd element. 
    */
        resetConstraints(maintainOffset: boolean):void;
    /**
    Allows you to specify that an element other than the linked element
will be moved with the cursor during a drag 
    */
        setDragElId(id: string):void;
    /**
    Allows you to specify a child of the linked element that should be
used to initiate the drag operation. 
    */
        setHandleElId(id: string):void;
    /**
    Stores the initial placement of the linked element. 
    */
        setInitPosition(diffX: number, diffY: number):void;
    /**
    Allows you to set an element outside of the linked element as a drag
handle 
    */
        setOuterHandleElId(id: string):void;
    /**
    Configures the padding for the target zone in px. 
    */
        setPadding(iTop: number, iRight: number, iBot: number, iLeft: number):void;
    /**
    By default, the element can be dragged any place on the screen. 
    */
        setXConstraint(iLeft: number, iRight: number, iTickSize?: number):void;
    /**
    By default, the element can be dragged any place on the screen. 
    */
        setYConstraint(iUp: number, iDown: number, iTickSize?: number):void;
    /**
    Abstract method called after a drag/drop object is clicked
and the drag or mousedown time thresholds have beeen met. 
    */
        startDrag(x: number, y: number):void;
    /**
    toString method 
    */
        toString():string;
    /**
    Unlocks this instace 
    */
        unlock():void;
    /**
    Removes all drag and drop hooks for this element 
    */
        unreg():void;
    }
    /**
    

    */
    export class DragDropElement {
    /**
    Returns the X position of an html element 
    */
        getPosX(el: HTMLElement):number;
    /**
    Returns the Y position of an html element 
    */
        getPosY(el: HTMLElement):number;
    /**
    Gets the scrollLeft 
    */
        getScrollLeft():number;
    /**
    Gets the scrollTop 
    */
        getScrollTop():number;
    /**
    Returns the specified element style property 
    */
        getStyle(el: HTMLElement, styleProp: string):string;
    /**
    Recursively searches the immediate parent and all child nodes for
the handle element in order to determine wheter or 
    */
        handleWasClicked(node: HTMLElement):void;
    /**
    Sets the x/y position of an element to the location of the
target element. 
    */
        moveToEl(moveEl: HTMLElement, targetEl: HTMLElement):void;
    /**
    Numeric array sort function 
    */
        numericSort(a: number, b: number):number;
    /**
    Swap two nodes. 
    */
        swapNode(n1: HTMLElement, n2: HTMLElement):void;
    }
    /**
    DragDropManager is a singleton that tracks the element interaction for
all DragDrop items in the window. 
    */
    export class DragDropManager {
    /**
    In intersect mode, drag and drop interaction is defined by the
overlap of two or more drag and drop objects. 
    */
        static INTERSECT: number;
    /**
    In point mode, drag and drop interaction is defined by the
location of the cursor during the drag/drop 
    */
        static POINT: number;
    /**
    The number of pixels that the mouse needs to move after the
mousedown before the drag is initiated. 
    */
        static clickPixelThresh: number;
    /**
    Class to add to the dragged element of a DragDrop instance. 
    */
        static dragCls: string;
    /**
    The current drag and drop mode. 
    */
        static mode: number;
    /**
    This config is only provided to provide old, usually unwanted drag/drop behaviour. 
    */
        static notifyOccluded: boolean;
    /**
    Flag to determine if we should prevent the default behavior of the
events we define. 
    */
        static preventDefault: boolean;
    /**
    Flag to determine if we should stop the propagation of the events
we generate. 
    */
        static stopPropagation: boolean;
    /**
    Set useCache to false if you want to force object the lookup of each
drag and drop linked element constantly during a
    */
        static useCache: boolean;
    /**
    Helper function for getting the best match from the list of drag
and drop objects returned by the drag and drop event
    */
        static getBestMatch(dds: Ext.dd.DragDrop[]):Ext.dd.DragDrop;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the style property for the DOM element (i.e.,
document.getElById(id).style) 
    */
        static getCss(id: string):any;
    /**
    Returns the DragDrop instance for a given id 
    */
        static getDDById(id: string):Ext.dd.DragDrop;
    /**
    Returns the actual DOM element 
    */
        static getElement(id: string):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Returns a Region object containing the drag and drop element's position
and size, including the padding configured fo
    */
        static getLocation(oDD: Ext.dd.DragDrop):Ext.util.Region;
    /**
    Returns the drag and drop instances that are in all groups the
passed in instance belongs to. 
    */
        static getRelated(p_oDD: Ext.dd.DragDrop, bTargetsOnly: boolean):Ext.dd.DragDrop[];
    /**
    Utility function to determine if a given element has been
registered as a drag drop item. 
    */
        static isDragDrop(id: string):boolean;
    /**
    Utility function to determine if a given element has been
registered as a drag drop handle for the given Drag Drop ob
    */
        static isHandle(id: string):boolean;
    /**
    Returns true if the specified dd target is a legal target for
the specifice drag obj 
    */
        static isLegalTarget(oDD: Ext.dd.DragDrop, oTargetDD: Ext.dd.DragDrop):boolean;
    /**
    Is drag and drop locked? 
    */
        static isLocked():boolean;
    /**
    My goal is to be able to transparently determine if an object is
typeof DragDrop, and the exact subclass of DragDrop. 
    */
        static isTypeOfDD(oDD: any):boolean;
    /**
    Lock all drag and drop functionality 
    */
        static lock():void;
    /**
    Refreshes the cache of the top-left and bottom-right points of the
drag and drop objects in the specified group(s). 
    */
        static refreshCache(groups: any):void;
    /**
    Each DragDrop instance must be registered with the DragDropManager. 
    */
        static regDragDrop(oDD: Ext.dd.DragDrop, sGroup: string):void;
    /**
    Each DragDrop handle element must be registered. 
    */
        static regHandle(sDDId: string, sHandleId: string):void;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Fired when either the drag pixel threshold or the mousedown hold
time threshold has been met. 
    */
        static startDrag(x: number, y: number):void;
    /**
    Utility to stop event propagation and event default, if these
features are turned on. 
    */
        static stopEvent(e: Event):void;
    /**
    Unlock all drag and drop functionality 
    */
        static unlock():void;
    /**
    This checks to make sure an element exists and is in the DOM. 
    */
        static verifyEl(el: HTMLElement):boolean;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface DragSourceConfig {
    /**
    If true, animates the proxy element back to the position of the handle element used to trigger the drag. 
    */
        animRepair?: boolean;
    /**
    A named drag drop group to which this object belongs. 
    */
        ddGroup?: string;
    /**
    The CSS class returned to the drag source when drop is allowed. 
    */
        dropAllowed?: string;
    /**
    The CSS class returned to the drag source when drop is not allowed. 
    */
        dropNotAllowed?: string;
    /**
    The color to use when visually highlighting the drag source in the afterRepair
method after a failed drop (defaults t
    */
        repairHighlightColor?: string;
    }
    /**
    A simple class that provides the basic implementation needed to make any element draggable.

    */
    export class DragSource extends Ext.dd.DDProxy {
    /**
    This property contains the data representing the dragged object. 
    */
        dragData: any;
    /**
    Creates new drag-source. 
    */
        constructor(el: string|HTMLElement|Ext.dom.Element, config?: Ext.dd.DragSourceConfig);
    /**
    An empty function by default, but provided so that you can perform a custom action
after a valid drag drop has occurr
    */
        afterDragDrop(target: Ext.dd.DragDrop, e: Event, id: string):void;
    /**
    An empty function by default, but provided so that you can perform a custom action
when the dragged item enters the d
    */
        afterDragEnter(target: Ext.dd.DragDrop, e: Event, id: string):void;
    /**
    An empty function by default, but provided so that you can perform a custom action
after the dragged item is dragged 
    */
        afterDragOut(target: Ext.dd.DragDrop, e: Event, id: string):void;
    /**
    An empty function by default, but provided so that you can perform a custom action
while the dragged item is over the
    */
        afterDragOver(target: Ext.dd.DragDrop, e: Event, id: string):void;
    /**
    An empty function by default, but provided so that you can perform a custom action
after an invalid drop has occurred
    */
        afterInvalidDrop(e: Event, id: string):void;
    /**
    An empty function by default, but provided so that you can perform a custom action
after a valid drop has occurred by
    */
        afterValidDrop(target: any, e: Event, id: string):void;
    /**
    An empty function by default, but provided so that you can perform a custom action before the dragged
item is dropped
    */
        beforeDragDrop(target: Ext.dd.DragDrop, e: Event, id: string):boolean;
    /**
    An empty function by default, but provided so that you can perform a custom action
before the dragged item enters the
    */
        beforeDragEnter(target: Ext.dd.DragDrop, e: Event, id: string):boolean;
    /**
    An empty function by default, but provided so that you can perform a custom action before the dragged
item is dragged
    */
        beforeDragOut(target: Ext.dd.DragDrop, e: Event, id: string):boolean;
    /**
    An empty function by default, but provided so that you can perform a custom action
while the dragged item is over the
    */
        beforeDragOver(target: Ext.dd.DragDrop, e: Event, id: string):boolean;
    /**
    An empty function by default, but provided so that you can perform a custom action after an invalid
drop has occurred. 
    */
        beforeInvalidDrop(target: Ext.dd.DragDrop, e: Event, id: string):boolean;
    /**
    Returns the data object associated with this drag source 
    */
        getDragData(e: any):any;
    /**
    Returns the drag source's underlying Ext.dd.StatusProxy 
    */
        getProxy():Ext.dd.StatusProxy;
    /**
    Hides the drag source's Ext.dd.StatusProxy 
    */
        hideProxy():void;
    /**
    An empty function by default, but provided so that you can perform a custom action before the initial
drag event begi
    */
        onBeforeDrag(data: any, e: Event):boolean;
    /**
    An empty function by default, but provided so that you can perform a custom action once the initial
drag event has be
    */
        onStartDrag(x: number, y: number):void;
    }
    interface DragTrackerConfig {
    /**
    Specify true to defer trigger start by 1000 ms. 
    */
        autoStart?: boolean|number;
    /**
    A Region (Or an element from which a Region measurement will be read)
which is used to constrain the result of the ge
    */
        constrainTo?: Ext.util.Region|Ext.dom.Element;
    /**
    A CSS selector which identifies child elements within the DragTracker's encapsulating
Element which are the tracked e
    */
        delegate?: string;
    /**
    The target element or ID of the element on which the DragTracker will be initialized.

    */
        el?: Ext.dom.Element|HTMLElement|string;
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    /**
    A CSS class to add to the DragTracker's target element when the element (or, if the delegate
option is used, when a d
    */
        overCls?: string;
    /**
    Specify false to enable default actions on onMouseDown events. 
    */
        preventDefault?: boolean;
    /**
    Specify true to stop the mousedown event from bubbling to outer listeners from the target element (or its delegates). 
    */
        stopEvent?: boolean;
    /**
    Number of pixels the drag target must be moved before dragging is
considered to have started. 
    */
        tolerance?: number;
    /**
    Set to true to fire mouseover and mouseout events when the mouse enters or leaves the target element. 
    */
        trackOver?: boolean;
    }
    /**
    A DragTracker listens for drag events on an Element and fires events at the start and end of the drag,
as well as dur
    */
    export class DragTracker extends Ext.Base {
    /**
    Indicates whether the user is currently dragging this tracker. 
    */
        active: boolean;
    /**
    The element being dragged. 
    */
        dragTarget: HTMLElement;
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Returns the drag target. 
    */
        getDragTarget():Ext.dom.Element;
    /**
    Returns the X, Y offset of the current mouse position from the mousedown point. 
    */
        getOffset(constrainMode?: string):number[];
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Initializes the DragTracker on a given element. 
    */
        initEl(el: Ext.dom.Element|HTMLElement|string):void;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Template method which should be overridden by each DragTracker instance. 
    */
        onBeforeStart(e: Ext.event.Event):void;
    /**
    Template method which should be overridden by each DragTracker instance. 
    */
        onDrag(e: Ext.event.Event):void;
    /**
    Template method which should be overridden by each DragTracker instance. 
    */
        onEnd(e: Ext.event.Event):void;
    /**
    Template method which should be overridden by each DragTracker instance. 
    */
        onStart(e: Ext.event.Event):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    }
    interface DragZoneConfig extends Ext.dd.DragSourceConfig {
    /**
    True to register this container with the Scrollmanager for auto scrolling during drag operations. 
    */
        containerScroll?: any;
    /**
    An element to register with the ScrollManager if containerScroll
is set. 
    */
        scrollEl?: string|HTMLElement|Ext.dom.Element;
    }
    /**
    This class provides a container DD instance that allows dragging of multiple child source nodes. 
    */
    export class DragZone extends Ext.dd.DragSource {
    /**
    Creates new DragZone. 
    */
        constructor(el: string|HTMLElement|Ext.dom.Element, config: Ext.dd.DragZoneConfig);
    /**
    Called before a repair of an invalid drop to get the XY to animate to. 
    */
        getRepairXY(e: Event):number[];
    /**
    Called once drag threshold has been reached to initialize the proxy element. 
    */
        onInitDrag(x: number, y: number):boolean;
    }
    interface DropTargetConfig {
    /**
    True to register this container with the ScrollManager for auto scrolling during
drag operations. 
    */
        containerScroll?: boolean;
    /**
    A named drag drop group to which this object belongs. 
    */
        ddGroup?: string;
    /**
    The CSS class returned to the drag source when drop is allowed. 
    */
        dropAllowed?: string;
    /**
    The CSS class returned to the drag source when drop is not allowed. 
    */
        dropNotAllowed?: string;
    /**
    The CSS class applied to the drop target element while the drag source is over it. 
    */
        overClass?: string;
    }
    /**
    A simple class that provides the basic implementation needed to make any element a drop target that can have
draggabl
    */
    export class DropTarget extends Ext.dd.DDTarget {
    /**
    Creates new DropTarget. 
    */
        constructor(el: string|HTMLElement|Ext.dom.Element, config: Ext.dd.DropTargetConfig);
    /**
    The function a Ext.dd.DragSource calls once to notify this drop target that the dragged item has
been dropped on it. 
    */
        notifyDrop(source: Ext.dd.DragSource, e: Event, data: any):boolean;
    /**
    The function a Ext.dd.DragSource calls once to notify this drop target that the source is now over the
target. 
    */
        notifyEnter(source: Ext.dd.DragSource, e: Event, data: any):string;
    /**
    The function a Ext.dd.DragSource calls once to notify this drop target that the source has been dragged
out of the ta
    */
        notifyOut(source: Ext.dd.DragSource, e: Event, data: any):void;
    /**
    The function a Ext.dd.DragSource calls continuously while it is being dragged over the target. 
    */
        notifyOver(source: Ext.dd.DragSource, e: Event, data: any):string;
    }
    interface DropZoneConfig extends Ext.dd.DropTargetConfig {
    }
    /**
    This class provides a container DD instance that allows dropping on multiple child target nodes. 
    */
    export class DropZone extends Ext.dd.DropTarget {
    /**
    Creates new DropTarget. 
    */
        constructor(el: string|HTMLElement|Ext.dom.Element, config: Ext.dd.DropZoneConfig);
    /**
    Returns a custom data object associated with the DOM node that is the target of the event. 
    */
        getTargetFromEvent(e: Event):any;
    /**
    Called when the DropZone determines that a Ext.dd.DragSource has been dropped on it,
but not on any of its registered
    */
        onContainerDrop(source: Ext.dd.DragSource, e: Event, data: any):boolean;
    /**
    Called while the DropZone determines that a Ext.dd.DragSource is being dragged over it,
but not over any of its regis
    */
        onContainerOver(source: Ext.dd.DragSource, e: Event, data: any):string;
    /**
    Called when the DropZone determines that a Ext.dd.DragSource has been dropped onto
the drop node. 
    */
        onNodeDrop(nodeData: any, source: Ext.dd.DragSource, e: Event, data: any):boolean;
    /**
    Called when the DropZone determines that a Ext.dd.DragSource has entered a drop node
that has either been registered 
    */
        onNodeEnter(nodeData: any, source: Ext.dd.DragSource, e: Event, data: any):void;
    /**
    Called when the DropZone determines that a Ext.dd.DragSource has been dragged out of
the drop node without dropping. 
    */
        onNodeOut(nodeData: any, source: Ext.dd.DragSource, e: Event, data: any):void;
    /**
    Called while the DropZone determines that a Ext.dd.DragSource is over a drop node
that has either been registered or 
    */
        onNodeOver(nodeData: any, source: Ext.dd.DragSource, e: Event, data: any):string;
    }
    /**
    Provides easy access to all drag drop components that are registered on a page. 
    */
    export class Registry {
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the handle registered for a DOM Node by id 
    */
        static getHandle(id: string|HTMLElement):any;
    /**
    Returns the handle that is registered for the DOM node that is the target of the event 
    */
        static getHandleFromEvent(e: Event):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Returns a custom data object that is registered for a DOM node by id 
    */
        static getTarget(id: string|HTMLElement):any;
    /**
    Returns a custom data object that is registered for the DOM node that is the target of the event 
    */
        static getTargetFromEvent(e: Event):any;
    /**
    Registers a drag drop element. 
    */
        static register(element: string|HTMLElement, data: any):void;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Unregister a drag drop element 
    */
        static unregister(element: string|HTMLElement):void;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    /**
    Provides automatic scrolling of overflow regions in the page during drag operations. 
    */
    export class ScrollManager {
    /**
    The animation duration in seconds - MUST BE less than Ext.dd.ScrollManager.frequency! 
    */
        static animDuration: number;
    /**
    True to animate the scroll 
    */
        static animate: boolean;
    /**
    The named drag drop group to which this container belongs. 
    */
        static ddGroup: string;
    /**
    The frequency of scrolls in milliseconds 
    */
        static frequency: number;
    /**
    The number of pixels from the right or left edge of a container the pointer needs to be to trigger scrolling

    */
        static hthresh: any;
    /**
    The number of pixels to scroll in each scroll increment 
    */
        static increment: number;
    /**
    The number of pixels from the top or bottom edge of a container the pointer needs to be to trigger scrolling

    */
        static vthresh: any;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Manually trigger a cache refresh. 
    */
        static refreshCache():void;
    /**
    Registers new overflow element(s) to auto scroll 
    */
        static register(el: string|HTMLElement|Ext.dom.Element|string[]|HTMLElement[]|Ext.dom.Element[]):void;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Unregisters overflow element(s) so they are no longer scrolled 
    */
        static unregister(el: string|HTMLElement|Ext.dom.Element|string[]|HTMLElement[]|Ext.dom.Element[]):void;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface StatusProxyConfig extends Ext.ComponentConfig {
    /**
    The CSS class to apply to the status element when drop is allowed. 
    */
        dropAllowed?: string;
    /**
    The CSS class to apply to the status element when drop is not allowed. 
    */
        dropNotAllowed?: string;
    }
    /**
    A specialized floating Component that supports a drop status icon and auto-repair. 
    */
    export class StatusProxy extends Ext.Component {
    /**
    Creates new StatusProxy. 
    */
        constructor(config?: Ext.dd.StatusProxyConfig);
    /**
    Returns the ghost element 
    */
        getGhost():Ext.dom.Element;
    /**
    Causes the proxy to return to its position of origin via an animation. 
    */
        repair(xy: number[], callback: Function, scope: any):void;
    /**
    Resets the status indicator to the default dropNotAllowed value 
    */
        reset(clearGhost: boolean):void;
    /**
    Updates the proxy's visual element to indicate the status of whether or not drop is allowed
over the current target e
    */
        setStatus(cssClass: string):void;
    /**
    Stops the repair animation if it's currently running 
    */
        stop():void;
    /**
    Force the Element to sync its shadow and shim positions 
    */
        sync():void;
    }
}
declare module Ext.dd.DragDropManager {
    /**
    Deprecated inner class for cached elements. 
    */
    export class ElementWrapper {
    /**
    A reference to the style property

    */
        css: any;
    /**
    The element

    */
        el: any;
    /**
    The element id

    */
        id: any;
    }
}
declare module Ext.direct {
    interface AmfRemotingProviderConfig extends Ext.direct.ProviderConfig {
    /**
    Object literal defining the server side actions and methods. 
    */
        actions?: any;
    /**
    If true, use AMF binary encoding instead of AMFX XML-based encoding. 
    */
        binary?: string;
    /**
    true or false to enable or disable combining of method
calls. 
    */
        enableBuffer?: number|boolean;
    /**
    Specify which param will hold the arguments for the method.

    */
        enableUrlEncode?: string;
    /**
    Requred. 
    */
        endpoint?: string;
    /**
    Number of times to re-attempt delivery on failure of a call. 
    */
        maxRetries?: number;
    /**
    Namespace for the Remoting Provider (defaults to the browser global scope of window). 
    */
        namespace?: any;
    /**
    The timeout to use for each request.

    */
        timeout?: number;
    /**
    The url to connect to the Ext.direct.Manager server-side router.

    */
        url?: string;
    }
    /**
    The AmfRemotingProvider
allows making RPC calls to a Java object on a BlazeDS or ColdFusion using either the AMFX or 
    */
    export class AmfRemotingProvider extends Ext.direct.Provider {
    /**
     
    */
        constructor(config: Ext.direct.AmfRemotingProviderConfig);
    /**
    Create an event from an AMF / AMFX response object 
    */
        createEvent(response: any):Ext.direct.Event;
    /**
    Returns the value of actions. 
    */
        getActions():any;
    /**
    Returns the value of binary. 
    */
        getBinary():string;
    /**
    Returns the value of enableBuffer. 
    */
        getEnableBuffer():number|boolean;
    /**
    Returns the value of enableUrlEncode. 
    */
        getEnableUrlEncode():string;
    /**
    Returns the value of endpoint. 
    */
        getEndpoint():string;
    /**
    Returns the value of maxRetries. 
    */
        getMaxRetries():number;
    /**
    Returns the value of namespace. 
    */
        getNamespace():any;
    /**
    Returns the value of timeout. 
    */
        getTimeout():number;
    /**
    Returns the value of url. 
    */
        getUrl():string;
    /**
    Sets the value of actions. 
    */
        setActions(actions: any):void;
    /**
    Sets the value of binary. 
    */
        setBinary(binary: string):void;
    /**
    Sets the value of enableBuffer. 
    */
        setEnableBuffer(enableBuffer: number|boolean):void;
    /**
    Sets the value of enableUrlEncode. 
    */
        setEnableUrlEncode(enableUrlEncode: string):void;
    /**
    Sets the value of endpoint. 
    */
        setEndpoint(endpoint: string):void;
    /**
    Sets the value of maxRetries. 
    */
        setMaxRetries(maxRetries: number):void;
    /**
    Sets the value of namespace. 
    */
        setNamespace(namespace: any):void;
    /**
    Sets the value of timeout. 
    */
        setTimeout(timeout: number):void;
    /**
    Sets the value of url. 
    */
        setUrl(url: string):void;
    }
    /**
    Base class for all Ext.direct events. 
    */
    export class Event extends Ext.Base {
    /**
    Creates new Event. 
    */
        constructor(config?: any);
    /**
    Return the raw data for this event. 
    */
        getData():any;
    }
    /**
    An event that is fired when an exception is received from a Ext.direct.RemotingProvider

    */
    export class ExceptionEvent extends Ext.direct.RemotingEvent {
    /**
    Creates new Event. 
    */
        constructor(config?: any);
    }
    interface JsonProviderConfig extends Ext.direct.ProviderConfig {
    }
    /**
    A base provider for communicating using JSON. 
    */
    export class JsonProvider extends Ext.direct.Provider {
    /**
     
    */
        constructor(config: Ext.direct.JsonProviderConfig);
    /**
    Create an event from a response object 
    */
        createEvent(response: any):Ext.direct.Event;
    /**
    Creates a set of events based on the XHR response 
    */
        createEvents(response: any):Ext.direct.Event[];
    }
    interface ManagerConfig {
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
    /**
    Default variable name to use for Ext.Direct API declaration. 
    */
    }
    /**
    Ext Direct aims to streamline communication between the client and server
by providing a single interface that reduce
    */
    export class Manager {
    /**
    Exception types. 
    */
        static exceptions: any;
    /**
    This object holds a key for any event that has a listener. 
    */
        static hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        static isObservable: boolean;
    /**
    Appends an after-event handler. 
    */
        static addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        static addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        static addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        static addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Adds an Ext Direct Provider and creates the proxy or stub methods to execute
server-side methods for RemotingProviders. 
    */
        static addProvider(...provider: any[]):void;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        static clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        static clearManagedListeners():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        static enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        static fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        static fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        static fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Retrieves a provider by the id specified when the
provider is added. 
    */
        static getProvider(id: string|Ext.direct.Provider):void;
    /**
    Returns the value of varName. 
    */
        static getVarName():string;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        static hasListener(eventName: string):boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        static isSuspended(event?: string):boolean;
    /**
    Load Ext Direct Provider API declaration from the server and construct
a new Provider instance. 
    */
        static loadProvider(config: any, callback?: Function, scope?: any):void;
    /**
    Shorthand for addManagedListener. 
    */
        static mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        static mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        static on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        static onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        static onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Parses a direct function. 
    */
        static parseMethod(fn: string|Function):Function;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        static relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        static removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        static removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        static removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        static removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Removes the provider. 
    */
        static removeProvider(provider: string|Ext.direct.Provider):Ext.direct.Provider;
    /**
    Resumes firing of the named event(s). 
    */
        static resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        static resumeEvents(discardQueue?: boolean):void;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    An alias for addListener. 
    */
        static setListeners(listeners: any):void;
    /**
    Sets the value of varName. 
    */
        static setVarName(varName: string):void;
    /**
    Suspends firing of the named event(s). 
    */
        static suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        static suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        static un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        static unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        static unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface PollingProviderConfig extends Ext.direct.JsonProviderConfig {
    /**
    An object containing properties which are to be sent as parameters on every
polling request. 
    */
        baseParams?: any;
    /**
    How often to poll the server-side in milliseconds. 
    */
        interval?: number;
    /**
    Ext.Direct method to use for polling. 
    */
        pollFn?: string|Function;
    /**
    The url which the PollingProvider should contact with each request. 
    */
        url?: string|Function;
    }
    /**
    Provides for repetitive polling of the server at distinct intervals. 
    */
    export class PollingProvider extends Ext.direct.JsonProvider {
    /**
     
    */
        constructor(config: Ext.direct.PollingProviderConfig);
    }
    interface ProviderConfig {
    /**
    The unique id of the provider (defaults to an auto-assigned id). 
    */
        id?: string;
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    /**
    List of Provider events that should be relayed by Ext.direct.Manager. 
    */
        relayedEvents?: string[];
    }
    /**
    Ext.direct.Provider is an abstract class meant to be extended. 
    */
    export class Provider extends Ext.Base {
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
     
    */
        constructor(config: Ext.direct.ProviderConfig);
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Connect the provider and start its service. 
    */
        connect():void;
    /**
    Disconnect the provider and stop its service. 
    */
        disconnect(force: any):void;
    /**
    Do connection setup. 
    */
        doConnect():void;
    /**
    Do connection teardown. 
    */
        doDisconnect():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Returns whether or not the server-side is currently connected. 
    */
        isConnected():void;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Check if the passed configuration object contains enough
information to construct a Provider. 
    */
        checkConfig(config: any):boolean;
    }
    /**
    An event that is fired when data is received from a
Ext.direct.RemotingProvider. 
    */
    export class RemotingEvent extends Ext.direct.Event {
    /**
    Creates new Event. 
    */
        constructor(config?: any);
    /**
    Get the transaction associated with this event. 
    */
        getTransaction():Ext.direct.Transaction;
    }
    /**
    Small utility class used internally to represent a Direct method.

    */
    export class RemotingMethod extends Ext.Base {
    /**
     
    */
        constructor(config: any);
    /**
    Prepare Direct function arguments that can be used with getCallData(). 
    */
        getArgs(config: any):void;
    /**
    Takes the arguments for a Direct function and splits the arguments
from the scope and the callback. 
    */
        getCallData(args: any[]):any;
    }
    interface RemotingProviderConfig extends Ext.direct.JsonProviderConfig {
    /**
    Object literal defining the server side actions and methods. 
    */
        actions?: any;
    /**
    In versions prior to 4.2, using dotted Action names was not really meaningful,
because it generated flat namespace ob
    */
        disableNestedActions?: boolean;
    /**
    true or false to enable or disable combining of method
calls. 
    */
        enableBuffer?: number|boolean;
    /**
    Specify which param will hold the arguments for the method. 
    */
        enableUrlEncode?: string;
    /**
    Number of times to re-attempt delivery on failure of a call. 
    */
        maxRetries?: number;
    /**
    Namespace for the Remoting Provider (defaults to Ext.global). 
    */
        namespace?: any;
    /**
    The timeout to use for each request.

    */
        timeout?: number;
    /**
    Required. 
    */
        url?: string;
    }
    /**
    The RemotingProvider exposes access to
server side methods on the client (a remote procedure call (RPC) type of
conne
    */
    export class RemotingProvider extends Ext.direct.JsonProvider {
    /**
     
    */
        constructor(config: Ext.direct.RemotingProviderConfig);
    }
    interface TransactionConfig {
    /**
    Provider to use with this Transaction.

    */
        provider?: Ext.direct.Provider;
    }
    /**
    Supporting Class for Ext.Direct (not intended to be used directly).

    */
    export class Transaction extends Ext.Base {
    /**
    Creates new Transaction. 
    */
        constructor(config?: Ext.direct.TransactionConfig);
    }
}
declare module Ext.dom {
    /**
    A special Ext.dom.Element used by Buttons. 
    */
    export class ButtonElement extends Ext.dom.Element {
    /**
    Creates new Element directly by passing an id or the HTMLElement. 
    */
        constructor(element: string|HTMLElement);
    }
    /**
    This class encapsulates a collection of DOM elements, providing methods to filter members, or to perform collective
a
    */
    export class CompositeElement extends Ext.dom.CompositeElementLite {
    /**
    Creates new Element directly by passing an id or the HTMLElement. 
    */
        constructor(element: string|HTMLElement);
    }
    /**
    This class encapsulates a collection of DOM elements, providing methods to filter members, or to perform collective
a
    */
    export class CompositeElementLite extends Ext.Base {
    /**
    A reference to the Component that owns this element. 
    */
        component: Ext.Component;
    /**
    The Array of DOM elements which this CompositeElement encapsulates. 
    */
        elements: HTMLElement[];
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated CompositeElement, or subclass thereof. 
    */
        isComposite: boolean;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
    Visibility mode constant for use with setVisibilityMode. 
    */
        DISPLAY: number;
    /**
    Visibility mode constant for use with setVisibilityMode. 
    */
        OFFSETS: number;
    /**
    Visibility mode constant for use with setVisibilityMode. 
    */
        VISIBILITY: number;
    /**
    Creates new Element directly by passing an id or the HTMLElement. 
    */
        constructor(element: string|HTMLElement);
    /**
    Adds elements to this Composite object. 
    */
        add(els: HTMLElement[]|Ext.dom.CompositeElementLite, root?: HTMLElement|string):Ext.dom.CompositeElementLite;
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Adds the given CSS class(es) to this Element. 
    */
        addCls(names: string|string[], prefix?: string, suffix?: string):Ext.dom.Element;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Aligns the element with another element relative to the specified anchor points. 
    */
        alignTo(element: Ext.util.Positionable|HTMLElement|string, position?: string, offsets?: number[]):Ext.util.Positionable;
    /**
    Appends the passed element(s) to this element 
    */
        appendChild(el: any, returnDom?: boolean):Ext.dom.Element|HTMLElement;
    /**
    Appends this element to the passed element. 
    */
        appendTo(el: string|HTMLElement|Ext.dom.Element):Ext.dom.Element;
    /**
    More flexible version of setStyle for setting style properties. 
    */
        applyStyles(styles: any):Ext.dom.Element;
    /**
    Tries to blur the element. 
    */
        blur():Ext.dom.Element;
    /**
    When an element is moved around in the DOM, or is hidden using display:none, it loses layout, and therefore
all scrol
    */
        cacheScrollValues():Function;
    /**
    Centers the Element in either the viewport, or another Element. 
    */
        center(centerIn: string|HTMLElement|Ext.dom.Element):Ext.dom.Element;
    /**
    Selects a single direct child based on the passed CSS selector (the selector should not contain an id). 
    */
        child(selector: string, returnDom?: boolean):HTMLElement|Ext.dom.Element;
    /**
    Removes all elements from this Composite. 
    */
        clear(removeDom?: boolean):void;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Returns true if this composite contains the passed element 
    */
        contains(el: string|HTMLElement|Ext.dom.Element|number):boolean;
    /**
    Creates the passed DomHelper config and appends it to this element or optionally
inserts it before the passed child e
    */
        createChild(config: any, insertBefore?: HTMLElement, returnDom?: boolean):Ext.dom.Element|HTMLElement;
    /**
    Translates an element using CSS 3 in 2D. 
    */
        cssTranslate():void;
    /**
    Selects a single child at any depth below this element based on the passed CSS selector (the selector should not cont
    */
        down(selector: string, returnDom?: boolean):HTMLElement|Ext.dom.Element;
    /**
    Calls the passed function for each element in this composite. 
    */
        each(fn: (el: Ext.dom.Element, c: Ext.dom.CompositeElementLite, index: number) => any, scope?: any):Ext.dom.CompositeElementLite;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Clears this Composite and adds the elements passed. 
    */
        fill(els: HTMLElement[]|Ext.dom.CompositeElementLite):Ext.dom.CompositeElementLite;
    /**
    Filters this composite to only elements that match the passed selector. 
    */
        filter(selector: string|((el: Ext.dom.Element, index: number) => any)):Ext.dom.CompositeElementLite;
    /**
    Looks at this node and then at parent nodes for a match of the passed simple selector. 
    */
        findParent(selector: string, limit?: number|string|HTMLElement|Ext.dom.Element, returnEl?: boolean):HTMLElement|Ext.dom.Element;
    /**
    Looks at parent nodes for a match of the passed simple selector. 
    */
        findParentNode(selector: string, limit?: number|string|HTMLElement|Ext.dom.Element, returnEl?: boolean):HTMLElement|Ext.dom.Element;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Returns the first Element 
    */
        first():Ext.dom.Element;
    /**
    Tries to focus the element. 
    */
        focus(defer?: number):Ext.dom.Element;
    /**
    Gets the x,y coordinates to align this element with another element. 
    */
        getAlignToXY(element: Ext.util.Positionable|HTMLElement|string, position?: string, offsets?: number[]):number[];
    /**
    Gets the x,y coordinates specified by the anchor position on the element. 
    */
        getAnchorXY(anchor?: string, local?: boolean, size?: any):number[];
    /**
    Returns the value of an attribute from the element's underlying DOM node. 
    */
        getAttribute(name: string, namespace?: string):string;
    /**
    Returns an object containing a map of all attributes of this element's DOM node. 
    */
        getAttributes():any;
    /**
    Gets the width of the border(s) for the specified side(s) 
    */
        getBorderWidth(side: string):number;
    /**
    Gets the bottom Y coordinate of the element (element Y position + element height) 
    */
        getBottom(local: boolean):number;
    /**
    Return an object defining the area of this Element which can be passed to
setBox to set another Element's size/locati
    */
        getBox(contentBox?: boolean, local?: boolean):any;
    /**
    Returns a child element of this element given its id. 
    */
        getById(id: string, asDom?: boolean):Ext.dom.Element|HTMLElement;
    /**
    Returns the content region of this element for purposes of constraining floating
children. 
    */
        getConstrainRegion():void;
    /**
    Returns the [X, Y] vector by which this Positionable's element must be translated to make a best
attempt to constrain
    */
        getConstrainVector(constrainTo?: Ext.util.Positionable|HTMLElement|string|Ext.util.Region, proposedPosition?: number[], proposedSize?: number[]):number[]|boolean;
    /**
    Returns the number of elements in this Composite. 
    */
        getCount():number;
    /**
    Returns the innerHTML of an Element or an empty string if the element's
dom no longer exists. 
    */
        getHTML():string;
    /**
    Returns the offset height of the element. 
    */
        getHeight(contentHeight?: boolean):number;
    /**
    Returns the innerHTML of an Element or an empty string if the element's
dom no longer exists. 
    */
        getHtml():string;
    /**
    Gets the left X coordinate 
    */
        getLeft(local: boolean):number;
    /**
    Returns the x coordinate of this element reletive to its offsetParent. 
    */
        getLocalX():number;
    /**
    Returns the x and y coordinates of this element relative to its offsetParent. 
    */
        getLocalXY():number[];
    /**
    Returns the y coordinate of this element reletive to its offsetParent. 
    */
        getLocalY():number;
    /**
    Returns an object with properties top, left, right and bottom representing the margins of this element unless sides i
    */
        getMargin(sides?: string):any;
    /**
    Returns the offsets of this element from the passed element. 
    */
        getOffsetsTo(offsetsTo: Ext.util.Positionable|HTMLElement|string):number[];
    /**
    Retrieves the height of the element account for the top and bottom margins. 
    */
        getOuterHeight():void;
    /**
    Retrieves the width of the element accounting for the left and right margins. 
    */
        getOuterWidth():void;
    /**
    Gets the width of the padding(s) for the specified side(s). 
    */
        getPadding(side: string):number;
    /**
    Returns an object defining the area of this Element which can be passed to
Ext.util.Positionable.setBox to set anothe
    */
        getPageBox(asRegion?: boolean):any;
    /**
    Returns a region object that defines the area of this element. 
    */
        getRegion():Ext.util.Region;
    /**
    Gets the right X coordinate of the element (element X position + element width) 
    */
        getRight(local: boolean):number;
    /**
    Returns the current scroll position of the element. 
    */
        getScroll():any;
    /**
    Gets the left scroll position 
    */
        getScrollLeft():number;
    /**
    Gets the Scroller instance of the first parent that has one. 
    */
        getScrollParent():void;
    /**
    Gets the top scroll position 
    */
        getScrollTop():number;
    /**
    Returns the size of the element. 
    */
        getSize(contentSize?: boolean):any;
    /**
    Returns a named style property based on computed/currentStyle (primary) and
inline-style if primary is not available. 
    */
        getStyle(property: string|string[], inline?: boolean):any;
    /**
    Returns the width in pixels of the passed text, or the width of the text in this Element. 
    */
        getTextWidth(text: string, min?: number, max?: number):number;
    /**
    Gets the top Y coordinate 
    */
        getTop(local: boolean):number;
    /**
    Returns the value of the value attribute. 
    */
        getValue(asNumber: boolean):string|number;
    /**
    Returns the content region of this element. 
    */
        getViewRegion():Ext.util.Region;
    /**
    Returns the dimensions of the element available to lay content out in. 
    */
        getViewSize():any;
    /**
    Returns the offset width of the element. 
    */
        getWidth(contentWidth?: boolean):number;
    /**
    Gets element X position in page coordinates 
    */
        getX():number;
    /**
    Gets element X and Y positions in page coordinates 
    */
        getXY():any[];
    /**
    Gets element Y position in page coordinates 
    */
        getY():number;
    /**
    Returns this element's z-index 
    */
        getZIndex():number;
    /**
    Checks if the specified CSS class exists on this element's DOM node. 
    */
        hasCls(name: string):boolean;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Generates unique ids. 
    */
        id(obj?: any, prefix?: string):string;
    /**
    Find the index of the passed element within the composite collection. 
    */
        indexOf(el: string|HTMLElement|Ext.dom.Element|number):number;
    /**
    Inserts this element after the passed element in the DOM. 
    */
        insertAfter(el: string|HTMLElement|Ext.dom.Element):Ext.dom.Element;
    /**
    Inserts this element before the passed element in the DOM. 
    */
        insertBefore(el: string|HTMLElement|Ext.dom.Element):Ext.dom.Element;
    /**
    Inserts (or creates) an element as the first child of this element 
    */
        insertFirst(el: any, returnDom?: boolean):Ext.dom.Element|HTMLElement;
    /**
    Inserts an html fragment into this element 
    */
        insertHtml(where: string, html: string, returnEl?: boolean):HTMLElement|Ext.dom.Element;
    /**
    Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element 
    */
        insertSibling(el: any, where?: string, returnDom?: boolean):Ext.dom.Element|HTMLElement;
    /**
    Returns true if this element matches the passed simple selector
(e.g. 
    */
        is(selector: string|Function):boolean;
    /**
    Returns true if this element is an ancestor of the passed element 
    */
        isAncestor(el: string|HTMLElement|Ext.dom.Element):boolean;
    /**
    Determines if this element is a descendant of the passed in Element. 
    */
        isDescendent():void;
    /**
    Checks if the current value of a style is equal to a given value. 
    */
        isStyle(style: string, value: string):boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Returns true if the value of the given property is visually transparent. 
    */
        isTransparent(prop: string):boolean;
    /**
    Checks whether the element is currently visible using both visibility and display properties. 
    */
        isVisible(deep?: boolean):boolean;
    /**
    Returns a flyweight Element of the dom element object at the specified index. 
    */
        item(index: number):Ext.dom.Element;
    /**
    Returns the last Element 
    */
        last():Ext.dom.Element;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Move the element relative to its current position. 
    */
        move(direction: string, distance: number):void;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Gets the next sibling, skipping text nodes 
    */
        next(selector?: string, returnDom?: boolean):Ext.dom.Element|HTMLElement;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Gets the parent node for this element, optionally chaining up trying to match a selector 
    */
        parent(selector?: string, returnDom?: boolean):Ext.dom.Element|HTMLElement;
    /**
    Initializes positioning on this element. 
    */
        position(pos?: string, zIndex?: number, x?: number, y?: number):void;
    /**
    Gets the previous sibling, skipping text nodes 
    */
        prev(selector?: string, returnDom?: boolean):Ext.dom.Element|HTMLElement;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        purgeAllListeners():void;
    /**
    Selects child nodes based on the passed CSS selector. 
    */
        query(selector: string, asDom?: boolean):HTMLElement[]|Ext.dom.Element[];
    /**
    Adds one or more CSS classes to this element and removes the same class(es) from all siblings. 
    */
        radioCls(className: string|string[]):Ext.dom.Element;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Destroys this element by removing it from the cache, removing its DOM reference,
and removing all of its event listen
    */
        remove():void;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        removeAllListeners():void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes the given CSS class(es) from this Element. 
    */
        removeCls(names: string|string[], prefix?: string, suffix?: string):void;
    /**
    Removes the specified element(s). 
    */
        removeElement(el: string|HTMLElement|Ext.dom.Element|number, removeDom?: boolean):Ext.dom.CompositeElementLite;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Forces the browser to repaint this element. 
    */
        repaint():Ext.dom.Element;
    /**
    Replaces the passed element with this element 
    */
        replace(el: string|HTMLElement|Ext.dom.Element, destroy?: boolean):Ext.dom.Element;
    /**
    Replaces a CSS class on the element with another. 
    */
        replaceCls(oldName: string, newName: string, prefix?: string, suffix?: string):Ext.dom.Element;
    /**
    Replaces the specified element with the passed element. 
    */
        replaceElement(el: string|HTMLElement|Ext.dom.Element|number, replacement: string|Ext.dom.Element, domReplace?: boolean):Ext.dom.CompositeElementLite;
    /**
    Replaces this element with the passed element 
    */
        replaceWith(el: any):Ext.dom.Element;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    Scrolls this element the specified direction. 
    */
        scroll(direction: string, distance: number, animate?: any):boolean;
    /**
    Scrolls this element by the passed delta values, optionally animating. 
    */
        scrollBy(deltaX: any, deltaY: any, animate: any):Ext.dom.Element;
    /**
    Scrolls this element into view within the passed container. 
    */
        scrollIntoView(container?: string|HTMLElement|Ext.dom.Element, hscroll?: boolean, animate?: any, highlight?: boolean):Ext.dom.Element;
    /**
    Scrolls this element the specified scroll point. 
    */
        scrollTo(side: string, value: number, animate?: any):Ext.dom.Element;
    /**
    Selects descendant elements of this element based on the passed CSS selector to
enable Element methods to be applied 
    */
        select(selector: string|HTMLElement[], composite: boolean):Ext.dom.CompositeElementLite|Ext.dom.CompositeElement;
    /**
    Selects a single descendant element of this element using a CSS selector
(see query). 
    */
        selectNode(selector: string, asDom?: boolean):HTMLElement|Ext.dom.Element;
    /**
    Sets the passed attributes as attributes of this element (a style attribute
can be a string, object or function). 
    */
        set(attributes: any, useSet?: boolean):Ext.dom.Element;
    /**
    Sets the element's CSS bottom style. 
    */
        setBottom(bottom: number|string):Ext.dom.Element;
    /**
    Sets the element's box. 
    */
        setBox(box: any):Ext.util.Positionable;
    /**
    Sets the specified CSS class on this element's DOM node. 
    */
        setCls(className: string|any[]):void;
    /**
     
    */
        setHTML():void;
    /**
    Sets the element's left position directly using CSS style
(instead of setX). 
    */
        setLeft(left: number|string):Ext.dom.Element;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Sets the local x coordinate of this element using CSS style. 
    */
        setLocalX(x: number):Ext.util.Positionable;
    /**
    Sets the local x and y coordinates of this element using CSS style. 
    */
        setLocalXY(x: number|any[], y?: number):Ext.util.Positionable;
    /**
    Sets the local y coordinate of this element using CSS style. 
    */
        setLocalY(y: number):Ext.util.Positionable;
    /**
    Set the maximum height of this Element. 
    */
        setMaxHeight(height: number|string):Ext.dom.Element;
    /**
    Set the maximum width of this Element. 
    */
        setMaxWidth(width: number|string):Ext.dom.Element;
    /**
    Set the minimum height of this Element. 
    */
        setMinHeight(height: number|string):Ext.dom.Element;
    /**
    Set the minimum width of this Element. 
    */
        setMinWidth(width: number|string):Ext.dom.Element;
    /**
    Sets the element's CSS right style. 
    */
        setRight(right: number|string):Ext.dom.Element;
    /**
    Sets the left scroll position 
    */
        setScrollLeft(left: number):Ext.dom.Element;
    /**
    Sets the top scroll position 
    */
        setScrollTop(top: number):Ext.dom.Element;
    /**
    Wrapper for setting style properties, also takes single object parameter of
multiple styles. 
    */
        setStyle(property: any, value?: string):Ext.dom.Element;
    /**
    Sets the element's top position directly using CSS style
(instead of setY). 
    */
        setTop(top: number|string):Ext.dom.Element;
    /**
    Sets the element's top and left positions directly using CSS style. 
    */
        setTopLeft():void;
    /**
    Use this to change the visibility mode between VISIBILITY,
DISPLAY or OFFSETS. 
    */
        setVisibilityMode(mode: any):Ext.dom.Element;
    /**
    Sets this Element's page-level x coordinate 
    */
        setX(x: number):Ext.dom.Element;
    /**
    Sets this Element's page-level x and y coordinates 
    */
        setXY(xy: number[]):Ext.dom.Element;
    /**
    Sets this Element's page-level y coordinate 
    */
        setY(y: number):Ext.dom.Element;
    /**
    Sets the z-index of this Element and synchronizes the z-index of shadow and/or
shim if present. 
    */
        setZIndex(zindex: number):Ext.dom.Element;
    /**
    Gets a range nodes. 
    */
        slice(start?: number, end?: number):HTMLElement[];
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it). 
    */
        toggleCls(className: string):Ext.dom.Element;
    /**
    Translates the passed page coordinates into left/top css values for the element 
    */
        translatePoints(x: number|any[], y?: number):any;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    .
Walks up the dom looking for a parent node that matches the passed simple selector (e.g. 
    */
        up(selector: string, limit?: number|string|HTMLElement|Ext.dom.Element, returnDom?: boolean):Ext.dom.Element|HTMLElement;
    /**
     
    */
        update(html: any):void;
    /**
    Creates and wraps this element with another element 
    */
        wrap(config?: any, returnDom?: boolean, selector?: string):HTMLElement|Ext.dom.Element;
    /**
    Gets the globally shared flyweight Element, with the passed node as the active
element. 
    */
        fly(dom: string|HTMLElement, named?: string):Ext.dom.Element;
    /**
    Returns the top Element that is located at the passed coordinates 
    */
        fromPoint(x: number, y: number):string;
    /**
    Retrieves Ext.dom.Element objects. 
    */
        get(element: string|HTMLElement|Ext.dom.Element):Ext.dom.Element;
    /**
    Returns the active element in the DOM. 
    */
        getActiveElement():HTMLElement;
    /**
    Returns the common ancestor of the two passed elements. 
    */
        getCommonAncestor(nodeA: Ext.dom.Element|HTMLElement, nodeB: Ext.dom.Element|HTMLElement, returnDom: boolean):Ext.dom.Element|HTMLElement;
    /**
    Retrieves the document height 
    */
        getDocumentHeight():number;
    /**
    Retrieves the document width 
    */
        getDocumentWidth():number;
    /**
    Retrieves the current orientation of the window. 
    */
        getOrientation():string;
    /**
    Retrieves the viewport size of the window. 
    */
        getViewSize():any;
    /**
    Retrieves the viewport height of the window. 
    */
        getViewportHeight():number;
    /**
    Retrieves the viewport width of the window. 
    */
        getViewportWidth():number;
    /**
    Normalizes CSS property keys from dash delimited to camel case JavaScript Syntax. 
    */
        normalize(prop: string):string;
    /**
    Parses a number or string representing margin sizes into an object. 
    */
        parseBox(box: number|string):any;
    /**
    Converts a CSS string into an object with a property for each style. 
    */
        parseStyles(styles: string):any;
    /**
    Selects child nodes of a given root based on the passed CSS selector. 
    */
        query(selector: string, asDom?: boolean, root?: HTMLElement|string):HTMLElement[]|Ext.dom.Element[];
    /**
    Selects elements based on the passed CSS selector to enable
Element methods to be applied to many related
elements in
    */
        select(selector: string|HTMLElement[], composite?: boolean, root?: HTMLElement|string):Ext.dom.CompositeElementLite|Ext.dom.CompositeElement;
    /**
    Serializes a DOM form into a url encoded string 
    */
        serializeForm(form: any):string;
    /**
    Parses a number or string representing margin sizes into an object. 
    */
        unitizeBox(box: any, units: string):string;
    }
    /**
    Encapsulates a DOM element, adding simple DOM manipulation facilities, normalizing for browser differences. 
    */
    export class Element extends Ext.Base {
    /**
    A reference to the Component that owns this element. 
    */
        component: Ext.Component;
    /**
    The DOM element

    */
        dom: HTMLElement;
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
    Visibility mode constant for use with setVisibilityMode. 
    */
        DISPLAY: number;
    /**
    Visibility mode constant for use with setVisibilityMode. 
    */
        OFFSETS: number;
    /**
    Visibility mode constant for use with setVisibilityMode. 
    */
        VISIBILITY: number;
    /**
    Creates new Element directly by passing an id or the HTMLElement. 
    */
        constructor(element: string|HTMLElement);
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Adds the given CSS class(es) to this Element. 
    */
        addCls(names: string|string[], prefix?: string, suffix?: string):Ext.dom.Element;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Aligns the element with another element relative to the specified anchor points. 
    */
        alignTo(element: Ext.util.Positionable|HTMLElement|string, position?: string, offsets?: number[]):Ext.util.Positionable;
    /**
    Appends the passed element(s) to this element 
    */
        appendChild(el: any, returnDom?: boolean):Ext.dom.Element|HTMLElement;
    /**
    Appends this element to the passed element. 
    */
        appendTo(el: string|HTMLElement|Ext.dom.Element):Ext.dom.Element;
    /**
    More flexible version of setStyle for setting style properties. 
    */
        applyStyles(styles: any):Ext.dom.Element;
    /**
    Tries to blur the element. 
    */
        blur():Ext.dom.Element;
    /**
    When an element is moved around in the DOM, or is hidden using display:none, it loses layout, and therefore
all scrol
    */
        cacheScrollValues():Function;
    /**
    Centers the Element in either the viewport, or another Element. 
    */
        center(centerIn: string|HTMLElement|Ext.dom.Element):Ext.dom.Element;
    /**
    Selects a single direct child based on the passed CSS selector (the selector should not contain an id). 
    */
        child(selector: string, returnDom?: boolean):HTMLElement|Ext.dom.Element;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Returns true if this element is an ancestor of the passed element, or is
the element. 
    */
        contains(element: HTMLElement|string):boolean;
    /**
    Creates the passed DomHelper config and appends it to this element or optionally
inserts it before the passed child e
    */
        createChild(config: any, insertBefore?: HTMLElement, returnDom?: boolean):Ext.dom.Element|HTMLElement;
    /**
    Translates an element using CSS 3 in 2D. 
    */
        cssTranslate():void;
    /**
    Selects a single child at any depth below this element based on the passed CSS selector (the selector should not cont
    */
        down(selector: string, returnDom?: boolean):HTMLElement|Ext.dom.Element;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Looks at this node and then at parent nodes for a match of the passed simple selector. 
    */
        findParent(selector: string, limit?: number|string|HTMLElement|Ext.dom.Element, returnEl?: boolean):HTMLElement|Ext.dom.Element;
    /**
    Looks at parent nodes for a match of the passed simple selector. 
    */
        findParentNode(selector: string, limit?: number|string|HTMLElement|Ext.dom.Element, returnEl?: boolean):HTMLElement|Ext.dom.Element;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Gets the first child, skipping text nodes 
    */
        first(selector?: string, returnDom?: boolean):Ext.dom.Element|HTMLElement;
    /**
    Tries to focus the element. 
    */
        focus(defer?: number):Ext.dom.Element;
    /**
    Gets the x,y coordinates to align this element with another element. 
    */
        getAlignToXY(element: Ext.util.Positionable|HTMLElement|string, position?: string, offsets?: number[]):number[];
    /**
    Gets the x,y coordinates specified by the anchor position on the element. 
    */
        getAnchorXY(anchor?: string, local?: boolean, size?: any):number[];
    /**
    Returns the value of an attribute from the element's underlying DOM node. 
    */
        getAttribute(name: string, namespace?: string):string;
    /**
    Returns an object containing a map of all attributes of this element's DOM node. 
    */
        getAttributes():any;
    /**
    Gets the width of the border(s) for the specified side(s) 
    */
        getBorderWidth(side: string):number;
    /**
    Gets the bottom Y coordinate of the element (element Y position + element height) 
    */
        getBottom(local: boolean):number;
    /**
    Return an object defining the area of this Element which can be passed to
setBox to set another Element's size/locati
    */
        getBox(contentBox?: boolean, local?: boolean):any;
    /**
    Returns a child element of this element given its id. 
    */
        getById(id: string, asDom?: boolean):Ext.dom.Element|HTMLElement;
    /**
    Returns the content region of this element for purposes of constraining floating
children. 
    */
        getConstrainRegion():void;
    /**
    Returns the [X, Y] vector by which this Positionable's element must be translated to make a best
attempt to constrain
    */
        getConstrainVector(constrainTo?: Ext.util.Positionable|HTMLElement|string|Ext.util.Region, proposedPosition?: number[], proposedSize?: number[]):number[]|boolean;
    /**
    Returns the innerHTML of an Element or an empty string if the element's
dom no longer exists. 
    */
        getHTML():string;
    /**
    Returns the offset height of the element. 
    */
        getHeight(contentHeight?: boolean):number;
    /**
    Returns the innerHTML of an Element or an empty string if the element's
dom no longer exists. 
    */
        getHtml():string;
    /**
    Gets the left X coordinate 
    */
        getLeft(local: boolean):number;
    /**
    Returns the x coordinate of this element reletive to its offsetParent. 
    */
        getLocalX():number;
    /**
    Returns the x and y coordinates of this element relative to its offsetParent. 
    */
        getLocalXY():number[];
    /**
    Returns the y coordinate of this element reletive to its offsetParent. 
    */
        getLocalY():number;
    /**
    Returns an object with properties top, left, right and bottom representing the margins of this element unless sides i
    */
        getMargin(sides?: string):any;
    /**
    Returns the offsets of this element from the passed element. 
    */
        getOffsetsTo(offsetsTo: Ext.util.Positionable|HTMLElement|string):number[];
    /**
    Retrieves the height of the element account for the top and bottom margins. 
    */
        getOuterHeight():void;
    /**
    Retrieves the width of the element accounting for the left and right margins. 
    */
        getOuterWidth():void;
    /**
    Gets the width of the padding(s) for the specified side(s). 
    */
        getPadding(side: string):number;
    /**
    Returns an object defining the area of this Element which can be passed to
Ext.util.Positionable.setBox to set anothe
    */
        getPageBox(asRegion?: boolean):any;
    /**
    Returns a region object that defines the area of this element. 
    */
        getRegion():Ext.util.Region;
    /**
    Gets the right X coordinate of the element (element X position + element width) 
    */
        getRight(local: boolean):number;
    /**
    Returns the current scroll position of the element. 
    */
        getScroll():any;
    /**
    Gets the left scroll position 
    */
        getScrollLeft():number;
    /**
    Gets the Scroller instance of the first parent that has one. 
    */
        getScrollParent():void;
    /**
    Gets the top scroll position 
    */
        getScrollTop():number;
    /**
    Returns the size of the element. 
    */
        getSize(contentSize?: boolean):any;
    /**
    Returns a named style property based on computed/currentStyle (primary) and
inline-style if primary is not available. 
    */
        getStyle(property: string|string[], inline?: boolean):any;
    /**
    Returns the width in pixels of the passed text, or the width of the text in this Element. 
    */
        getTextWidth(text: string, min?: number, max?: number):number;
    /**
    Gets the top Y coordinate 
    */
        getTop(local: boolean):number;
    /**
    Returns the value of the value attribute. 
    */
        getValue(asNumber: boolean):string|number;
    /**
    Returns the content region of this element. 
    */
        getViewRegion():Ext.util.Region;
    /**
    Returns the dimensions of the element available to lay content out in. 
    */
        getViewSize():any;
    /**
    Returns the offset width of the element. 
    */
        getWidth(contentWidth?: boolean):number;
    /**
    Gets element X position in page coordinates 
    */
        getX():number;
    /**
    Gets element X and Y positions in page coordinates 
    */
        getXY():any[];
    /**
    Gets element Y position in page coordinates 
    */
        getY():number;
    /**
    Returns this element's z-index 
    */
        getZIndex():number;
    /**
    Checks if the specified CSS class exists on this element's DOM node. 
    */
        hasCls(name: string):boolean;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Generates unique ids. 
    */
        id(obj?: any, prefix?: string):string;
    /**
    Inserts this element after the passed element in the DOM. 
    */
        insertAfter(el: string|HTMLElement|Ext.dom.Element):Ext.dom.Element;
    /**
    Inserts this element before the passed element in the DOM. 
    */
        insertBefore(el: string|HTMLElement|Ext.dom.Element):Ext.dom.Element;
    /**
    Inserts (or creates) an element as the first child of this element 
    */
        insertFirst(el: any, returnDom?: boolean):Ext.dom.Element|HTMLElement;
    /**
    Inserts an html fragment into this element 
    */
        insertHtml(where: string, html: string, returnEl?: boolean):HTMLElement|Ext.dom.Element;
    /**
    Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element 
    */
        insertSibling(el: any, where?: string, returnDom?: boolean):Ext.dom.Element|HTMLElement;
    /**
    Returns true if this element matches the passed simple selector
(e.g. 
    */
        is(selector: string|Function):boolean;
    /**
    Returns true if this element is an ancestor of the passed element 
    */
        isAncestor(el: string|HTMLElement|Ext.dom.Element):boolean;
    /**
    Determines if this element is a descendant of the passed in Element. 
    */
        isDescendent():void;
    /**
    Checks if the current value of a style is equal to a given value. 
    */
        isStyle(style: string, value: string):boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Returns true if the value of the given property is visually transparent. 
    */
        isTransparent(prop: string):boolean;
    /**
    Checks whether the element is currently visible using both visibility and display properties. 
    */
        isVisible(deep?: boolean):boolean;
    /**
    Gets the last child, skipping text nodes 
    */
        last(selector?: string, returnDom?: boolean):Ext.dom.Element|HTMLElement;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Move the element relative to its current position. 
    */
        move(direction: string, distance: number):void;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Gets the next sibling, skipping text nodes 
    */
        next(selector?: string, returnDom?: boolean):Ext.dom.Element|HTMLElement;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Gets the parent node for this element, optionally chaining up trying to match a selector 
    */
        parent(selector?: string, returnDom?: boolean):Ext.dom.Element|HTMLElement;
    /**
    Initializes positioning on this element. 
    */
        position(pos?: string, zIndex?: number, x?: number, y?: number):void;
    /**
    Gets the previous sibling, skipping text nodes 
    */
        prev(selector?: string, returnDom?: boolean):Ext.dom.Element|HTMLElement;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        purgeAllListeners():void;
    /**
    Selects child nodes based on the passed CSS selector. 
    */
        query(selector: string, asDom?: boolean):HTMLElement[]|Ext.dom.Element[];
    /**
    Adds one or more CSS classes to this element and removes the same class(es) from all siblings. 
    */
        radioCls(className: string|string[]):Ext.dom.Element;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Destroys this element by removing it from the cache, removing its DOM reference,
and removing all of its event listen
    */
        remove():void;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        removeAllListeners():void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes the given CSS class(es) from this Element. 
    */
        removeCls(names: string|string[], prefix?: string, suffix?: string):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Forces the browser to repaint this element. 
    */
        repaint():Ext.dom.Element;
    /**
    Replaces the passed element with this element 
    */
        replace(el: string|HTMLElement|Ext.dom.Element, destroy?: boolean):Ext.dom.Element;
    /**
    Replaces a CSS class on the element with another. 
    */
        replaceCls(oldName: string, newName: string, prefix?: string, suffix?: string):Ext.dom.Element;
    /**
    Replaces this element with the passed element 
    */
        replaceWith(el: any):Ext.dom.Element;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    Scrolls this element the specified direction. 
    */
        scroll(direction: string, distance: number, animate?: any):boolean;
    /**
    Scrolls this element by the passed delta values, optionally animating. 
    */
        scrollBy(deltaX: any, deltaY: any, animate: any):Ext.dom.Element;
    /**
    Scrolls this element into view within the passed container. 
    */
        scrollIntoView(container?: string|HTMLElement|Ext.dom.Element, hscroll?: boolean, animate?: any, highlight?: boolean):Ext.dom.Element;
    /**
    Scrolls this element the specified scroll point. 
    */
        scrollTo(side: string, value: number, animate?: any):Ext.dom.Element;
    /**
    Selects descendant elements of this element based on the passed CSS selector to
enable Element methods to be applied 
    */
        select(selector: string|HTMLElement[], composite: boolean):Ext.dom.CompositeElementLite|Ext.dom.CompositeElement;
    /**
    Selects a single descendant element of this element using a CSS selector
(see query). 
    */
        selectNode(selector: string, asDom?: boolean):HTMLElement|Ext.dom.Element;
    /**
    Sets the passed attributes as attributes of this element (a style attribute
can be a string, object or function). 
    */
        set(attributes: any, useSet?: boolean):Ext.dom.Element;
    /**
    Sets the element's CSS bottom style. 
    */
        setBottom(bottom: number|string):Ext.dom.Element;
    /**
    Sets the element's box. 
    */
        setBox(box: any):Ext.util.Positionable;
    /**
    Sets the specified CSS class on this element's DOM node. 
    */
        setCls(className: string|any[]):void;
    /**
     
    */
        setHTML():void;
    /**
    Sets the element's left position directly using CSS style
(instead of setX). 
    */
        setLeft(left: number|string):Ext.dom.Element;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Sets the local x coordinate of this element using CSS style. 
    */
        setLocalX(x: number):Ext.util.Positionable;
    /**
    Sets the local x and y coordinates of this element using CSS style. 
    */
        setLocalXY(x: number|any[], y?: number):Ext.util.Positionable;
    /**
    Sets the local y coordinate of this element using CSS style. 
    */
        setLocalY(y: number):Ext.util.Positionable;
    /**
    Set the maximum height of this Element. 
    */
        setMaxHeight(height: number|string):Ext.dom.Element;
    /**
    Set the maximum width of this Element. 
    */
        setMaxWidth(width: number|string):Ext.dom.Element;
    /**
    Set the minimum height of this Element. 
    */
        setMinHeight(height: number|string):Ext.dom.Element;
    /**
    Set the minimum width of this Element. 
    */
        setMinWidth(width: number|string):Ext.dom.Element;
    /**
    Sets the element's CSS right style. 
    */
        setRight(right: number|string):Ext.dom.Element;
    /**
    Sets the left scroll position 
    */
        setScrollLeft(left: number):Ext.dom.Element;
    /**
    Sets the top scroll position 
    */
        setScrollTop(top: number):Ext.dom.Element;
    /**
    Wrapper for setting style properties, also takes single object parameter of
multiple styles. 
    */
        setStyle(property: any, value?: string):Ext.dom.Element;
    /**
    Sets the element's top position directly using CSS style
(instead of setY). 
    */
        setTop(top: number|string):Ext.dom.Element;
    /**
    Sets the element's top and left positions directly using CSS style. 
    */
        setTopLeft():void;
    /**
    Use this to change the visibility mode between VISIBILITY,
DISPLAY or OFFSETS. 
    */
        setVisibilityMode(mode: any):Ext.dom.Element;
    /**
    Sets this Element's page-level x coordinate 
    */
        setX(x: number):Ext.dom.Element;
    /**
    Sets this Element's page-level x and y coordinates 
    */
        setXY(xy: number[]):Ext.dom.Element;
    /**
    Sets this Element's page-level y coordinate 
    */
        setY(y: number):Ext.dom.Element;
    /**
    Sets the z-index of this Element and synchronizes the z-index of shadow and/or
shim if present. 
    */
        setZIndex(zindex: number):Ext.dom.Element;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it). 
    */
        toggleCls(className: string):Ext.dom.Element;
    /**
    Translates the passed page coordinates into left/top css values for the element 
    */
        translatePoints(x: number|any[], y?: number):any;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    .
Walks up the dom looking for a parent node that matches the passed simple selector (e.g. 
    */
        up(selector: string, limit?: number|string|HTMLElement|Ext.dom.Element, returnDom?: boolean):Ext.dom.Element|HTMLElement;
    /**
     
    */
        update(html: any):void;
    /**
    Creates and wraps this element with another element 
    */
        wrap(config?: any, returnDom?: boolean, selector?: string):HTMLElement|Ext.dom.Element;
    /**
    Gets the globally shared flyweight Element, with the passed node as the active
element. 
    */
        fly(dom: string|HTMLElement, named?: string):Ext.dom.Element;
    /**
    Returns the top Element that is located at the passed coordinates 
    */
        fromPoint(x: number, y: number):string;
    /**
    Retrieves Ext.dom.Element objects. 
    */
        get(element: string|HTMLElement|Ext.dom.Element):Ext.dom.Element;
    /**
    Returns the active element in the DOM. 
    */
        getActiveElement():HTMLElement;
    /**
    Returns the common ancestor of the two passed elements. 
    */
        getCommonAncestor(nodeA: Ext.dom.Element|HTMLElement, nodeB: Ext.dom.Element|HTMLElement, returnDom: boolean):Ext.dom.Element|HTMLElement;
    /**
    Retrieves the document height 
    */
        getDocumentHeight():number;
    /**
    Retrieves the document width 
    */
        getDocumentWidth():number;
    /**
    Retrieves the current orientation of the window. 
    */
        getOrientation():string;
    /**
    Retrieves the viewport size of the window. 
    */
        getViewSize():any;
    /**
    Retrieves the viewport height of the window. 
    */
        getViewportHeight():number;
    /**
    Retrieves the viewport width of the window. 
    */
        getViewportWidth():number;
    /**
    Normalizes CSS property keys from dash delimited to camel case JavaScript Syntax. 
    */
        normalize(prop: string):string;
    /**
    Parses a number or string representing margin sizes into an object. 
    */
        parseBox(box: number|string):any;
    /**
    Converts a CSS string into an object with a property for each style. 
    */
        parseStyles(styles: string):any;
    /**
    Selects child nodes of a given root based on the passed CSS selector. 
    */
        query(selector: string, asDom?: boolean, root?: HTMLElement|string):HTMLElement[]|Ext.dom.Element[];
    /**
    Selects elements based on the passed CSS selector to enable
Element methods to be applied to many related
elements in
    */
        select(selector: string|HTMLElement[], composite?: boolean, root?: HTMLElement|string):Ext.dom.CompositeElementLite|Ext.dom.CompositeElement;
    /**
    Serializes a DOM form into a url encoded string 
    */
        serializeForm(form: any):string;
    /**
    Parses a number or string representing margin sizes into an object. 
    */
        unitizeBox(box: any, units: string):string;
    }
    /**
    A special Ext.util.Event subclass that adds support for capture (top-down propagation)
listeners, and non-delegated (
    */
    export class ElementEvent extends Ext.util.Event {
    }
    /**
    A flyweight Ext.dom.Element that can be dynamically attached to a DOM node. 
    */
    export class Fly extends Ext.dom.Element {
    /**
    This is true to identify Element flyweights 
    */
        isFly: boolean;
    /**
    Creates new Element directly by passing an id or the HTMLElement. 
    */
        constructor(element: string|HTMLElement);
    }
    /**
    Garbage collector for Ext.dom.Element instances. 
    */
    export class GarbageCollector {
    /**
    The interval at which to run Element garbage collection. 
    */
        static interval: number;
    /**
    Collects orphaned Ext.dom.Elements by removing their listeners and evicting them
from the cache. 
    */
        static collect():string[];
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Pauses the timer and stops garbage collection 
    */
        static pause():void;
    /**
    Resumes garbage collection at the specified interval 
    */
        static resume():void;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    /**
    The DomHelper class provides a layer of abstraction from DOM and transparently supports creating elements via DOM or

    */
    export class Helper {
    /**
    Creates new DOM element(s) and appends them to el. 
    */
        static append(el: string|HTMLElement|Ext.dom.Element, o: any, returnElement?: boolean):HTMLElement|Ext.dom.Element;
    /**
    Applies a style specification to an element. 
    */
        static applyStyles(el: string|HTMLElement|Ext.dom.Element, styles: any):void;
    /**
    Creates new DOM element(s) without inserting them to the document. 
    */
        static createDom(o: any):HTMLElement;
    /**
    Alias for markup. 
    */
        static createHtml(spec: any):void;
    /**
    Creates a new Ext.Template from the DOM object spec. 
    */
        static createTemplate(o: any):Ext.Template;
    /**
    Converts the styles from the given object to text. 
    */
        static generateStyles(styles: any, buffer?: string[], encode?: boolean):string|string[];
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Creates new DOM element(s) and inserts them after el. 
    */
        static insertAfter(el: string|HTMLElement|Ext.dom.Element, o: any, returnElement?: boolean):HTMLElement|Ext.dom.Element;
    /**
    Creates new DOM element(s) and inserts them before el. 
    */
        static insertBefore(el: string|HTMLElement|Ext.dom.Element, o: any, returnElement?: boolean):HTMLElement|Ext.dom.Element;
    /**
    Creates new DOM element(s) and inserts them as the first child of el. 
    */
        static insertFirst(el: string|HTMLElement|Ext.dom.Element, o: any, returnElement?: boolean):HTMLElement|Ext.dom.Element;
    /**
    Inserts an HTML fragment into the DOM. 
    */
        static insertHtml(where: string, el: HTMLElement|Text, html: string):HTMLElement;
    /**
    Returns the markup for the passed Element(s) config. 
    */
        static markup(spec: any):string;
    /**
    Creates new DOM element(s) and overwrites the contents of el with them. 
    */
        static overwrite(el: string|HTMLElement|Ext.dom.Element, o: any, returnElement?: boolean):HTMLElement|Ext.dom.Element;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface LayerConfig {
    /**
    CSS class to add to the element

    */
        cls?: string;
    /**
    False to disable constrain to viewport. 
    */
        constrain?: boolean;
    /**
    DomHelper object config to create element with. 
    */
        dh?: any;
    /**
    A String which specifies how this Layer will be hidden. 
    */
        hideMode?: string;
    /**
    True to automatically create an Ext.Shadow, or a string indicating the
shadow's display Ext.Shadow.mode. 
    */
        shadow?: string|boolean;
    /**
    Number of pixels to offset the shadow 
    */
        shadowOffset?: number;
    /**
    True to automatically create a Ext.dom.Shim. 
    */
        shim?: string|boolean;
    /**
    Defaults to use css offsets to hide the Layer. 
    */
        useDisplay?: boolean;
    /**
    The CSS class name to add in order to hide this Layer if this layer
is configured with hideMode: 'asclass'

    */
        visibilityCls?: string;
    /**
    Starting z-index. 
    */
        zindex?: number;
    }
    /**
    An extended Ext.dom.Element object that supports a shadow and shim 
    */
    export class Layer extends Ext.dom.Element {
    /**
    Creates new Layer. 
    */
        constructor(config?: Ext.dom.LayerConfig, existingEl?: string|HTMLElement);
    }
    /**
    Provides high performance selector/xpath processing by compiling queries into reusable functions. 
    */
    export class Query {
    /**
    Collection of matching regular expressions and code snippets. 
    */
        static matchers: any;
    /**
    Collection of operator comparison functions. 
    */
        static operators: any;
    /**
    Object hash of "pseudo class" filter functions which are used when filtering selections. 
    */
        static pseudos: any;
    /**
    Compiles a selector/xpath query into a reusable function. 
    */
        static compile(selector: string, type?: string):Function;
    /**
    Filters an array of elements to only include matches of a simple selector 
    */
        static filter(el: HTMLElement[], selector: string, nonMatches: boolean):HTMLElement[];
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Get the text value for a node, optionally replacing null with the defaultValue. 
    */
        static getNodeValue(node: any, defaultValue?: string):string;
    /**
    Returns true if the passed element(s) match the passed simple selector 
    */
        static is(el: string|HTMLElement|HTMLElement[], selector: string):boolean;
    /**
    Selects an array of DOM nodes using JavaScript-only implementation. 
    */
        static jsSelect(selector: string, root?: HTMLElement|string):HTMLElement[];
    /**
    Selects an array of DOM nodes by CSS/XPath selector. 
    */
        static select(path: string, root?: HTMLElement, type?: string, single?: boolean):HTMLElement[];
    /**
    Selects a single element. 
    */
        static selectNode(selector: string, root?: HTMLElement):HTMLElement;
    /**
    Selects the value of a node, parsing integers and floats. 
    */
        static selectNumber(selector: string, root?: HTMLElement, defaultValue?: number):number;
    /**
    Selects the value of a node, optionally replacing null with the defaultValue. 
    */
        static selectValue(selector: string, root?: HTMLElement, defaultValue?: string):string;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface ShadowConfig extends Ext.dom.UnderlayConfig {
    /**
    The shadow display mode. 
    */
        mode?: string;
    /**
    The number of pixels to offset the shadow from the element 
    */
        offset?: number;
    }
    /**
    Simple class that can provide a shadow effect for any absolutely positioned Element. 
    */
    export class Shadow extends Ext.dom.Underlay {
    /**
    The offsets used for positioning the shadow element
relative to its target element

    */
        offsets: any;
    /**
    Offsets that represent the union of the areas
of the target element and the shadow combined. 
    */
        outerOffsets: any;
    /**
    Creates new Shadow. 
    */
        constructor(config?: Ext.dom.ShadowConfig);
    /**
    Sets the opacity of the shadow 
    */
        setOpacity(opacity: number):void;
    }
    interface ShimConfig extends Ext.dom.UnderlayConfig {
    }
    /**
    Simple class that provides an iframe shim for any absolutely positioned Element to prevent windowed objects from show
    */
    export class Shim extends Ext.dom.Underlay {
    /**
     
    */
        constructor(config: Ext.dom.ShimConfig);
    }
    interface UnderlayConfig {
    /**
    The target element

    */
        target?: Ext.dom.Element;
    /**
    The CSS z-index to use for this underlay. 
    */
        zIndex?: number;
    }
    /**
    A class that provides an underlay element which displays behind an absolutely positioned
target element and tracks it
    */
    export class Underlay extends Ext.Base {
    /**
    Called before the underlay is shown, immediately after its element is retrieved
from the pool 
    */
        beforeShow():void;
    /**
    Returns the dom element that this underlay should be inserted before. 
    */
        getInsertionTarget():Ext.dom.Element;
    /**
     
    */
        getPool():Ext.dom.UnderlayPool;
    /**
    Hides the underlay 
    */
        hide():void;
    /**
    Aligns the underlay to its target element 
    */
        realign(x?: number, y?: number, width?: number, height?: number):void;
    /**
    Adjust the z-index of this underlay 
    */
        setZIndex(zIndex: number):void;
    /**
    Shows the underlay 
    */
        show():void;
    }
    /**
    Private utility class that manages the internal cache for Underlays
and Shims.

    */
    export class UnderlayPool extends Ext.Base {
    /**
     
    */
        constructor(elementConfig: any);
    /**
    Checks an element back into the pool for future reuse 
    */
        checkIn(el: Ext.dom.Element):void;
    /**
    Checks an element out of the pool. 
    */
        checkOut():Ext.dom.Element;
    /**
    Reset the pool by emptying the cache and destroying all its elements 
    */
        reset():void;
    }
}
declare module Ext.draw {
    /**
    Singleton class that manages the animation pool.

    */
    export class Animator {
    /**
    Adds an animated object to the animation pool. 
    */
        static add(animation: any):void;
    /**
    Register a recursive callback that will be called at every frame. 
    */
        static addFrameCallback(callback: Function, scope: any):string;
    /**
    Cross platform animationTime implementation. 
    */
        static animationTime():number;
    /**
    Cancel a registered one-time callback 
    */
        static cancel(id: string):void;
    /**
    Returns true or false whether it contains the given animation or not. 
    */
        static contains(animation: any):boolean;
    /**
    Returns true or false whether the pool is empty or not. 
    */
        static empty():boolean;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Removes an animation from the pool. 
    */
        static remove(animation: any):void;
    /**
    Unregister a recursive callback. 
    */
        static removeFrameCallback(id: string):void;
    /**
    Register a one-time callback that will be called at the next frame. 
    */
        static schedule(callback: Function|string, scope: any):string;
    /**
    Register a one-time callback that will be called at the next frame,
if that callback (with a matching function and sc
    */
        static scheduleIf(callback: Function|string, scope: any):string|void;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Given a frame time it will filter out finished animations from the pool. 
    */
        static step(frameTime: number):void;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface ColorConfig {
    /**
    The default factor to compute the lighter or darker color. 
    */
        lightnessFactor?: number;
    }
    /**
    Represents an RGB color and provides helper functions on it e.g. 
    */
    export class Color extends Ext.Base {
    /**
     
    */
        constructor(red: number, green: number, blue: number, alpha?: number);
    /**
    Returns a new color that is darker than this color in the HSL color space. 
    */
        createDarker(factor?: number):Ext.draw.Color;
    /**
    Returns a new color that is lighter than this color in the HSL color space. 
    */
        createLighter(factor?: number):Ext.draw.Color;
    /**
    Returns the gray value (0 to 255) of the color. 
    */
        getGrayscale():number;
    /**
    Get the equivalent HSL components of the color. 
    */
        getHSL():number[];
    /**
    Get the equivalent HSV components of the color. 
    */
        getHSV():number[];
    /**
    Parse the string and set the current color. 
    */
        setFromString(Color: string):any;
    /**
    Set current color based on the specified HSL values. 
    */
        setHSL(h: number, s: number, l: number):Ext.draw.Color;
    /**
    Set current color based on the specified HSV values. 
    */
        setHSV(h: number, s: number, v: number):Ext.draw.Color;
    /**
    Convert a color to hexadecimal format. 
    */
        toHex(color: string|any[]):string;
    /**
    toString() returns a color in hex format ('#rrggbb') if the alpha is 1. 
    */
        toString():string;
    /**
    Returns a flyweight instance of Ext.draw.Color. 
    */
        fly(red: number|string, green?: number, blue?: number, alpha?: number):Ext.draw.Color;
    /**
    Create a new color based on the specified HSL values. 
    */
        fromHSL(h: number, s: number, l: number):Ext.draw.Color;
    /**
    Create a new color based on the specified HSV values. 
    */
        fromHSV(h: number, s: number, l: number):Ext.draw.Color;
    /**
    Parse the string and create a new color. 
    */
        fromString(Color: string):Ext.draw.Color;
    }
    interface ContainerConfig extends Ext.draw.ContainerBaseConfig {
    /**
    Defines the engine (type of surface) used to render draw container contents. 
    */
        engine?: string;
    /**
    Defines a set of gradients that can be used as color properties
(fillStyle and strokeStyle, but not shadowColor) in s
    */
        gradients?: any[];
    /**
    The resize function that can be configured to have a behavior,
e.g. 
    */
        resizeHandler?: Function;
    /**
    Defines a set of sprites to be added to the drawContainer surface. 
    */
        sprites?: any[];
    }
    /**
    The container that holds and manages instances of the Ext.draw.Surface
in which sprites are rendered. 
    */
    export class Container extends Ext.draw.ContainerBase {
    /**
    The default URL used by download. 
    */
        defaultDownloadServerUrl: string;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.draw.ContainerConfig);
    /**
    Downloads an image or PDF of the chart / drawing or opens it in a separate
browser tab/window if the download can't b
    */
        download(config?: any):boolean;
    /**
    Returns the value of cls. 
    */
        getCls():string;
    /**
    Returns the value of gradients. 
    */
        getGradients():any[];
    /**
    Produces an image of the chart / drawing. 
    */
        getImage(format?: string):any;
    /**
    Returns the value of resizeHandler. 
    */
        getResizeHandler():Function;
    /**
    Returns the value of sprites. 
    */
        getSprites():any[];
    /**
    Get a surface by the given id or create one if it doesn't exist. 
    */
        getSurface(id?: string):Ext.draw.Surface;
    /**
    Place watermark after resize. 
    */
        onPlaceWatermark(width: number, height: number):void;
    /**
    Displays an image of a Ext.draw.Container on screen. 
    */
        preview():void;
    /**
    Render all the surfaces in the container. 
    */
        renderFrame():void;
    /**
    Sets the value of cls. 
    */
        setCls(cls: string):void;
    /**
    Sets the value of gradients. 
    */
        setGradients(gradients: any[]):void;
    /**
    Sets the value of resizeHandler. 
    */
        setResizeHandler(resizeHandler: Function):void;
    /**
    Sets the value of sprites. 
    */
        setSprites(sprites: any[]):void;
    }
    interface ContainerBaseConfig extends Ext.panel.PanelConfig {
    }
    /**
    

    */
    export class ContainerBase extends Ext.panel.Panel {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.draw.ContainerBaseConfig);
    }
    /**
    Utility class providing mathematics functionalities through all the draw package.

    */
    export class Draw {
    /**
    Converting radians to degrees. 
    */
        static degrees(radian: number):number;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
     
    */
        static isBBoxIntersect(bbox1: any, bbox2: any, padding?: number):boolean;
    /**
    Checks if a point is within a bounding box. 
    */
        static isPointInBBox(x: any, y: any, bbox: any):boolean;
    /**
    Converting degrees to radians. 
    */
        static rad(degrees: number):number;
    /**
     
    */
        static reflectFn(a: any):any;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Given coordinates of the points, calculates coordinates of a Bezier curve that goes through them. 
    */
        static smooth(dataX: any, dataY: any, value: any):any;
    /**
    Natural cubic spline interpolation. 
    */
        static spline(points: any[]):void;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface LimitedCacheConfig {
    /**
    Function that generates the object when look-up failed.

    */
        feeder?: Function;
    /**
    The amount limit of the cache. 
    */
        limit?: number;
    /**
    The scope for feeder

    */
        scope?: any;
    }
    /**
    Limited cache is a size limited cache container that stores limited number of objects. 
    */
    export class LimitedCache extends Ext.Base {
    /**
     
    */
        constructor(config: Ext.draw.LimitedCacheConfig);
    /**
    Clear all the objects. 
    */
        clear():void;
    /**
    Get a cached object. 
    */
        get(id: string, ...args: any[]):any;
    /**
    Returns the value of feeder. 
    */
        getFeeder():Function;
    /**
    Returns the value of limit. 
    */
        getLimit():number;
    /**
    Returns the value of scope. 
    */
        getScope():any;
    /**
    Sets the value of feeder. 
    */
        setFeeder(feeder: Function):number;
    /**
    Sets the value of limit. 
    */
        setLimit(limit: number):void;
    /**
    Sets the value of scope. 
    */
        setScope(scope: any):void;
    }
    /**
    Utility class to calculate affine transformation matrix. 
    */
    export class Matrix extends Ext.Base {
    /**
    Get x-to-x component of the matrix. 
    */
        a: number;
    /**
    Create an affine transform matrix. 
    */
        constructor(xx: number, xy: number, yx: number, yy: number, dx: number, dy: number);
    /**
    Postpend a matrix onto the current. 
    */
        append(xx: number, xy: number, yx: number, yy: number, dx: number, dy: number):Ext.draw.Matrix;
    /**
    Postpend a matrix onto the current. 
    */
        appendMatrix(matrix: Ext.draw.Matrix):Ext.draw.Matrix;
    /**
    Clone this matrix. 
    */
        clone():Ext.draw.Matrix;
    /**
    Determines if this matrix has the same values as another matrix. 
    */
        equals(matrix: Ext.draw.Matrix):boolean;
    /**
    Horizontally flip the matrix 
    */
        flipX():Ext.draw.Matrix;
    /**
    Vertically flip the matrix 
    */
        flipY():Ext.draw.Matrix;
    /**
    Get offset x component of the matrix. 
    */
        getDX():number;
    /**
    Get offset y component of the matrix. 
    */
        getDY():number;
    /**
    Get the x scale of the matrix. 
    */
        getScaleX():number;
    /**
    Get the y scale of the matrix. 
    */
        getScaleY():number;
    /**
    Get x-to-x component of the matrix 
    */
        getXX():number;
    /**
    Get x-to-y component of the matrix. 
    */
        getXY():number;
    /**
    Get y-to-x component of the matrix. 
    */
        getYX():number;
    /**
    Get y-to-y component of the matrix. 
    */
        getYY():number;
    /**
    Return a new matrix represents the opposite transformation of the current one. 
    */
        inverse(target?: Ext.draw.Matrix):Ext.draw.Matrix;
    /**
    Determines whether this matrix is an identity matrix (no transform). 
    */
        isIdentity():boolean;
    /**
    Performs matrix multiplication. 
    */
        multiply(matrix: Ext.draw.Matrix):Ext.draw.Matrix;
    /**
    Prepend a matrix onto the current. 
    */
        prepend(xx: number, xy: number, yx: number, yy: number, dx: number, dy: number):Ext.draw.Matrix;
    /**
    Prepend a matrix onto the current. 
    */
        prependMatrix(matrix: Ext.draw.Matrix):Ext.draw.Matrix;
    /**
    Reset the matrix to identical. 
    */
        reset():Ext.draw.Matrix;
    /**
    Rotate the matrix. 
    */
        rotate(angle: number, rcx: number|void, rcy: number|void, prepend?: boolean):Ext.draw.Matrix;
    /**
    Rotate the matrix by the angle of a vector. 
    */
        rotateFromVector(x: number, y: number, prepend?: boolean):Ext.draw.Matrix;
    /**
    Scale the matrix. 
    */
        scale(sx: number, sy: number, scx: number, scy: number, prepend?: boolean):Ext.draw.Matrix;
    /**
    Set the elements of a Matrix 
    */
        set(xx: number, xy: number, yx: number, yy: number, dx: number, dy: number):Ext.draw.Matrix;
    /**
    Skew the matrix 
    */
        skewX(angle: number):Ext.draw.Matrix;
    /**
    Skew the matrix 
    */
        skewY(angle: number):Ext.draw.Matrix;
    /**
    Split a transformation matrix into Scale, Rotate, Translate components. 
    */
        split():any;
    /**
    Create an array of elements by horizontal order (xx,yx,dx,yx,yy,dy). 
    */
        toArray():any[];
    /**
    Apply the matrix to a drawing context. 
    */
        toContext(ctx: any):Ext.draw.Matrix;
    /**
    Get an array of elements. 
    */
        toString():any[];
    /**
    Return a string that can be used as transform attribute in SVG. 
    */
        toSvg():string;
    /**
    Create an array of elements by vertical order (xx,xy,yx,yy,dx,dy). 
    */
        toVerticalArray():any[]|string;
    /**
     
    */
        transformBBox(bbox: any, radius?: number, target?: any):any;
    /**
    Transform a list for points. 
    */
        transformList(list: any[]):any[];
    /**
    Transform a point to a new array. 
    */
        transformPoint(point: any[]):any[];
    /**
    Translate the matrix. 
    */
        translate(x: number, y: number, prepend?: boolean):Ext.draw.Matrix;
    /**
    Transform point returning the x component of the result. 
    */
        x(x: number, y: number):number;
    /**
    Transform point returning the y component of the result. 
    */
        y(x: number, y: number):number;
    /**
    Return the affine matrix that transform two points (x0, y0) and (x1, y1) to (x0p, y0p) and (x1p, y1p) 
    */
        createAffineMatrixFromTwoPair(x0: number, y0: number, x1: number, y1: number, x0p: number, y0p: number, x1p: number, y1p: number):void;
    /**
    Return the affine matrix that transform two points (x0, y0) and (x1, y1) to (x0p, y0p) and (x1p, y1p) 
    */
        createPanZoomFromTwoPair(x0: number, y0: number, x1: number, y1: number, x0p: number, y0p: number, x1p: number, y1p: number):void;
    /**
    Create a flyweight to wrap the given array. 
    */
        fly(elements: any[]):Ext.draw.Matrix;
    }
    /**
    Class representing a path. 
    */
    export class Path extends Ext.Base {
    /**
    Create a path from pathString. 
    */
        constructor(pathString: string);
    /**
    Create an circular arc. 
    */
        arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise: number):void;
    /**
    http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes 
    */
        arcSvg(rx: number, ry: number, rotation: number, fA: number, fS: number, x2: number, y2: number):void;
    /**
    Create a elliptic arc curve compatible with SVG's arc to instruction. 
    */
        arcTo(x1: number, y1: number, x2: number, y2: number, rx?: number, ry?: number, rotation?: number):void;
    /**
    A cubic bezier curve to a position. 
    */
        bezierCurveTo(cx1: number, cy1: number, cx2: number, cy2: number, x: number, y: number):void;
    /**
    Clear the path. 
    */
        clear():void;
    /**
    Clone this path. 
    */
        clone():Ext.draw.Path;
    /**
    Close this path with a straight line. 
    */
        closePath():void;
    /**
    Create an elliptic arc. 
    */
        ellipse(cx: number, cy: number, radiusX: number, radiusY: number, rotation: number, startAngle: number, endAngle: number, anticlockwise: number):void;
    /**
    Reconstruct path from cubic bezier curve stripes. 
    */
        fromStripes(stripes: any[]):void;
    /**
    Feed the path from svg path string. 
    */
        fromSvgString(pathString: string):void;
    /**
    Get the bounding box of this matrix. 
    */
        getDimension(target?: any):any;
    /**
    Get the bounding box as if the path is transformed by a matrix. 
    */
        getDimensionWithTransform(matrix: Ext.draw.Matrix, target?: any):any;
    /**
    Calculates the points where the given segment intersects the path. 
    */
        getSegmentIntersections(x1: any, y1: any, x2: any, y2: any, x3: any, y3: any, x4: any, y4: any):any[];
    /**
    Tests whether the given point is inside the path. 
    */
        isPointInPath(x: number, y: number):boolean;
    /**
    Tests whether the given point is on the path. 
    */
        isPointOnPath(x: number, y: number):boolean;
    /**
    A straight line to a position. 
    */
        lineTo(x: number, y: number):void;
    /**
    Move to a position. 
    */
        moveTo(x: number, y: number):void;
    /**
    A quadratic bezier curve to a position. 
    */
        quadraticCurveTo(cx: number, cy: number, x: number, y: number):void;
    /**
    Draw a rectangle and close it. 
    */
        rect(x: number, y: number, width: number, height: number):void;
    /**
    Return an svg path string for this path. 
    */
        toString():string;
    /**
    Convert path to bezier curve stripes. 
    */
        toStripes(target?: any[]):any[];
    /**
    Transform the current path by a matrix. 
    */
        transform(matrix: Ext.draw.Matrix):void;
    }
    /**
    Singleton that provides methods used by the Ext.draw.Path
for hit testing and finding path intersection points.

    */
    export class PathUtil extends Ext.Base {
    }
    interface SegmentTreeConfig {
    }
    /**
    This class we summarize the data and returns it when required.

    */
    export class SegmentTree extends Ext.Base {
    /**
     
    */
        constructor(config: Ext.draw.SegmentTreeConfig);
    /**
    Returns the minimum range of data that fits the given range and step size. 
    */
        getAggregation(min: number, max: number, estStep: number):any;
    /**
    Returns the value of strategy. 
    */
        getStrategy():string;
    /**
    Sets the data of the segment tree. 
    */
        setData(dataX: number, dataOpen: number, dataHigh: number, dataLow: number, dataClose: number):void;
    /**
    Sets the value of strategy. 
    */
        setStrategy(strategy: string):void;
    }
    interface SurfaceConfig extends Ext.draw.SurfaceBaseConfig {
    /**
    Background sprite config of the surface.

    */
        background?: any;
    /**
    Indicates whether the surface needs to redraw. 
    */
        dirty?: boolean;
    /**
    If the surface is in the RTL mode, text will render with the RTL direction,
but the alignment and position of the tex
    */
        flipRtlText?: boolean;
    /**
    Array of sprite instances. 
    */
        items?: any[];
    /**
    The [x, y, width, height] rect of the surface related to its container.

    */
        rect?: any[];
    }
    /**
    A Surface is an interface to render methods inside a draw Ext.draw.Container. 
    */
    export class Surface extends Ext.draw.SurfaceBase {
    /**
    The reported device pixel density.

    */
        devicePixelRatio: any;
    /**
     
    */
        constructor(config: Ext.draw.SurfaceConfig);
    /**
    Add a Sprite to the surface. 
    */
        add():void;
    /**
    Empty the surface content (without touching the sprites.) 
    */
        clear():void;
    /**
    Flattens the given drawing surfaces into a single image
and returns an object containing the data (in the DataURL for
    */
        flatten(size: any, surfaces: Ext.draw.Surface[]):any;
    /**
    Get the sprite by id or index. 
    */
        get(id: string|number):Ext.draw.sprite.Sprite;
    /**
    Return the minimal bounding box that contains all the sprites bounding boxes in the given list of sprites. 
    */
        getBBox(sprites: Ext.draw.sprite.Sprite[]|Ext.draw.sprite.Sprite, isWithoutTransform?: boolean):any;
    /**
    Returns the value of background. 
    */
        getBackground():any;
    /**
    Returns the value of cls. 
    */
        getCls():string;
    /**
    Returns 'true' if the surface is dirty. 
    */
        getDirty():boolean;
    /**
    Returns the value of flipRtlText. 
    */
        getFlipRtlText():boolean;
    /**
    Returns the value of items. 
    */
        getItems():any[];
    /**
    Returns the value of rect. 
    */
        getRect():any[];
    /**
    Performs a hit test on all sprites in the surface, returning the first matching one. 
    */
        hitTest(point: any[], options: any):any;
    /**
    Performs a hit test on all sprites in the surface, returning the first matching one. 
    */
        hitTestEvent(point: any[], options: any):any;
    /**
    Invoked when a sprite is added to the surface. 
    */
        onAdd(sprite: Ext.draw.sprite.Sprite):void;
    /**
    Remove a given sprite from the surface, optionally destroying the sprite in the process. 
    */
        remove(sprite: Ext.draw.sprite.Sprite, destroySprite?: boolean):void;
    /**
    Remove all sprites from the surface, optionally destroying the sprites in the process. 
    */
        removeAll(destroySprites?: boolean):void;
    /**
    Triggers the re-rendering of the canvas. 
    */
        renderFrame():void;
    /**
    Force the element to redraw. 
    */
        repaint():void;
    /**
    Reset the matrix of the surface. 
    */
        resetTransform():void;
    /**
    Round the number to align to the pixels on device. 
    */
        roundPixel(num: number):number;
    /**
    Sets the value of background. 
    */
        setBackground(background: any):void;
    /**
    Sets the value of cls. 
    */
        setCls(cls: string):void;
    /**
    Sets the value of flipRtlText. 
    */
        setFlipRtlText(flipRtlText: boolean):void;
    /**
    Sets the value of items. 
    */
        setItems(items: any[]):void;
    /**
    Sets the value of rect. 
    */
        setRect(rect: any[]):void;
    /**
     
    */
        stableSort(list: any[]):any[];
    /**
    Mark the surface to render after another surface is updated. 
    */
        waitFor(surface: Ext.draw.Surface):void;
    }
    interface SurfaceBaseConfig extends Ext.WidgetConfig {
    }
    /**
    

    */
    export class SurfaceBase extends Ext.Widget {
    /**
     
    */
        constructor(config: Ext.draw.SurfaceBaseConfig);
    }
    interface TextMeasurerConfig {
    /**
    This singleton tries not to make use of the Ext.util.TextMetrics because it is
several times slower than TextMeasurer
    */
    }
    /**
    Utility class to provide a way to approximately measure the dimension of text
without a drawing context.

    */
    export class TextMeasurer {
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Measure a text with specific font. 
    */
        static measureText(text: string, font: string):any;
    /**
    Measure a single-line text with specific font. 
    */
        static measureTextSingleLine(text: string, font: string):any;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    /**
    Contains transition equations such as Quad, Cubic, Quart, Quint,
Expo, Circ, Pow, Sine, Back, Bounce, Elastic, etc. 
    */
    export class TimingFunctions {
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
}
declare module Ext.draw.engine {
    interface CanvasConfig extends Ext.draw.SurfaceConfig {
    /**
    True to have the Canvas use JavaScript Number instead of single precision floating point for transforms. 
    */
        highPrecision?: boolean;
    }
    /**
    Provides specific methods to draw with 2D Canvas element.

    */
    export class Canvas extends Ext.draw.Surface {
    /**
     
    */
        constructor(config: Ext.draw.engine.CanvasConfig);
    /**
    Clears the current transformation state on the surface. 
    */
        clearTransform():void;
    /**
    Returns the value of highPrecision. 
    */
        getHighPrecision():boolean;
    /**
    Sets the value of highPrecision. 
    */
        setHighPrecision(highPrecision: boolean):void;
    /**
    2D Canvas context in IE (up to IE10, inclusive) doesn't support
the setLineDash method and the lineDashOffset property. 
    */
        setLineDash(dashList: any):void;
    }
    interface SvgConfig extends Ext.draw.SurfaceConfig {
    /**
    Nothing needs to be done in high precision mode. 
    */
        highPrecision?: boolean;
    }
    /**
    SVG engine.

    */
    export class Svg extends Ext.draw.Surface {
    /**
     
    */
        constructor(config: Ext.draw.engine.SvgConfig);
    /**
    Clears the current transformation state on the surface. 
    */
        clearTransform():void;
    /**
    Creates a DOM element under the SVG namespace of the given type. 
    */
        createSvgNode(type: string):any;
    /**
    Returns the value of highPrecision. 
    */
        getHighPrecision():boolean;
    /**
    Renders a single sprite into the surface. 
    */
        renderSprite(sprite: Ext.draw.sprite.Sprite):boolean;
    /**
    Sets the value of highPrecision. 
    */
        setHighPrecision(highPrecision: boolean):void;
    }
    /**
    A class that imitates a canvas context but generates svg elements instead.

    */
    export class SvgContext extends Ext.Base {
    /**
     
    */
        constructor(SvgSurface: any);
    /**
    Adds points to the subpath such that the arc described by the circumference of the circle described by the arguments,
    */
        arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise: number):void;
    /**
    Arc command using svg parameters. 
    */
        arcSvg(r1: number, r2: number, rotation: number, large: number, swipe: number, x2: number, y2: number):void;
    /**
    Adds an arc with the given control points and radius to the current subpath, connected to the previous point by a str
    */
        arcTo(x1: number, y1: number, x2: number, y2: number, radiusX: number, radiusY: number, rotation: number):void;
    /**
    Resets the current default path. 
    */
        beginPath():void;
    /**
    Adds the given point to the current subpath, connected to the previous one by a cubic Bézier curve with the given con
    */
        bezierCurveTo(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number):void;
    /**
    Clears the context. 
    */
        clear():void;
    /**
    Marks the current subpath as closed, and starts a new subpath with a point the same as the start and end of the newly
    */
        closePath():void;
    /**
    Returns an object that represents a linear gradient that paints along the line given by the coordinates represented b
    */
        createLinearGradient(x0: number, y0: number, x1: number, y1: number):Ext.draw.engine.SvgContext.Gradient;
    /**
    Returns a CanvasGradient object that represents a radial gradient that paints along the cone given by the circles rep
    */
        createRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number):Ext.draw.engine.SvgContext.Gradient;
    /**
    Draws the given image onto the canvas. 
    */
        drawImage(image: HTMLElement, sx: number, sy: number, sw: number, sh: number, dx: number, dy: number, dw: number, dh: number):void;
    /**
    Adds points to the subpath such that the arc described by the circumference of the ellipse described by the arguments
    */
        ellipse(x: number, y: number, radiusX: number, radiusY: number, rotation: number, startAngle: number, endAngle: number, anticlockwise: number):void;
    /**
    Fills the subpaths of the current default path or the given path with the current fill style. 
    */
        fill():void;
    /**
    Paints the given rectangle onto the canvas, using the current fill style. 
    */
        fillRect(x: number, y: number, width: number, height: number):void;
    /**
    Note: After the method guarantees the transform matrix will be inverted. 
    */
        fillStroke(attr: any, transformFillStroke?: boolean):void;
    /**
    Fills the given text at the given position. 
    */
        fillText(text: string, x: number, y: number):void;
    /**
    Adds the given point to the current subpath, connected to the previous one by a straight line. 
    */
        lineTo(x: number, y: number):void;
    /**
    Creates a new subpath with the given point. 
    */
        moveTo(x: number, y: number):void;
    /**
    Adds a new closed subpath to the path, representing the given rectangle. 
    */
        rect(x: number, y: number, width: number, height: number):void;
    /**
    Pops the state stack and restores the state. 
    */
        restore():void;
    /**
    Rotates the current context coordinates (that is, a transformation matrix). 
    */
        rotate(angle: number):void;
    /**
    Pushes the context state to the state stack. 
    */
        save():void;
    /**
    Scales the current context by the specified horizontal (x) and vertical (y) factors. 
    */
        scale(x: number, y: number):void;
    /**
    Changes the transformation matrix to the matrix given by the arguments as described below. 
    */
        setTransform(xx: number, yx: number, xy: number, yy: number, dx: number, dy: number):void;
    /**
    Strokes the subpaths of the current default path or the given path with the current stroke style. 
    */
        stroke():void;
    /**
    Paints the box that outlines the given rectangle onto the canvas, using the current stroke style. 
    */
        strokeRect(x: number, y: number, width: number, height: number):void;
    /**
    Strokes the given text at the given position. 
    */
        strokeText(text: string, x: number, y: number):void;
    /**
    Changes the transformation matrix to apply the matrix given by the arguments as described below. 
    */
        transform(xx: number, yx: number, xy: number, yy: number, dx: number, dy: number):void;
    /**
    Specifies values to move the origin point in a canvas. 
    */
        translate(x: number, y: number):void;
    }
    /**
    @define Ext.draw.engine.excanvas

    */
    export class excanvas {
    /**
    Binds a function to an object. 
    */
        bind(f: Function, obj: any, var_args: any):Function;
    /**
    This funtion is assigned to the  elements as element.getContext(). 
    */
        getContext():any;
    /**
    Public initializes a canvas element so that it can be used as canvas
element from now on. 
    */
        initElement(el: HTMLElement):HTMLElement;
    }
}
declare module Ext.draw.engine.SvgContext {
    /**
    

    */
    export class Gradient extends Ext.Base {
    /**
     
    */
        constructor(ctx: any, surface: any, element: any, compression: any);
    /**
    Adds a color stop with the given color to the gradient at the given offset. 
    */
        addColorStop(offset: number, color: string):void;
    }
}
declare module Ext.draw.gradient {
    interface GradientConfig {
    /**
    Defines the stops of the gradient. 
    */
        stops?: any[];
    }
    /**
    Creates a gradient.

    */
    export class Gradient extends Ext.Base {
    /**
     
    */
        constructor(config: Ext.draw.gradient.GradientConfig);
    /**
    Generates the gradient for the given context. 
    */
        generateGradient(ctx: Ext.draw.engine.SvgContext, bbox: any):any;
    /**
    Returns the value of stops. 
    */
        getStops():any[];
    /**
    Sets the value of stops. 
    */
        setStops(stops: any[]):void;
    }
    /**
    A global map of all gradient configs.

    */
    export class GradientDefinition {
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface LinearConfig extends Ext.draw.gradient.GradientConfig {
    /**
    The angle of rotation of the gradient in degrees. 
    */
        degrees?: number;
    /**
    The angle of rotation of the gradient in radians. 
    */
        radians?: number;
    }
    /**
    Linear gradient. 
    */
    export class Linear extends Ext.draw.gradient.Gradient {
    /**
     
    */
        constructor(config: Ext.draw.gradient.LinearConfig);
    /**
    Returns the value of degrees. 
    */
        getDegrees():number;
    /**
    Returns the value of radians. 
    */
        getRadians():number;
    /**
    Sets the value of degrees. 
    */
        setDegrees(degrees: number):void;
    /**
    Sets the value of radians. 
    */
        setRadians(radians: number):void;
    }
    interface RadialConfig extends Ext.draw.gradient.GradientConfig {
    /**
    The ending circle of the gradient. 
    */
        end?: any;
    /**
    The starting circle of the gradient. 
    */
        start?: any;
    }
    /**
    Radial gradient. 
    */
    export class Radial extends Ext.draw.gradient.Gradient {
    /**
     
    */
        constructor(config: Ext.draw.gradient.RadialConfig);
    /**
    Returns the value of end. 
    */
        getEnd():any;
    /**
    Returns the value of start. 
    */
        getStart():any;
    /**
    Sets the value of end. 
    */
        setEnd(end: any):void;
    /**
    Sets the value of start. 
    */
        setStart(start: any):void;
    }
}
declare module Ext.draw.modifier {
    interface AnimationConfig extends Ext.draw.modifier.ModifierConfig {
    /**
     
    */
        customDuration?: any;
    /**
    Overrides the default duration for defined attributes. 
    */
        customDurations?: any;
    /**
    Overrides the default easing function for defined attributes. 
    */
        customEasings?: any;
    /**
    Default duration time (ms). 
    */
        duration?: number;
    /**
    Default easing function.

    */
        easing?: Function;
    }
    /**
    The Animation modifier. 
    */
    export class Animation extends Ext.draw.modifier.Modifier {
    /**
     
    */
        constructor();
    /**
    Remove special easings on the given attributes. 
    */
        clearDurationOn(attrs: any):void;
    /**
    Remove special easings on the given attributes. 
    */
        clearEasingOn(attrs: string|any[]):void;
    /**
    Returns the value of customDuration. 
    */
        getCustomDuration():any;
    /**
    Returns the value of customDurations. 
    */
        getCustomDurations():any;
    /**
    Returns the value of customEasings. 
    */
        getCustomEasings():any;
    /**
    Returns the value of duration. 
    */
        getDuration():number;
    /**
    Returns the value of easing. 
    */
        getEasing():Function;
    /**
    Sets the value of customDuration. 
    */
        setCustomDuration(customDuration: any):void;
    /**
    Sets the value of customDurations. 
    */
        setCustomDurations(customDurations: any):void;
    /**
    Sets the value of customEasings. 
    */
        setCustomEasings(customEasings: any):void;
    /**
    Sets the value of duration. 
    */
        setDuration(duration: number):void;
    /**
    Set special duration on the given attributes. 
    */
        setDurationOn(attrs: string|any[], duration: number):void;
    /**
    Sets the value of easing. 
    */
        setEasing(easing: Function):void;
    /**
    Set special easings on the given attributes. 
    */
        setEasingOn(attrs: string|any[], easing: string):void;
    /**
    Stop all animations affected by this modifier. 
    */
        stop():void;
    }
    interface HighlightConfig extends Ext.draw.modifier.ModifierConfig {
    /**
    'true' if the highlight is applied. 
    */
        enabled?: boolean;
    /**
    The style attributes of the highlight modifier.

    */
        highlightStyle?: any;
    }
    /**
    Highlight is a modifier that will override sprite attributes
with highlightStyle attributes
when sprite's highlighted
    */
    export class Highlight extends Ext.draw.modifier.Modifier {
    /**
     
    */
        constructor(config: Ext.draw.modifier.HighlightConfig);
    /**
    Filter out modifier changes that override highlightStyle or source attributes. 
    */
        filterChanges(attr: any, changes: any):any;
    /**
    Returns the value of enabled. 
    */
        getEnabled():boolean;
    /**
    Returns the value of highlightStyle. 
    */
        getHighlightStyle():any;
    /**
    Sets the value of enabled. 
    */
        setEnabled(enabled: boolean):void;
    /**
    Sets the value of highlightStyle. 
    */
        setHighlightStyle(highlightStyle: any):void;
    }
    interface ModifierConfig {
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    /**
    Next modifier that receives the
pop-up changes.

    */
        next?: Ext.draw.modifier.Modifier;
    /**
    Previous modifier that receives
the push-down changes.

    */
        previous?: Ext.draw.modifier.Modifier;
    /**
    The sprite to which the modifier belongs.

    */
        sprite?: Ext.draw.sprite.Sprite;
    }
    /**
    Each sprite has a stack of modifiers. 
    */
    export class Modifier extends Ext.Base {
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
     
    */
        constructor(config: Ext.draw.modifier.ModifierConfig);
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Returns the value of next. 
    */
        getNext():Ext.draw.modifier.Modifier;
    /**
    Returns the value of previous. 
    */
        getPrevious():Ext.draw.modifier.Modifier;
    /**
    Returns the value of sprite. 
    */
        getSprite():Ext.draw.sprite.Sprite;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Invoked when changes need to be popped up to the top. 
    */
        popUp(attributes: any, changes: any):void;
    /**
    Validate attribute set before use. 
    */
        prepareAttributes(attr: any):void;
    /**
    Invoked when changes need to be pushed down to the sprite. 
    */
        pushDown(attr: any, changes: any):any;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Sets the value of next. 
    */
        setNext(next: Ext.draw.modifier.Modifier):void;
    /**
    Sets the value of previous. 
    */
        setPrevious(previous: Ext.draw.modifier.Modifier):void;
    /**
    Sets the value of sprite. 
    */
        setSprite(sprite: Ext.draw.sprite.Sprite):void;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    }
    interface TargetConfig extends Ext.draw.modifier.ModifierConfig {
    }
    /**
    This is the destination (top) modifier that has to be put at
the top of the modifier stack. 
    */
    export class Target extends Ext.draw.modifier.Modifier {
    /**
     
    */
        constructor(config: Ext.draw.modifier.TargetConfig);
    }
}
declare module Ext.draw.plugin {
    interface SpriteEventsConfig extends Ext.plugin.AbstractConfig {
    }
    /**
    A draw container plugin that adds ability to listen
to sprite events. 
    */
    export class SpriteEvents extends Ext.plugin.Abstract {
    /**
    Instantiates the plugin. 
    */
        constructor(config?: Ext.draw.plugin.SpriteEventsConfig);
    }
}
declare module Ext.draw.sprite {
    /**
    Computes an intermidiate value between two values of the same type for use in animations. 
    */
    export class AnimationParser extends Ext.Base {
    }
    interface ArcConfig extends Ext.draw.sprite.CircleConfig {
    /**
    Determines whether or not the arc is drawn clockwise. 
    */
        anticlockwise?: boolean;
    /**
    The ending angle of the arc. 
    */
        endAngle?: number;
    /**
    The beginning angle of the arc. 
    */
        startAngle?: number;
    }
    /**
    A sprite that represents a circular arc. 
    */
    export class Arc extends Ext.draw.sprite.Circle {
    /**
     
    */
        constructor(config: Ext.draw.sprite.ArcConfig);
    }
    interface ArrowConfig extends Ext.draw.sprite.PathConfig {
    /**
    The size of the sprite. 
    */
        size?: number;
    }
    /**
    A sprite that represents an arrow. 
    */
    export class Arrow extends Ext.draw.sprite.Path {
    /**
     
    */
        constructor(config: Ext.draw.sprite.ArrowConfig);
    }
    interface AttributeDefinitionConfig {
    /**
    Defines the alternative names for attributes. 
    */
        aliases?: any;
    /**
    Defines the process used to animate between attributes. 
    */
        animationProcessors?: any;
    /**
    Defines the default values of attributes. 
    */
        defaults?: any;
    /**
     
    */
        dirtyTriggers?: any;
    /**
    Defines the preprocessing used on the attributes. 
    */
        processors?: any;
    /**
    Defines which updaters have to be called when an attribute is changed. 
    */
        triggers?: any;
    /**
    Defines the postprocessing used by the attribute. 
    */
        updaters?: any;
    }
    /**
    Flyweight object to process the attributes of a sprite. 
    */
    export class AttributeDefinition extends Ext.Base {
    /**
     
    */
        constructor(config: Ext.draw.sprite.AttributeDefinitionConfig);
    /**
    Returns the value of aliases. 
    */
        getAliases():any;
    /**
    Returns the value of animationProcessors. 
    */
        getAnimationProcessors():any;
    /**
    Returns the value of defaults. 
    */
        getDefaults():any;
    /**
    Returns the value of dirtyTriggers. 
    */
        getDirtyTriggers():any;
    /**
    Returns the value of processors. 
    */
        getProcessors():any;
    /**
    Returns the value of triggers. 
    */
        getTriggers():any;
    /**
    Returns the value of updaters. 
    */
        getUpdaters():any;
    /**
    Normalizes the changes given via their processors before they are applied as attributes. 
    */
        normalize(changes: any, keepUnrecognized: boolean):any;
    /**
    Sets the value of aliases. 
    */
        setAliases(aliases: any):void;
    /**
    Sets the value of animationProcessors. 
    */
        setAnimationProcessors(animationProcessors: any):void;
    /**
    Sets the value of defaults. 
    */
        setDefaults(defaults: any):void;
    /**
    Sets the value of dirtyTriggers. 
    */
        setDirtyTriggers(dirtyTriggers: any):void;
    /**
    Sets the value of processors. 
    */
        setProcessors(processors: any):void;
    /**
    Sets the value of triggers. 
    */
        setTriggers(triggers: any):void;
    /**
    Sets the value of updaters. 
    */
        setUpdaters(updaters: any):void;
    }
    /**
    Parsers used for sprite attributes if they are normalized
(default) when being set. 
    */
    export class AttributeParser {
    /**
    Generates a function that checks if a value matches
one of the given attributes. 
    */
        static enums():Function;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface CircleConfig extends Ext.draw.sprite.PathConfig {
    /**
    The center coordinate of the sprite on the x-axis. 
    */
        cx?: number;
    /**
    The center coordinate of the sprite on the y-axis. 
    */
        cy?: number;
    /**
    The radius of the sprite. 
    */
        r?: number;
    }
    /**
    A sprite that represents a circle. 
    */
    export class Circle extends Ext.draw.sprite.Path {
    /**
     
    */
        constructor(config: Ext.draw.sprite.CircleConfig);
    }
    interface CompositeConfig extends Ext.draw.sprite.SpriteConfig {
    }
    /**
    Represents a group of sprites.

    */
    export class Composite extends Ext.draw.sprite.Sprite {
    /**
     
    */
        constructor();
    /**
    Adds a sprite to the composite. 
    */
        add(sprite: any):void;
    /**
    Adds a list of sprites to the composite. 
    */
        addAll(sprites: any):void;
    /**
    Returns the value of sprites. 
    */
        getSprites():any[];
    /**
    Sets the value of sprites. 
    */
        setSprites(sprites: any[]):void;
    }
    interface CrossConfig extends Ext.draw.sprite.PathConfig {
    /**
    The size of the sprite. 
    */
        size?: number;
    }
    /**
    A sprite that represents a cross. 
    */
    export class Cross extends Ext.draw.sprite.Path {
    /**
     
    */
        constructor(config: Ext.draw.sprite.CrossConfig);
    }
    interface DiamondConfig extends Ext.draw.sprite.PathConfig {
    /**
    The size of the sprite. 
    */
        size?: number;
    }
    /**
    A sprite that represents a diamond. 
    */
    export class Diamond extends Ext.draw.sprite.Path {
    /**
     
    */
        constructor(config: Ext.draw.sprite.DiamondConfig);
    }
    interface EllipseConfig extends Ext.draw.sprite.PathConfig {
    /**
    The rotation of the sprite about its axis. 
    */
        axisRotation?: number;
    /**
    The center coordinate of the sprite on the x-axis. 
    */
        cx?: number;
    /**
    The center coordinate of the sprite on the y-axis. 
    */
        cy?: number;
    /**
    The radius of the sprite on the x-axis. 
    */
        rx?: number;
    /**
    The radius of the sprite on the y-axis. 
    */
        ry?: number;
    }
    /**
    A sprite that represents an ellipse. 
    */
    export class Ellipse extends Ext.draw.sprite.Path {
    /**
     
    */
        constructor(config: Ext.draw.sprite.EllipseConfig);
    }
    interface EllipticalArcConfig extends Ext.draw.sprite.EllipseConfig {
    /**
    Determines whether or not the arc is drawn clockwise. 
    */
        anticlockwise?: boolean;
    /**
    The ending angle of the arc. 
    */
        endAngle?: number;
    /**
    The beginning angle of the arc. 
    */
        startAngle?: number;
    }
    /**
    A sprite that represents an elliptical arc. 
    */
    export class EllipticalArc extends Ext.draw.sprite.Ellipse {
    /**
     
    */
        constructor(config: Ext.draw.sprite.EllipticalArcConfig);
    }
    interface ImageConfig extends Ext.draw.sprite.RectConfig {
    /**
    The image source of the sprite. 
    */
        src?: string;
    }
    /**
    A sprite that represents an image.

    */
    export class Image extends Ext.draw.sprite.Rect {
    /**
     
    */
        constructor(config: Ext.draw.sprite.ImageConfig);
    }
    interface InstancingConfig extends Ext.draw.sprite.SpriteConfig {
    /**
    The sprite template used by all instances. 
    */
        template?: any;
    }
    /**
    Sprite that represents multiple instances based on the given template. 
    */
    export class Instancing extends Ext.draw.sprite.Sprite {
    /**
     
    */
        constructor(config: Ext.draw.sprite.InstancingConfig);
    /**
    Creates a new sprite instance. 
    */
        createInstance(config: any, bypassNormalization?: boolean, avoidCopy?: boolean):any;
    /**
    Returns the bounding box for the instance at the given index. 
    */
        getBBoxFor(index: number, isWithoutTransform?: boolean):any;
    /**
    Returns the value of template. 
    */
        getTemplate():any;
    /**
    Sets the attributes for the instance at the given index. 
    */
        setAttributesFor(index: number, changes: any, bypassNormalization?: boolean):void;
    /**
    Sets the value of template. 
    */
        setTemplate(template: any):void;
    }
    interface LineConfig extends Ext.draw.sprite.SpriteConfig {
    }
    /**
    A sprite that represents a line. 
    */
    export class Line extends Ext.draw.sprite.Sprite {
    /**
     
    */
        constructor(config: Ext.draw.sprite.LineConfig);
    }
    interface PathConfig extends Ext.draw.sprite.SpriteConfig {
    /**
    The SVG based path string used by the sprite.

    */
        path?: string;
    }
    /**
    A sprite that represents a path. 
    */
    export class Path extends Ext.draw.sprite.Sprite {
    /**
    Debug rendering options:

debug: {
    bbox: true, // renders the bounding box of the path
    xray: true  // renders
    */
        debug: boolean;
    /**
     
    */
        constructor(config: Ext.draw.sprite.PathConfig);
    /**
    Returns all points where this sprite intersects the given sprite. 
    */
        getIntersections(path: any):any[];
    /**
    Tests whether the given point is inside the path. 
    */
        isPointInPath(x: any, y: any):boolean;
    /**
    Tests whether the given point is on the path. 
    */
        isPointOnPath(x: any, y: any):boolean;
    /**
    Update the path. 
    */
        updatePath(path: Ext.draw.Path, attr: any):void;
    }
    interface PlusConfig extends Ext.draw.sprite.PathConfig {
    /**
    The size of the sprite. 
    */
        size?: number;
    }
    /**
    A sprite that represents a plus. 
    */
    export class Plus extends Ext.draw.sprite.Path {
    /**
     
    */
        constructor(config: Ext.draw.sprite.PlusConfig);
    }
    interface RectConfig extends Ext.draw.sprite.PathConfig {
    /**
    The height of the sprite. 
    */
        height?: number;
    /**
    The radius of the rounded corners. 
    */
        radius?: number;
    /**
    The width of the sprite. 
    */
        width?: number;
    /**
    The position of the sprite on the x-axis. 
    */
        x?: number;
    /**
    The position of the sprite on the y-axis. 
    */
        y?: number;
    }
    /**
    A sprite that represents a rectangle. 
    */
    export class Rect extends Ext.draw.sprite.Path {
    /**
     
    */
        constructor(config: Ext.draw.sprite.RectConfig);
    }
    interface SectorConfig extends Ext.draw.sprite.PathConfig {
    /**
    The center coordinate of the sprite on the x-axis. 
    */
        centerX?: number;
    /**
    The center coordinate of the sprite on the y-axis. 
    */
        centerY?: number;
    /**
    The ending angle of the sprite. 
    */
        endAngle?: number;
    /**
    The ending point of the radius of the sprite. 
    */
        endRho?: number;
    /**
    The margin of the sprite from the center of pie. 
    */
        margin?: number;
    /**
    The starting angle of the sprite. 
    */
        startAngle?: number;
    /**
    The starting point of the radius of the sprite. 
    */
        startRho?: number;
    }
    /**
    A sprite representing a pie slice. 
    */
    export class Sector extends Ext.draw.sprite.Path {
    /**
     
    */
        constructor(config: Ext.draw.sprite.SectorConfig);
    }
    interface SpriteConfig {
    /**
    The opacity of the fill. 
    */
        fillOpacity?: number;
    /**
    The color of the shape (a CSS color value). 
    */
        fillStyle?: string;
    /**
    The opacity of the sprite. 
    */
        globalAlpha?: number;
    /**
    Indicates how source images are drawn onto a destination image. 
    */
        globalCompositeOperation?: string;
    /**
    Determines whether or not the sprite is hidden. 
    */
        hidden?: boolean;
    /**
    The style of the line caps. 
    */
        lineCap?: string;
    /**
    An even number of non-negative numbers specifying a dash/space sequence. 
    */
        lineDash?: any[];
    /**
    A number specifying how far into the line dash sequence drawing commences. 
    */
        lineDashOffset?: number;
    /**
    The style of the line join. 
    */
        lineJoin?: string;
    /**
    The width of the line stroke. 
    */
        lineWidth?: number;
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    /**
    Sets the distance between the inner corner and the outer corner where two lines meet. 
    */
        miterLimit?: number;
    /**
    The central coordinate of the sprite's scale operation on the x-axis. 
    */
        rotationCenterX?: number;
    /**
    The central coordinate of the sprite's rotate operation on the y-axis. 
    */
        rotationCenterY?: number;
    /**
    The angle of rotation of the sprite in radians. 
    */
        rotationRads?: number;
    /**
    The central coordinate of the sprite's scale operation on the x-axis. 
    */
        scalingCenterX?: number;
    /**
    The central coordinate of the sprite's scale operation on the y-axis. 
    */
        scalingCenterY?: number;
    /**
    The scaling of the sprite on the x-axis. 
    */
        scalingX?: number;
    /**
    The scaling of the sprite on the y-axis. 
    */
        scalingY?: number;
    /**
    The amount blur used on the shadow. 
    */
        shadowBlur?: number;
    /**
    The color of the shadow (a CSS color value). 
    */
        shadowColor?: string;
    /**
    The offset of the sprite's shadow on the x-axis. 
    */
        shadowOffsetX?: number;
    /**
    The offset of the sprite's shadow on the y-axis. 
    */
        shadowOffsetY?: number;
    /**
    The opacity of the stroke. 
    */
        strokeOpacity?: number;
    /**
    The color of the stroke (a CSS color value). 
    */
        strokeStyle?: string;
    /**
    The surface that this sprite is rendered into.

    */
        surface?: Ext.draw.Surface;
    /**
    Determines whether the fill and stroke are affected by sprite transformations. 
    */
        transformFillStroke?: boolean;
    /**
    The translation of the sprite on the x-axis. 
    */
        translationX?: number;
    /**
    The translation of the sprite on the y-axis. 
    */
        translationY?: number;
    /**
    The stacking order of the sprite. 
    */
        zIndex?: number;
    }
    /**
    A sprite is an object rendered in a drawing Ext.draw.Surface. 
    */
    export class Sprite extends Ext.Base {
    /**
    The visual attributes of the sprite, e.g. 
    */
        attr: any;
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
     
    */
        constructor(config: Ext.draw.sprite.SpriteConfig);
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Returns the bounding box for the given Sprite as calculated with the Canvas engine. 
    */
        getBBox(isWithoutTransform?: boolean):void;
    /**
    Subclass can rewrite this function to gain better performance. 
    */
        getBBoxCenter(isWithoutTransform: boolean):any[];
    /**
    Returns the value of parent. 
    */
        getParent():any;
    /**
    Returns the value of surface. 
    */
        getSurface():Ext.draw.Surface;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Hide the sprite. 
    */
        hide():Ext.draw.sprite.Sprite;
    /**
    Performs a hit test on the sprite. 
    */
        hitTest(point: any[], options: any):any;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Called before rendering. 
    */
        preRender():void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Render method. 
    */
        render(surface: Ext.draw.Surface, ctx: any, rect: any[]):any;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    Set attributes of the sprite. 
    */
        setAttributes(changes: any, bypassNormalization?: boolean, avoidCopy?: boolean):void;
    /**
    Set attributes of the sprite, assuming the names and values have already been
normalized. 
    */
        setAttributesBypassingNormalization(changes: any, avoidCopy?: boolean):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Sets the value of parent. 
    */
        setParent(parent: any):void;
    /**
    Sets the value of surface. 
    */
        setSurface(surface: Ext.draw.Surface):void;
    /**
    Show the sprite. 
    */
        show():Ext.draw.sprite.Sprite;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Subclass will fill the plain object with x, y, width, height information of the plain bounding box of
this sprite. 
    */
        updatePlainBBox(plain: any):void;
    /**
    Subclass will fill the plain object with x, y, width, height information of the transformed
bounding box of this sprite. 
    */
        updateTransformedBBox(transform: any, plain: any):void;
    /**
    Applies sprite's attributes to the given context. 
    */
        useAttributes(ctx: any, rect: any[]):void;
    }
    interface SquareConfig extends Ext.draw.sprite.RectConfig {
    /**
    The size of the sprite. 
    */
        size?: number;
    }
    /**
    A sprite that represents a square. 
    */
    export class Square extends Ext.draw.sprite.Rect {
    /**
     
    */
        constructor(config: Ext.draw.sprite.SquareConfig);
    }
    interface TextConfig extends Ext.draw.sprite.SpriteConfig {
    /**
    The font displayed. 
    */
        font?: string;
    /**
    The family of the font displayed. 
    */
        fontFamily?: string;
    /**
    The size of the font displayed. 
    */
        fontSize?: string|number;
    /**
    The style of the font displayed. 
    */
        fontStyle?: string;
    /**
    The variant of the font displayed. 
    */
        fontVariant?: string;
    /**
    The weight of the font displayed. 
    */
        fontWeight?: string;
    /**
    The text represented in the sprite. 
    */
        text?: string;
    /**
    The alignment of the text displayed. 
    */
        textAlign?: string;
    /**
    The baseline of the text displayed. 
    */
        textBaseline?: string;
    /**
    The position of the sprite on the x-axis. 
    */
        x?: number;
    /**
    The position of the sprite on the y-axis. 
    */
        y?: number;
    }
    /**
    A sprite that represents text. 
    */
    export class Text extends Ext.draw.sprite.Sprite {
    /**
    Debug rendering options:

debug: {
    bbox: true // renders the bounding box of the text sprite
} 
    */
        debug: boolean;
    /**
     
    */
        constructor(config: Ext.draw.sprite.TextConfig);
    }
    interface TickConfig extends Ext.draw.sprite.LineConfig {
    /**
    The size of the sprite. 
    */
        size?: number;
    /**
    The position of the center of the sprite on the x-axis. 
    */
        x?: any;
    /**
    The position of the center of the sprite on the y-axis. 
    */
        y?: any;
    }
    /**
    A veritical line sprite. 
    */
    export class Tick extends Ext.draw.sprite.Line {
    /**
     
    */
        constructor(config: Ext.draw.sprite.TickConfig);
    }
    interface TriangleConfig extends Ext.draw.sprite.PathConfig {
    /**
    The size of the sprite. 
    */
        size?: number;
    }
    /**
    A sprite that represents a triangle. 
    */
    export class Triangle extends Ext.draw.sprite.Path {
    /**
     
    */
        constructor(config: Ext.draw.sprite.TriangleConfig);
    }
}
declare module Ext.enums {
    /**
    Enumeration of all ftypes.

    */
    export class Feature {
    /**
    Alias for Ext.grid.feature.AbstractSummary. 
    */
        abstractsummary: string;
    /**
    Alias for Ext.grid.feature.Feature. 
    */
        feature: string;
    /**
    Alias for Ext.grid.feature.Grouping. 
    */
        grouping: string;
    /**
    Alias for Ext.grid.feature.GroupingSummary. 
    */
        groupingsummary: string;
    /**
    Alias for Ext.grid.feature.RowBody. 
    */
        rowbody: string;
    /**
    Alias for Ext.grid.feature.Summary. 
    */
        summary: string;
    }
    /**
    Enumeration of all layout types.

    */
    export class Layout {
    /**
    Alias for Ext.layout.container.Absolute. 
    */
        absolute: string;
    /**
    Alias for Ext.layout.container.Accordion. 
    */
        accordion: string;
    /**
    Alias for Ext.layout.container.Anchor. 
    */
        anchor: string;
    /**
    Alias for Ext.layout.container.Auto. 
    */
        auto: string;
    /**
    Alias for Ext.layout.component.Auto. 
    */
        autocomponent: string;
    /**
    Alias for Ext.layout.container.Auto. 
    */
        autocontainer: string;
    /**
    Alias for Ext.layout.container.Border. 
    */
        border: string;
    /**
    Alias for Ext.layout.container.Box. 
    */
        box: string;
    /**
    Alias for Ext.layout.container.Card. 
    */
        card: string;
    /**
    Alias for Ext.layout.container.Center. 
    */
        center: string;
    /**
    Alias for Ext.layout.container.CheckboxGroup. 
    */
        checkboxgroup: string;
    /**
    Alias for Ext.layout.container.Column. 
    */
        column: string;
    /**
    Alias for Ext.layout.container.Container. 
    */
        container: string;
    /**
    Alias for Ext.layout.container.Fit. 
    */
        fit: string;
    /**
    Alias for Ext.layout.container.Form. 
    */
        form: string;
    /**
    Alias for Ext.layout.container.HBox. 
    */
        hbox: string;
    /**
    Alias for Ext.layout.container.Table. 
    */
        table: string;
    /**
    Alias for Ext.layout.container.Center. 
    */
        'ux.center': string;
    /**
    Alias for Ext.layout.container.VBox. 
    */
        vbox: string;
    }
    /**
    Enumeration of all ptypes.

    */
    export class Plugin {
    /**
    Alias for Ext.grid.plugin.CellEditing. 
    */
        cellediting: string;
    /**
    Alias for Ext.chart.plugin.ItemEvents. 
    */
        chartitemevents: string;
    /**
    Alias for Ext.grid.plugin.Clipboard. 
    */
        clipboard: string;
    /**
    Alias for Ext.grid.filters.Filters. 
    */
        gridfilters: string;
    /**
    Alias for Ext.grid.plugin.HeaderResizer. 
    */
        gridheaderresizer: string;
    /**
    Alias for Ext.grid.plugin.DragDrop. 
    */
        gridviewdragdrop: string;
    /**
    Alias for Ext.plugin.LazyItems. 
    */
        lazyitems: string;
    /**
    Alias for Ext.plugin.Responsive. 
    */
        responsive: string;
    /**
    Alias for Ext.grid.plugin.RowEditing. 
    */
        rowediting: string;
    /**
    Alias for Ext.grid.plugin.RowExpander. 
    */
        rowexpander: string;
    /**
    Alias for Ext.draw.plugin.SpriteEvents. 
    */
        spriteevents: string;
    /**
    Alias for Ext.tree.plugin.TreeViewDragDrop. 
    */
        treeviewdragdrop: string;
    /**
    Alias for Ext.plugin.Viewport. 
    */
        viewport: string;
    }
    /**
    Enumeration of all xtypes.

    */
    export class Widget {
    /**
    Alias for Ext.grid.column.Action. 
    */
        actioncolumn: string;
    /**
    Alias for Ext.chart.axis.Axis. 
    */
        axis: string;
    /**
    Alias for Ext.chart.axis.Axis3D. 
    */
        axis3d: string;
    /**
    Alias for Ext.grid.column.Boolean. 
    */
        booleancolumn: string;
    /**
    Alias for Ext.view.BoundList. 
    */
        boundlist: string;
    /**
    Alias for Ext.Component. 
    */
        box: string;
    /**
    Alias for Ext.toolbar.Breadcrumb. 
    */
        breadcrumb: string;
    /**
    Alias for Ext.button.Button. 
    */
        button: string;
    /**
    Alias for Ext.container.ButtonGroup. 
    */
        buttongroup: string;
    /**
    Alias for Ext.chart.CartesianChart. 
    */
        cartesian: string;
    /**
    Alias for Ext.form.field.Checkbox. 
    */
        checkbox: string;
    /**
    Alias for Ext.form.field.Checkbox. 
    */
        checkboxfield: string;
    /**
    Alias for Ext.form.CheckboxGroup. 
    */
        checkboxgroup: string;
    /**
    Alias for Ext.grid.column.Check. 
    */
        checkcolumn: string;
    /**
    Alias for Ext.menu.ColorPicker. 
    */
        colormenu: string;
    /**
    Alias for Ext.picker.Color. 
    */
        colorpicker: string;
    /**
    Alias for Ext.layout.container.ColumnSplitter. 
    */
        columnsplitter: string;
    /**
    Alias for Ext.form.field.ComboBox. 
    */
        combo: string;
    /**
    Alias for Ext.form.field.ComboBox. 
    */
        combobox: string;
    /**
    Alias for Ext.Component. 
    */
        component: string;
    /**
    Alias for Ext.container.Container. 
    */
        container: string;
    /**
    Alias for Ext.button.Cycle. 
    */
        cycle: string;
    /**
    Alias for Ext.dashboard.Dashboard. 
    */
        dashboard: string;
    /**
    Alias for Ext.dashboard.Column. 
    */
        'dashboard-column': string;
    /**
    Alias for Ext.dashboard.Panel. 
    */
        'dashboard-panel': string;
    /**
    Alias for Ext.view.View. 
    */
        dataview: string;
    /**
    Alias for Ext.grid.column.Date. 
    */
        datecolumn: string;
    /**
    Alias for Ext.form.field.Date. 
    */
        datefield: string;
    /**
    Alias for Ext.menu.DatePicker. 
    */
        datemenu: string;
    /**
    Alias for Ext.picker.Date. 
    */
        datepicker: string;
    /**
    Alias for Ext.form.field.Display. 
    */
        displayfield: string;
    /**
    Alias for Ext.draw.Container. 
    */
        draw: string;
    /**
    Alias for Ext.Editor. 
    */
        editor: string;
    /**
    Alias for Ext.form.field.Base. 
    */
        field: string;
    /**
    Alias for Ext.form.FieldContainer. 
    */
        fieldcontainer: string;
    /**
    Alias for Ext.form.FieldSet. 
    */
        fieldset: string;
    /**
    Alias for Ext.form.field.FileButton. 
    */
        filebutton: string;
    /**
    Alias for Ext.form.field.File. 
    */
        filefield: string;
    /**
    Alias for Ext.form.field.File. 
    */
        fileuploadfield: string;
    /**
    Alias for Ext.flash.Component. 
    */
        flash: string;
    /**
    Alias for Ext.form.Panel. 
    */
        form: string;
    /**
    Alias for Ext.grid.Panel. 
    */
        grid: string;
    /**
    Alias for Ext.grid.column.Column. 
    */
        gridcolumn: string;
    /**
    Alias for Ext.grid.Panel. 
    */
        gridpanel: string;
    /**
    Alias for Ext.view.Table. 
    */
        gridview: string;
    /**
    Alias for Ext.panel.Header. 
    */
        header: string;
    /**
    Alias for Ext.grid.header.Container. 
    */
        headercontainer: string;
    /**
    Alias for Ext.form.field.Hidden. 
    */
        hidden: string;
    /**
    Alias for Ext.form.field.Hidden. 
    */
        hiddenfield: string;
    /**
    Alias for Ext.form.field.HtmlEditor. 
    */
        htmleditor: string;
    /**
    Alias for Ext.Img. 
    */
        image: string;
    /**
    Alias for Ext.Img. 
    */
        imagecomponent: string;
    /**
    Alias for Ext.chart.interactions.Abstract. 
    */
        interaction: string;
    /**
    Alias for Ext.data.JsonPStore. 
    */
        jsonpstore: string;
    /**
    Alias for Ext.form.Label. 
    */
        label: string;
    /**
    Alias for Ext.chart.Legend. 
    */
        legend: string;
    /**
    Alias for Ext.LoadMask. 
    */
        loadmask: string;
    /**
    Alias for Ext.menu.Menu. 
    */
        menu: string;
    /**
    Alias for Ext.menu.CheckItem. 
    */
        menucheckitem: string;
    /**
    Alias for Ext.menu.Item. 
    */
        menuitem: string;
    /**
    Alias for Ext.menu.Separator. 
    */
        menuseparator: string;
    /**
    Alias for Ext.window.MessageBox. 
    */
        messagebox: string;
    /**
    Alias for Ext.picker.Month. 
    */
        monthpicker: string;
    /**
    Alias for Ext.view.MultiSelector. 
    */
        multiselector: string;
    /**
    Alias for Ext.view.MultiSelectorSearch. 
    */
        'multiselector-search': string;
    /**
    Alias for Ext.slider.Multi. 
    */
        multislider: string;
    /**
    Alias for Ext.grid.column.Number. 
    */
        numbercolumn: string;
    /**
    Alias for Ext.form.field.Number. 
    */
        numberfield: string;
    /**
    Alias for Ext.toolbar.Paging. 
    */
        pagingtoolbar: string;
    /**
    Alias for Ext.panel.Panel. 
    */
        panel: string;
    /**
    Alias for Ext.form.field.Picker. 
    */
        pickerfield: string;
    /**
    Alias for Ext.chart.PolarChart. 
    */
        polar: string;
    /**
    Alias for Ext.ProgressBar. 
    */
        progressbar: string;
    /**
    Alias for Ext.ProgressBarWidget. 
    */
        progressbarwidget: string;
    /**
    Alias for Ext.grid.property.Grid. 
    */
        propertygrid: string;
    /**
    Alias for Ext.tip.QuickTip. 
    */
        quicktip: string;
    /**
    Alias for Ext.form.field.Radio. 
    */
        radio: string;
    /**
    Alias for Ext.form.field.Radio. 
    */
        radiofield: string;
    /**
    Alias for Ext.form.RadioGroup. 
    */
        radiogroup: string;
    /**
    Alias for Ext.grid.column.RowNumberer. 
    */
        rownumberer: string;
    /**
    Alias for Ext.scroll.Indicator. 
    */
        scrollindicator: string;
    /**
    Alias for Ext.button.Segmented. 
    */
        segmentedbutton: string;
    /**
    Alias for Ext.slider.Single. 
    */
        slider: string;
    /**
    Alias for Ext.slider.Single. 
    */
        sliderfield: string;
    /**
    Alias for Ext.slider.Tip. 
    */
        slidertip: string;
    /**
    Alias for Ext.slider.Widget. 
    */
        sliderwidget: string;
    /**
    Alias for Ext.chart.SpaceFillingChart. 
    */
        spacefilling: string;
    /**
    Alias for Ext.sparkline.Bar. 
    */
        sparklinebar: string;
    /**
    Alias for Ext.sparkline.Box. 
    */
        sparklinebox: string;
    /**
    Alias for Ext.sparkline.Bullet. 
    */
        sparklinebullet: string;
    /**
    Alias for Ext.sparkline.Discrete. 
    */
        sparklinediscrete: string;
    /**
    Alias for Ext.sparkline.Line. 
    */
        sparklineline: string;
    /**
    Alias for Ext.sparkline.Pie. 
    */
        sparklinepie: string;
    /**
    Alias for Ext.sparkline.TriState. 
    */
        sparklinetristate: string;
    /**
    Alias for Ext.form.field.Spinner. 
    */
        spinnerfield: string;
    /**
    Alias for Ext.button.Split. 
    */
        splitbutton: string;
    /**
    Alias for Ext.resizer.Splitter. 
    */
        splitter: string;
    /**
    Alias for Ext.draw.Surface. 
    */
        surface: string;
    /**
    Alias for Ext.tab.Tab. 
    */
        tab: string;
    /**
    Alias for Ext.tab.Bar. 
    */
        tabbar: string;
    /**
    Alias for Ext.panel.Table. 
    */
        tablepanel: string;
    /**
    Alias for Ext.view.Table. 
    */
        tableview: string;
    /**
    Alias for Ext.tab.Panel. 
    */
        tabpanel: string;
    /**
    Alias for Ext.form.field.Tag. 
    */
        tagfield: string;
    /**
    Alias for Ext.toolbar.Fill. 
    */
        tbfill: string;
    /**
    Alias for Ext.toolbar.Item. 
    */
        tbitem: string;
    /**
    Alias for Ext.toolbar.Separator. 
    */
        tbseparator: string;
    /**
    Alias for Ext.toolbar.Spacer. 
    */
        tbspacer: string;
    /**
    Alias for Ext.toolbar.TextItem. 
    */
        tbtext: string;
    /**
    Alias for Ext.grid.column.Template. 
    */
        templatecolumn: string;
    /**
    Alias for Ext.form.field.TextArea. 
    */
        textarea: string;
    /**
    Alias for Ext.form.field.TextArea. 
    */
        textareafield: string;
    /**
    Alias for Ext.form.field.Text. 
    */
        textfield: string;
    /**
    Alias for Ext.form.field.Time. 
    */
        timefield: string;
    /**
    Alias for Ext.picker.Time. 
    */
        timepicker: string;
    /**
    Alias for Ext.tip.Tip. 
    */
        tip: string;
    /**
    Alias for Ext.panel.Title. 
    */
        title: string;
    /**
    Alias for Ext.window.Toast. 
    */
        toast: string;
    /**
    Alias for Ext.panel.Tool. 
    */
        tool: string;
    /**
    Alias for Ext.toolbar.Toolbar. 
    */
        toolbar: string;
    /**
    Alias for Ext.tip.ToolTip. 
    */
        tooltip: string;
    /**
    Alias for Ext.tree.Column. 
    */
        treecolumn: string;
    /**
    Alias for Ext.tree.Panel. 
    */
        treepanel: string;
    /**
    Alias for Ext.tree.View. 
    */
        treeview: string;
    /**
    Alias for Ext.form.field.Trigger. 
    */
        trigger: string;
    /**
    Alias for Ext.form.field.Trigger. 
    */
        triggerfield: string;
    /**
    Alias for Ext.container.Viewport. 
    */
        viewport: string;
    /**
    Alias for Ext.Widget. 
    */
        widget: string;
    /**
    Alias for Ext.grid.column.Widget. 
    */
        widgetcolumn: string;
    /**
    Alias for Ext.window.Window. 
    */
        window: string;
    }
}
declare module Ext.env {
    /**
    Provides information about browser. 
    */
    export class Browser {
    /**
    The full name of the current browser's engine. 
    */
        engineName: string;
    /**
    Refer to Ext.Version.

    */
        engineVersion: Ext.Version;
    /**
    true if page is running over SSL.

    */
        isSecure: boolean;
    /**
    true if browser is using strict mode.

    */
        isStrict: boolean;
    /**
    The full name of the current browser. 
    */
        name: string;
    /**
    Browser User Agent string.

    */
        userAgent: string;
    /**
    Refer to Ext.Version.

    */
        version: Ext.Version;
    /**
    A "hybrid" property, can be either accessed as a method call, for example:

if (Ext.browser.is('IE')) {
    //  ...
    */
        is(name: string):boolean;
    }
    /**
    Provides information about operating system environment. 
    */
    export class OS {
    /**
    The full name of the current operating system. 
    */
        name: string;
    /**
    Refer to Ext.Version 
    */
        version: Ext.Version;
    /**
    A "hybrid" property, can be either accessed as a method call, i.e:

if (Ext.os.is('Android')) {
    //  ...
    */
        is(name: string):boolean;
    }
    /**
    This class manages ready detection and handling. 
    */
    export class Ready {
    /**
    This method invokes the given listener instance based on its options. 
    */
        static invoke(listener: any):void;
    /**
    Invokes as many listeners as are appropriate given the current state. 
    */
        static invokeAll():void;
    }
}
declare module Ext.event {
    /**
    Just as Ext.dom.Element wraps around a native DOM node, Ext.event.Event wraps the browser's native
event-object norma
    */
    export class Event extends Ext.Base {
    /**
    Key constant 
    */
        A: number;
    /**
    Key constant 
    */
        ALT: number;
    /**
    Key constant 
    */
        B: number;
    /**
    Key constant 
    */
        BACKSPACE: number;
    /**
    Key constant 
    */
        C: number;
    /**
    Key constant 
    */
        CAPS_LOCK: number;
    /**
    Key constant 
    */
        CONTEXT_MENU: number;
    /**
    Key constant 
    */
        CTRL: number;
    /**
    Key constant 
    */
        D: number;
    /**
    Key constant 
    */
        DELETE: number;
    /**
    Key constant 
    */
        DOWN: number;
    /**
    Key constant 
    */
        E: number;
    /**
    Key constant 
    */
        EIGHT: number;
    /**
    Key constant 
    */
        END: number;
    /**
    Key constant 
    */
        ENTER: number;
    /**
    Key constant 
    */
        ESC: number;
    /**
    Key constant 
    */
        F: number;
    /**
    Key constant 
    */
        F1: number;
    /**
    Key constant 
    */
        F10: number;
    /**
    Key constant 
    */
        F11: number;
    /**
    Key constant 
    */
        F12: number;
    /**
    Key constant 
    */
        F2: number;
    /**
    Key constant 
    */
        F3: number;
    /**
    Key constant 
    */
        F4: number;
    /**
    Key constant 
    */
        F5: number;
    /**
    Key constant 
    */
        F6: number;
    /**
    Key constant 
    */
        F7: number;
    /**
    Key constant 
    */
        F8: number;
    /**
    Key constant 
    */
        F9: number;
    /**
    Key constant 
    */
        FIVE: number;
    /**
    Key constant 
    */
        FOUR: number;
    /**
    Key constant 
    */
        G: number;
    /**
    Key constant 
    */
        H: number;
    /**
    Key constant 
    */
        HOME: number;
    /**
    Key constant 
    */
        I: number;
    /**
    Key constant 
    */
        INSERT: number;
    /**
    Key constant 
    */
        J: number;
    /**
    Key constant 
    */
        K: number;
    /**
    Key constant 
    */
        L: number;
    /**
    Key constant 
    */
        LEFT: number;
    /**
    Key constant 
    */
        M: number;
    /**
    Key constant 
    */
        N: number;
    /**
    Key constant 
    */
        NINE: number;
    /**
    Key constant 
    */
        NUM_CENTER: number;
    /**
    Key constant 
    */
        NUM_DIVISION: number;
    /**
    Key constant 
    */
        NUM_EIGHT: number;
    /**
    Key constant 
    */
        NUM_FIVE: number;
    /**
    Key constant 
    */
        NUM_FOUR: number;
    /**
    Key constant 
    */
        NUM_MINUS: number;
    /**
    Key constant 
    */
        NUM_MULTIPLY: number;
    /**
    Key constant 
    */
        NUM_NINE: number;
    /**
    Key constant 
    */
        NUM_ONE: number;
    /**
    Key constant 
    */
        NUM_PERIOD: number;
    /**
    Key constant 
    */
        NUM_PLUS: number;
    /**
    Key constant 
    */
        NUM_SEVEN: number;
    /**
    Key constant 
    */
        NUM_SIX: number;
    /**
    Key constant 
    */
        NUM_THREE: number;
    /**
    Key constant 
    */
        NUM_TWO: number;
    /**
    Key constant 
    */
        NUM_ZERO: number;
    /**
    Key constant 
    */
        O: number;
    /**
    Key constant 
    */
        ONE: number;
    /**
    Key constant 
    */
        P: number;
    /**
    Key constant 
    */
        PAGE_DOWN: number;
    /**
    Key constant 
    */
        PAGE_UP: number;
    /**
    Key constant 
    */
        PAUSE: number;
    /**
    Key constant 
    */
        PRINT_SCREEN: number;
    /**
    Key constant 
    */
        Q: number;
    /**
    Key constant 
    */
        R: number;
    /**
    Key constant 
    */
        RETURN: number;
    /**
    Key constant 
    */
        RIGHT: number;
    /**
    Key constant 
    */
        S: number;
    /**
    Key constant 
    */
        SEVEN: number;
    /**
    Key constant 
    */
        SHIFT: number;
    /**
    Key constant 
    */
        SIX: number;
    /**
    Key constant 
    */
        SPACE: number;
    /**
    Key constant 
    */
        T: number;
    /**
    Key constant 
    */
        TAB: number;
    /**
    Key constant 
    */
        THREE: number;
    /**
    Key constant 
    */
        TWO: number;
    /**
    Key constant 
    */
        U: number;
    /**
    Key constant 
    */
        UP: number;
    /**
    Key constant 
    */
        V: number;
    /**
    Key constant 
    */
        W: number;
    /**
    The mouse wheel delta scaling factor. 
    */
        WHEEL_SCALE: number;
    /**
    Key constant 
    */
        X: number;
    /**
    Key constant 
    */
        Y: number;
    /**
    Key constant 
    */
        Z: number;
    /**
    Key constant 
    */
        ZERO: number;
    /**
    True if the alt key was down during the event.

    */
        altKey: boolean;
    /**
    The angle of the rotation. 
    */
        angle: number;
    /**
    The raw browser event which this object wraps.

    */
        browserEvent: Event;
    /**
    Indicates which mouse button caused the event for mouse events, for example
mousedown, click, mouseup:
- 0 for left b
    */
        button: number;
    /**
    True if the control key was down during the event. 
    */
        ctrlKey: boolean;
    /**
    Refers to the element the event handler was attached to, vs the target, which is
the actual element that fired the ev
    */
        currentTarget: HTMLElement;
    /**
    Indicates whether or not preventDefault() was called on the event. 
    */
        defaultPrevented: boolean;
    /**
    Same as currentTarget 
    */
        delegatedTarget: HTMLElement;
    /**
    The direction of the swipe. 
    */
        direction: number;
    /**
    The distance of the event. 
    */
        distance: number;
    /**
    The duration of the swipe. 
    */
        duration: number;
    /**
    The browsers x coordinate of the event. 
    */
        pageX: number;
    /**
    The browsers y coordinate of the event. 
    */
        pageY: number;
    /**
    A amount of rotation, since the start of the event. 
    */
        rotation: number;
    /**
    The scape of a pinch event. 
    */
        scale: number;
    /**
    True if the shift key was down during the event.

    */
        shiftKey: boolean;
    /**
    The element that fired this event. 
    */
        target: HTMLElement;
    /**
     
    */
        constructor(event: any);
    /**
    Gets the character code for the event. 
    */
        getCharCode():number;
    /**
    Returns a normalized keyCode for the event. 
    */
        getKey():number;
    /**
    Gets the x coordinate of the event. 
    */
        getPageX():number;
    /**
    Gets the y coordinate of the event. 
    */
        getPageY():number;
    /**
    Returns a point object that consists of the object coordinates. 
    */
        getPoint():Ext.util.Point;
    /**
    Gets the related target. 
    */
        getRelatedTarget(selector?: string, maxDepth?: number|HTMLElement, returnEl?: boolean):HTMLElement;
    /**
    Gets the target for the event. 
    */
        getTarget(selector?: string, maxDepth?: any, returnEl?: boolean):HTMLElement;
    /**
    Returns the time of the event. 
    */
        getTime():Date;
    /**
    Normalizes mouse wheel y-delta across browsers. 
    */
        getWheelDelta():number;
    /**
    Returns the mouse wheel deltas for this event. 
    */
        getWheelDeltas():any;
    /**
    Gets the x coordinate of the event. 
    */
        getX():number;
    /**
    Gets the X and Y coordinates of the event. 
    */
        getXY():number[];
    /**
    Gets the y coordinate of the event. 
    */
        getY():number;
    /**
    Returns true if the control, meta, shift or alt key was pressed during this event. 
    */
        hasModifier():boolean;
    /**
    Checks if the key pressed was a "navigation" key. 
    */
        isNavKeyPress(scrollableOnly?: boolean):boolean;
    /**
    Checks if the key pressed was a "special" key. 
    */
        isSpecialKey():boolean;
    /**
    Prevents the browsers default handling of the event. 
    */
        preventDefault():Ext.event.Event;
    /**
    Stop the event (preventDefault and stopPropagation). 
    */
        stopEvent():Ext.event.Event;
    /**
    Cancels bubbling of the event. 
    */
        stopPropagation():Ext.event.Event;
    /**
    Returns true if the target of this event is a child of el. 
    */
        within(el: string|HTMLElement|Ext.dom.Element, related?: boolean, allowEl?: boolean):boolean;
    }
}
declare module Ext.event.gesture {
    interface DoubleTapConfig extends Ext.event.gesture.SingleTouchConfig {
    /**
    The maximum distance a touch can move without canceling recognition 
    */
        moveDistance?: number;
    /**
    The minimum distance the second tap can occur from the first tap and still
be considered a doubletap 
    */
        tapDistance?: number;
    }
    /**
    A simple event recognizer which knows when you double tap.

    */
    export class DoubleTap extends Ext.event.gesture.SingleTouch {
    /**
     
    */
        constructor(config: Ext.event.gesture.DoubleTapConfig);
    /**
    Returns the value of maxDuration. 
    */
        getMaxDuration():number;
    /**
    Returns the value of moveDistance. 
    */
        getMoveDistance():number;
    /**
    Returns the value of tapDistance. 
    */
        getTapDistance():number;
    /**
    Sets the value of maxDuration. 
    */
        setMaxDuration(maxDuration: number):void;
    /**
    Sets the value of moveDistance. 
    */
        setMoveDistance(moveDistance: number):void;
    /**
    Sets the value of tapDistance. 
    */
        setTapDistance(tapDistance: number):void;
    }
    interface DragConfig extends Ext.event.gesture.SingleTouchConfig {
    /**
    The minimum distance of pixels before a touch event becomes a drag event. 
    */
        minDistance?: number;
    }
    /**
    

    */
    export class Drag extends Ext.event.gesture.SingleTouch {
    /**
     
    */
        constructor();
    /**
    Returns the value of minDistance. 
    */
        getMinDistance():number;
    /**
    Sets the value of minDistance. 
    */
        setMinDistance(minDistance: number):void;
    }
    interface EdgeSwipeConfig extends Ext.event.gesture.SwipeConfig {
    }
    /**
    A event recognizer created to recognize swipe movements from the edge of a container.

    */
    export class EdgeSwipe extends Ext.event.gesture.Swipe {
    /**
     
    */
        constructor(config: Ext.event.gesture.EdgeSwipeConfig);
    }
    interface LongPressConfig extends Ext.event.gesture.SingleTouchConfig {
    }
    /**
    A event recognizer which knows when you tap and hold for more than 1 second.

    */
    export class LongPress extends Ext.event.gesture.SingleTouch {
    /**
     
    */
        constructor(config: Ext.event.gesture.LongPressConfig);
    /**
    Returns the value of minDuration. 
    */
        getMinDuration():number;
    /**
    Returns the value of moveDistance. 
    */
        getMoveDistance():number;
    /**
    Sets the value of minDuration. 
    */
        setMinDuration(minDuration: number):void;
    /**
    Sets the value of moveDistance. 
    */
        setMoveDistance(moveDistance: number):void;
    }
    interface MultiTouchConfig extends Ext.event.gesture.RecognizerConfig {
    }
    /**
    A base class for gesture recognizers that involve multiple simultaneous contact points
between the screen and the inp
    */
    export class MultiTouch extends Ext.event.gesture.Recognizer {
    /**
     
    */
        constructor(config: Ext.event.gesture.MultiTouchConfig);
    }
    interface PinchConfig extends Ext.event.gesture.MultiTouchConfig {
    }
    /**
    A event recognizer which knows when you pinch.

    */
    export class Pinch extends Ext.event.gesture.MultiTouch {
    /**
     
    */
        constructor(config: Ext.event.gesture.PinchConfig);
    }
    interface RecognizerConfig {
    }
    /**
    A base class for all gesture recognizers. 
    */
    export class Recognizer extends Ext.Base {
    /**
    The priority of the recognizer. 
    */
        priority: number;
    /**
     
    */
        constructor(config: Ext.event.gesture.RecognizerConfig);
    /**
    Returns the value of callbackScope. 
    */
        getCallbackScope():any;
    /**
    Retrieves the id of this component. 
    */
        getId():string;
    /**
    Returns the value of onRecognized. 
    */
        getOnRecognized():any;
    /**
    Sets the value of callbackScope. 
    */
        setCallbackScope(callbackScope: any):void;
    /**
    Sets the value of onRecognized. 
    */
        setOnRecognized(onRecognized: any):void;
    }
    interface RotateConfig extends Ext.event.gesture.MultiTouchConfig {
    }
    /**
    A simple event recognizer which knows when you rotate.

    */
    export class Rotate extends Ext.event.gesture.MultiTouch {
    /**
     
    */
        constructor(config: Ext.event.gesture.RotateConfig);
    }
    interface SingleTouchConfig extends Ext.event.gesture.RecognizerConfig {
    }
    /**
    A base class for gesture recognizers that are only concerned with a single point of
contact between the screen and th
    */
    export class SingleTouch extends Ext.event.gesture.Recognizer {
    /**
     
    */
        constructor(config: Ext.event.gesture.SingleTouchConfig);
    }
    interface SwipeConfig extends Ext.event.gesture.SingleTouchConfig {
    }
    /**
    A gesture recognizer for swipe events

    */
    export class Swipe extends Ext.event.gesture.SingleTouch {
    /**
     
    */
        constructor(config: Ext.event.gesture.SwipeConfig);
    /**
    Returns the value of maxDuration. 
    */
        getMaxDuration():number;
    /**
    Returns the value of maxOffset. 
    */
        getMaxOffset():number;
    /**
    Returns the value of minDistance. 
    */
        getMinDistance():number;
    /**
    Sets the value of maxDuration. 
    */
        setMaxDuration(maxDuration: number):void;
    /**
    Sets the value of maxOffset. 
    */
        setMaxOffset(maxOffset: number):void;
    /**
    Sets the value of minDistance. 
    */
        setMinDistance(minDistance: number):void;
    }
    interface TapConfig extends Ext.event.gesture.SingleTouchConfig {
    /**
    The maximimum distance in pixels a touchstart event can travel and still be considered a tap event. 
    */
        moveDistance?: number;
    }
    /**
    A simple event recogniser which knows when you tap.

    */
    export class Tap extends Ext.event.gesture.SingleTouch {
    /**
     
    */
        constructor(config: Ext.event.gesture.TapConfig);
    /**
    Returns the value of moveDistance. 
    */
        getMoveDistance():number;
    /**
    Sets the value of moveDistance. 
    */
        setMoveDistance(moveDistance: number):void;
    }
}
declare module Ext.event.publisher {
    /**
    

    */
    export class Dom extends Ext.event.publisher.Publisher {
    /**
    An array of DOM events that this publisher handles. 
    */
        handledDomEvents: any[];
    /**
     
    */
        constructor();
    /**
    Resets the internal state of the Dom publisher. 
    */
        reset():void;
    }
    /**
    

    */
    export class ElementPaint extends Ext.event.publisher.Publisher {
    /**
     
    */
        constructor();
    }
    /**
    

    */
    export class ElementSize extends Ext.event.publisher.Publisher {
    /**
     
    */
        constructor();
    }
    /**
    

    */
    export class Focus extends Ext.event.publisher.Dom {
    /**
     
    */
        constructor();
    }
    interface GestureConfig {
    }
    /**
    

    */
    export class Gesture extends Ext.event.publisher.Dom {
    /**
     
    */
        constructor(config: Ext.event.publisher.GestureConfig);
    }
    /**
    A publisher that adds support for mousenter and mouseleave events on browsers that do
not support those events natively

    */
    export class MouseEnterLeave extends Ext.event.publisher.Dom {
    /**
     
    */
        constructor();
    }
    /**
    Abstract base class for event publishers

    */
    export class Publisher extends Ext.Base {
    /**
    An array of events that this publisher handles. 
    */
        handledEvents: any[];
    /**
    A map of all publisher singleton instances. 
    */
        publishers: any;
    /**
    A map of handled event names to the publisher that handles each event. 
    */
        publishersByEvent: any;
    /**
     
    */
        constructor();
    /**
    Registers all handledEvents in the
publishersByEvent map. 
    */
        registerEvents(events?: string[]):void;
    }
}
declare module Ext.flash {
    interface ComponentConfig extends Ext.ComponentConfig {
    /**
    The background color of the SWF movie. 
    */
        backgroundColor?: string;
    /**
    True to prompt the user to install flash if not installed. 
    */
        expressInstall?: boolean;
    /**
    A set of key value pairs to be passed to the flash object as attributes.

    */
        flashAttributes?: any;
    /**
    A set of key value pairs to be passed to the flash object as parameters. 
    */
        flashParams?: any;
    /**
    A set of key value pairs to be passed to the flash object as flash variables.

    */
        flashVars?: any;
    /**
    Indicates the version the flash content was published for. 
    */
        flashVersion?: string;
    /**
    The height of the embedded SWF movie inside the component. 
    */
        swfHeight?: string|number;
    /**
    The width of the embedded SWF movie inside the component. 
    */
        swfWidth?: string|number;
    /**
    The URL of the SWF file to include.

    */
        url?: string;
    /**
    The wmode of the flash object. 
    */
        wmode?: string;
    }
    /**
    A simple Component for displaying an Adobe Flash SWF movie. 
    */
    export class Component extends Ext.Component {
    /**
    A reference to the object or embed element into which the SWF file is loaded. 
    */
        swf: Ext.dom.Element;
    /**
    The url for installing flash if it doesn't exist. 
    */
        EXPRESS_INSTALL_URL: string;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.flash.ComponentConfig);
    /**
    Retrieves the id of the SWF object/embed element. 
    */
        getSwfId():void;
    }
}
declare module Ext.form {
    interface BasicConfig extends Ext.util.ObservableConfig {
    /**
    If specified, load and submit actions will be handled with DirectLoad
and DirectSubmit. 
    */
        api?: any;
    /**
    Parameters to pass with all requests. 
    */
        baseParams?: any;
    /**
    An Ext.data.reader.Reader (e.g. 
    */
        errorReader?: any;
    /**
    If set to true, the field values are sent as JSON in the request body. 
    */
        jsonSubmit?: boolean;
    /**
    Optional metadata to pass with the actions when Ext.Direct api is used. 
    */
        metadata?: any;
    /**
    The request method to use (GET or POST) for form actions if one isn't supplied in the action options.

    */
        method?: string;
    /**
    A list of params to be executed server side. 
    */
        paramOrder?: string|string[];
    /**
    Only used for the api load configuration. 
    */
        paramsAsHash?: boolean;
    /**
    An Ext.data.reader.Reader (e.g. 
    */
        reader?: any;
    /**
    If set to true, a standard HTML form submit is used instead of a XHR (Ajax) style form submission. 
    */
        standardSubmit?: boolean;
    /**
    Timeout for form actions in seconds. 
    */
        timeout?: number;
    /**
    If set to true, reset() resets to the last loaded or
setValues() data instead of when the form was first
created. 
    */
        trackResetOnLoad?: boolean;
    /**
    The URL to use for form actions if one isn't supplied in the
doAction options.

    */
        url?: string;
    /**
    By default wait messages are displayed with Ext.MessageBox.wait. 
    */
        waitMsgTarget?: string|HTMLElement|Ext.dom.Element;
    /**
    The default title to show for the waiting message box 
    */
        waitTitle?: string;
    }
    /**
    Provides input field management, validation, submission, and form loading services for the collection
of Field instan
    */
    export class Basic extends Ext.util.Observable {
    /**
    The container component to which this BasicForm is attached.

    */
        owner: Ext.container.Container;
    /**
    Creates new form. 
    */
        constructor(owner: Ext.container.Container, config: Ext.form.BasicConfig);
    /**
    Calls Ext.applyIf for all field in this form with the passed object. 
    */
        applyIfToFields(obj: any):Ext.form.Basic;
    /**
    Calls Ext.apply for all fields in this form with the passed object. 
    */
        applyToFields(obj: any):Ext.form.Basic;
    /**
    Check whether the dirty state of the entire form has changed since it was last checked, and
if so fire the dirtychang
    */
        checkDirty():void;
    /**
    Check whether the validity of the entire form has changed since it was last checked, and
if so fire the validitychang
    */
        checkValidity():void;
    /**
    Clears all invalid field messages in this form. 
    */
        clearInvalid():Ext.form.Basic;
    /**
    Performs a predefined action (an implementation of Ext.form.action.Action) to perform application-
specific processing. 
    */
        doAction(action: string|Ext.form.action.Action, options?: any):Ext.form.Basic;
    /**
    Find a specific Ext.form.field.Field in this form by id or name. 
    */
        findField(id: string):Ext.form.field.Field;
    /**
    Retrieves the fields in the form as a set of key/value pairs, using their
getModelData() method to collect the values. 
    */
        getFieldValues(dirtyOnly?: boolean):any;
    /**
    Return all the Ext.form.field.Field components in the owner container. 
    */
        getFields():Ext.util.MixedCollection;
    /**
    Returns the last Ext.data.Model instance that was loaded via loadRecord 
    */
        getRecord():Ext.data.Model;
    /**
    Retrieves the fields in the form as a set of key/value pairs, using their
getSubmitData() method to collect the values. 
    */
        getValues(asString?: boolean, dirtyOnly?: boolean, includeEmptyText?: boolean, useDataValues?: boolean):any;
    /**
    Returns true if the form contains any invalid fields. 
    */
        hasInvalidField():void;
    /**
    Returns true if the form contains a file upload field. 
    */
        hasUpload():boolean;
    /**
    Returns true if any fields in this form have changed from their original values. 
    */
        isDirty():boolean;
    /**
    Returns true if client-side validation on the form is successful. 
    */
        isValid():boolean;
    /**
    Shortcut to do a load action. 
    */
        load(options: any):Ext.form.Basic;
    /**
    Loads an Ext.data.Model into this form by calling setValues with the
record data. 
    */
        loadRecord(record: Ext.data.Model):Ext.form.Basic;
    /**
    This method allows you to mark one or more fields in a form as invalid along with
one or more invalid messages per fi
    */
        markInvalid(errors: any):Ext.form.Basic;
    /**
    Resets all fields in this form. 
    */
        reset(resetRecord?: boolean):Ext.form.Basic;
    /**
    Set values for fields in this form in bulk. 
    */
        setValues(values: any):Ext.form.Basic;
    /**
    Shortcut to do a submit action. 
    */
        submit(options: any):Ext.form.Basic;
    /**
    Persists the values in this form into the passed Ext.data.Model object in a beginEdit/endEdit block. 
    */
        updateRecord(record?: Ext.data.Model):Ext.form.Basic;
    }
    interface CheckboxGroupConfig extends Ext.form.FieldContainerConfig {
    /**
    False to validate that at least one item in the group is checked. 
    */
        allowBlank?: boolean;
    /**
    Error text to display if the allowBlank validation fails 
    */
        blankText?: string;
    /**
    Specifies the number of columns to use when displaying grouped checkbox/radio controls using automatic layout. 
    */
        columns?: string|number|number[];
    /**
    Setting this to false will prevent the field from being submitted even when it is
not disabled. 
    */
        submitValue?: boolean;
    /**
    Specifies whether this field should be validated immediately whenever a change in its value is detected. 
    */
        validateOnChange?: boolean;
    /**
    This property, when a String, contributes its value to the error state of this
instance as reported by getErrors.

    */
        validation?: boolean|string;
    /**
    A value to initialize this field with.

    */
        value?: any;
    /**
    The event name(s) to use to publish the value
Ext.form.field.Base.bind for this field. 
    */
        valuePublishEvent?: string[]|string;
    /**
    True to distribute contained controls across columns, completely filling each column top to bottom before
starting on
    */
        vertical?: boolean;
    }
    /**
    A field container which has a specialized layout for arranging
Ext.form.field.Checkbox controls into columns, and pro
    */
    export class CheckboxGroup extends Ext.form.FieldContainer {
    /**
    Flag denoting that this component is a Field. 
    */
        isFormField: boolean;
    /**
    The original value of the field as configured in the value configuration, or as loaded by the last
form load operatio
    */
        originalValue: any;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.form.CheckboxGroupConfig);
    /**
    A utility for grouping a set of modifications which may trigger value changes into a single transaction, to
prevent e
    */
        batchChanges(fn: Function):void;
    /**
    Template method before a field is reset. 
    */
        beforeReset():void;
    /**
    Checks whether the value of the field has changed since the last time it was checked. 
    */
        checkChange():void;
    /**
    Checks the isDirty state of the field and if it has changed since the last time it was checked,
fires the dirtychange
    */
        checkDirty():void;
    /**
    Cleans up values initialized by this Field mixin on the current instance. 
    */
        cleanupField():void;
    /**
    Clear any invalid styles/messages for this field. 
    */
        clearInvalid():void;
    /**
    Only relevant if the instance's isFileUpload method returns true. 
    */
        extractFileInput():HTMLElement;
    /**
    Returns an Array of all checkboxes in the container which are currently checked 
    */
        getChecked():Ext.form.field.Checkbox[];
    /**
    Runs CheckboxGroup's validations and returns an array of any errors. 
    */
        getErrors():string[];
    /**
    Don't return any data for the model; the form will get the info from the individual checkboxes themselves. 
    */
        getModelData():any;
    /**
    Don't return any data for submit; the form will get the info from the individual checkboxes themselves. 
    */
        getSubmitData():any;
    /**
    Returns the value of validation. 
    */
        getValidation():boolean|string;
    /**
    Returns an object containing the values of all checked checkboxes within the group. 
    */
        getValue():void;
    /**
    Initializes this Field mixin on the current instance. 
    */
        initField():void;
    /**
    Initializes the field's value based on the initial config. 
    */
        initValue():void;
    /**
    private override 
    */
        isDirty():boolean;
    /**
    private override - the group value is a complex object, compare using object serialization 
    */
        isEqual(value1: any, value2: any):boolean;
    /**
    Returns whether this Field is a file upload field; if it returns true, forms will use special techniques for
submitti
    */
        isFileUpload():boolean;
    /**
    Returns whether or not the field value is currently valid by validating the field's current
value. 
    */
        isValid():boolean;
    /**
    Display one or more error messages associated with this field, using
msgTarget to determine how to display the
messag
    */
        markInvalid(errors: string|string[]):void;
    /**
    Resets the checked state of all checkboxes in the group to their originally
loaded values and clears any validation m
    */
        reset():void;
    /**
    Resets the field's originalValue property so it matches the current value. 
    */
        resetOriginalValue():void;
    /**
    Sets the value of validation. 
    */
        setValidation(validation: boolean|string):void;
    /**
    Sets the value(s) of all checkboxes in the group. 
    */
        setValue(value: any):Ext.form.CheckboxGroup;
    /**
    Returns whether or not the field value is currently valid by validating the field's current
value, and fires the vali
    */
        validate():boolean;
    }
    interface CheckboxManagerConfig {
    }
    /**
    Private utility class for managing all Ext.form.field.Checkbox fields grouped by name.

    */
    export class CheckboxManager {
    /**
    This object holds a key for any event that has a listener. 
    */
        static hasListeners: any;
    /**
    true in this class to identify an object as an instantiated MixedCollection, or subclass thereof. 
    */
        static isMixedCollection: boolean;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        static isObservable: boolean;
    /**
    true in this class to identify an object as an instantiated Sortable, or subclass thereof. 
    */
        static isSortable: boolean;
    /**
    Adds an item to the collection. 
    */
        static add(key: any, obj?: any):any;
    /**
    Appends an after-event handler. 
    */
        static addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Adds all elements of an Array or an Object to the collection. 
    */
        static addAll(objs: any):void;
    /**
    Appends a before-event handler. 
    */
        static addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        static addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        static addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Removes all items from the collection. 
    */
        static clear():void;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        static clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        static clearManagedListeners():void;
    /**
    Creates a shallow copy of this collection 
    */
        static clone():Ext.util.MixedCollection;
    /**
    Collects unique values of a particular property in this MixedCollection 
    */
        static collect(property: string, root?: string, allowBlank?: boolean):any[];
    /**
    Returns true if the collection contains the passed Object as an item. 
    */
        static contains(o: any):boolean;
    /**
    Returns true if the collection contains the passed Object as a key. 
    */
        static containsKey(key: string):boolean;
    /**
    Executes the specified function once for every item in the collection. 
    */
        static each(fn: (item: any, index: number, len: number) => any, scope?: any):void;
    /**
    Executes the specified function once for every key in the collection, passing each
key, and its associated item as th
    */
        static eachKey(fn: (key: string, item: any, index: number, len: number) => any, scope?: any):void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        static enableBubble(eventNames: string|string[]):void;
    /**
    Filters the objects in this collection by a set of Filters, or by a single
property/value pair with optional paramete
    */
        static filter(property: Ext.util.Filter[]|string, value: string|RegExp, anyMatch?: boolean, caseSensitive?: boolean):Ext.util.MixedCollection;
    /**
    Filter by a function. 
    */
        static filterBy(fn: (item: any, key: string) => any, scope?: any):Ext.util.MixedCollection;
    /**
    Returns the first item in the collection which elicits a true return value from the passed selection function. 
    */
        static find():void;
    /**
    Returns the first item in the collection which elicits a true return value from the
passed selection function. 
    */
        static findBy(fn: (item: any, key: string) => any, scope?: any):any;
    /**
    Finds the index of the first matching object in this collection by a specific property/value. 
    */
        static findIndex(property: string, value: string|RegExp, start?: number, anyMatch?: boolean, caseSensitive?: boolean):number;
    /**
    Find the index of the first matching object in this collection by a function. 
    */
        static findIndexBy(fn: (item: any, key: string) => any, scope?: any, start?: number):number;
    /**
    Calculates the insertion index of the new item based upon the comparison function passed, or the current sort order. 
    */
        static findInsertionIndex(newItem: any, sorterFn?: Function):number;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        static fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        static fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        static fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Returns the first item in the collection. 
    */
        static first():any;
    /**
    Returns a comparator function which compares two items and returns -1, 0, or 1 depending
on the currently defined set
    */
        static generateComparator():void;
    /**
    Returns the item associated with the passed key OR index. 
    */
        static get(key: string|number):any;
    /**
    Returns the item at the specified index. 
    */
        static getAt(index: number):any;
    /**
    Returns the item associated with the passed key. 
    */
        static getByKey(key: string|number):any;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the number of items in the collection. 
    */
        static getCount():number;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    A function which will be called, passing a newly added object
when the object is added without a separate id. 
    */
        static getKey(item: any):any;
    /**
    Returns a range of items in this collection 
    */
        static getRange(startIndex?: number, endIndex?: number):any[];
    /**
    Returns the value of sorters. 
    */
        static getSorters():Ext.util.Sorter[]|any[];
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        static hasListener(eventName: string):boolean;
    /**
    Returns index within the collection of the passed Object. 
    */
        static indexOf(o: any):number;
    /**
    Returns index within the collection of the passed key. 
    */
        static indexOfKey(key: string):number;
    /**
    Inserts an item at the specified index in the collection. 
    */
        static insert(index: number, key: any, o?: any):any;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        static isSuspended(event?: string):boolean;
    /**
    Returns the last item in the collection. 
    */
        static last():any;
    /**
    Shorthand for addManagedListener. 
    */
        static mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        static mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        static on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        static onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        static onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        static relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Remove an item from the collection. 
    */
        static remove(o: any):any;
    /**
    Removes a before-event handler. 
    */
        static removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Remove all items in the collection. 
    */
        static removeAll(items?: any[]):Ext.util.MixedCollection;
    /**
    Remove an item from a specified index in the collection. 
    */
        static removeAt(index: number):any;
    /**
    Removes an item associated with the passed key fom the collection. 
    */
        static removeAtKey(key: string):any;
    /**
    Removes a before-event handler. 
    */
        static removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        static removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        static removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Remove a range of items starting at a specified index in the collection. 
    */
        static removeRange(index: number, removeCount?: number):any;
    /**
    Reorders each of the items based on a mapping from old index to new index. 
    */
        static reorder(mapping: any):void;
    /**
    Replaces an item in the collection. 
    */
        static replace(key: string, o: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        static resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        static resumeEvents(discardQueue?: boolean):void;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    An alias for addListener. 
    */
        static setListeners(listeners: any):void;
    /**
    Sets the value of sorters. 
    */
        static setSorters(sorters: Ext.util.Sorter[]|any[]):void;
    /**
    Updates the sorters collection and triggers sorting of this Sortable. 
    */
        static sort(sorters?: string|Ext.util.Sorter[], direction?: string, insertionPosition?: string):Ext.util.Sorter[];
    /**
    Sorts the collection by a single sorter function 
    */
        static sortBy(sorterFn: Function):void;
    /**
    Sorts this collection by keys. 
    */
        static sortByKey(direction?: string, fn?: Function):void;
    /**
    Collects all of the values of the given property and returns their sum 
    */
        static sum(property: string, root?: string, start?: number, end?: number):number;
    /**
    Suspends firing of the named event(s). 
    */
        static suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        static suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        static un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        static unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        static unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Change the key for an existing item in the collection. 
    */
        static updateKey(oldKey: any, newKey: any):void;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface FieldAncestorConfig {
    /**
    If specified, the properties in this object are used as default config values for each Ext.form.Labelable
instance (e.g. 
    */
        fieldDefaults?: any;
    }
    /**
    A mixin for Ext.container.Container components that are likely to have form fields in their
items subtree. 
    */
    export class FieldAncestor extends Ext.Mixin {
    /**
    Initializes the FieldAncestor's state; this must be called from the initComponent method of any components
importing 
    */
        initFieldAncestor():void;
    /**
    Fired when the error message of any field within the container changes. 
    */
        onFieldErrorChange(field: Ext.form.Labelable, error: string):void;
    /**
    Fired when the validity of any field within the container changes. 
    */
        onFieldValidityChange(field: Ext.form.field.Field, valid: boolean):void;
    }
    interface FieldContainerConfig extends Ext.container.ContainerConfig {
    /**
    If specified, then the component will be displayed with this value as its active error when first rendered. 
    */
        activeError?: string;
    /**
    The template used to format the Array of error messages passed to setActiveErrors into a single HTML
string. 
    */
        activeErrorsTpl?: string|string[]|Ext.XTemplate;
    /**
    An optional string or XTemplate configuration to insert in the field markup
at the end of the input containing element. 
    */
        afterBodyEl?: string|any[]|Ext.XTemplate;
    /**
    An optional string or XTemplate configuration to insert in the field markup
after the label text. 
    */
        afterLabelTextTpl?: string|any[]|Ext.XTemplate;
    /**
    An optional string or XTemplate configuration to insert in the field markup
after the label element. 
    */
        afterLabelTpl?: string|any[]|Ext.XTemplate;
    /**
    An optional string or XTemplate configuration to insert in the field markup
after the subTpl markup. 
    */
        afterSubTpl?: string|any[]|Ext.XTemplate;
    /**
    Whether to adjust the component's body width to make room for 'side'
error messages. 
    */
        autoFitErrors?: boolean;
    /**
    The CSS class to be applied to the body content element. 
    */
        baseBodyCls?: string;
    /**
    An optional string or XTemplate configuration to insert in the field markup
at the beginning of the input containing 
    */
        beforeBodyEl?: string|any[]|Ext.XTemplate;
    /**
    An optional string or XTemplate configuration to insert in the field markup
before the label text. 
    */
        beforeLabelTextTpl?: string|any[]|Ext.XTemplate;
    /**
    An optional string or XTemplate configuration to insert in the field markup
before the label element. 
    */
        beforeLabelTpl?: string|any[]|Ext.XTemplate;
    /**
    An optional string or XTemplate configuration to insert in the field markup
before the subTpl markup. 
    */
        beforeSubTpl?: string|any[]|Ext.XTemplate;
    /**
    If set to true, the field container will automatically combine and display the validation errors from
all the fields 
    */
        combineErrors?: boolean;
    /**
    If set to true, and there is no defined fieldLabel, the field container will automatically
generate its label by comb
    */
        combineLabels?: boolean;
    /**
    The CSS class to be applied to the error message element. 
    */
        errorMsgCls?: string;
    /**
    An extra CSS class to be applied to the body content element in addition to baseBodyCls. 
    */
        fieldBodyCls?: string;
    /**
    If specified, the properties in this object are used as default config values for each Ext.form.Labelable
instance (e.g. 
    */
        fieldDefaults?: any;
    /**
    The label for the field. 
    */
        fieldLabel?: string;
    /**
    A CSS class to be applied to the outermost element to denote that it is participating in the form field layout. 
    */
        formItemCls?: string;
    /**
    When set to true, the label element (fieldLabel and labelSeparator) will be automatically
hidden if the fieldLabel is
    */
        hideEmptyLabel?: boolean;
    /**
    Set to true to completely hide the label element (fieldLabel and labelSeparator). 
    */
        hideLabel?: boolean;
    /**
    If we allow this to mark with the invalidCls it will cascade to all
child fields, let them handle themselves 
    */
        invalidCls?: string;
    /**
    Controls the position and alignment of the fieldLabel. 
    */
        labelAlign?: string;
    /**
    An optional string or XTemplate configuration to insert in the field markup
inside the label element (as attributes). 
    */
        labelAttrTpl?: string|any[]|Ext.XTemplate;
    /**
    The CSS class to be applied to the label element. 
    */
        labelCls?: string;
    /**
    An optional string of one or more additional CSS classes to add to the label element. 
    */
        labelClsExtra?: string;
    /**
    The string to use when joining the labels of individual sub-fields, when combineLabels is
set to true. 
    */
        labelConnector?: string;
    /**
    The amount of space in pixels between the fieldLabel and the field body. 
    */
        labelPad?: number;
    /**
    Character(s) to be inserted at the end of the label text. 
    */
        labelSeparator?: string;
    /**
    A CSS style specification string to apply directly to this field's label.

    */
        labelStyle?: string;
    /**
    The width of the fieldLabel in pixels. 
    */
        labelWidth?: number;
    /**
    The location where the error message text should display. 
    */
        msgTarget?: string;
    /**
    true to disable displaying any error message set on this object. 
    */
        preventMark?: boolean;
    }
    /**
    FieldContainer is a derivation of Container that implements the
Labelable mixin. 
    */
    export class FieldContainer extends Ext.container.Container {
    /**
    The div Element wrapping the component's contents. 
    */
        bodyEl: Ext.dom.Element;
    /**
    The div Element that will contain the component's error message(s). 
    */
        errorEl: Ext.dom.Element;
    /**
    Flag denoting that this object is labelable as a field. 
    */
        isFieldLabelable: boolean;
    /**
    The label Element for this component. 
    */
        labelEl: Ext.dom.Element;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.form.FieldContainerConfig);
    /**
    Gets the active error message for this component, if any. 
    */
        getActiveError():string;
    /**
    Gets an Array of any active error messages currently applied to the field. 
    */
        getActiveErrors():string[];
    /**
    Takes an Array of invalid Ext.form.field.Field objects and builds a combined list of error
messages from them. 
    */
        getCombinedErrors(invalidFields: Ext.form.field.Field[]):string[];
    /**
    Returns the combined field label if combineLabels is set to true and if there is no
set fieldLabel. 
    */
        getFieldLabel():string;
    /**
    Get the input id, if any, for this component. 
    */
        getInputId():string;
    /**
    Generates the arguments for the field decorations rendering template. 
    */
        getLabelableRenderData(data: any):any;
    /**
    Gets the markup to be inserted into the outer template's bodyEl. 
    */
        getSubTplMarkup(fieldData: any):string;
    /**
    Tells whether the field currently has an active error message. 
    */
        hasActiveError():boolean;
    /**
    Checks if the field has a visible label 
    */
        hasVisibleLabel():boolean;
    /**
    Initializes the FieldAncestor's state; this must be called from the initComponent method of any components
importing 
    */
        initFieldAncestor():void;
    /**
    Performs initialization of this mixin. 
    */
        initLabelable():void;
    /**
    Fired when the validity of any field within the container changes. 
    */
        onFieldValidityChange(field: Ext.form.field.Field, valid: boolean):void;
    /**
    Sets the active error message to the given string. 
    */
        setActiveError(msg: string):void;
    /**
    Set the active error message to an Array of error messages. 
    */
        setActiveErrors(errors: string[]):void;
    /**
    Applies a set of default configuration values to this Labelable instance. 
    */
        setFieldDefaults(defaults: any):void;
    /**
    Set the label of this field. 
    */
        setFieldLabel(label: string):void;
    /**
    Returns the trimmed label by slicing off the label separator character. 
    */
        trimLabelSeparator():string;
    /**
    Clears the active error message(s). 
    */
        unsetActiveError():void;
    }
    interface FieldSetConfig extends Ext.container.ContainerConfig {
    /**
    The name to assign to the fieldset's checkbox if checkboxToggle = true
(defaults to '[fieldset id]-checkbox').

    */
        checkboxName?: string;
    /**
    Set to true to render a checkbox into the fieldset frame just in front of the legend to expand/collapse the
fieldset 
    */
        checkboxToggle?: boolean;
    /**
    The ui to use for the fieldset's checkbox. 
    */
        checkboxUI?: string;
    /**
    Set to true to render the fieldset as collapsed by default. 
    */
        collapsed?: boolean;
    /**
    Set to true to make the fieldset collapsible and have the expand/collapse toggle button automatically rendered
into t
    */
        collapsible?: boolean;
    /**
    If specified, the properties in this object are used as default config values for each Ext.form.Labelable
instance (e.g. 
    */
        fieldDefaults?: any;
    /**
    A title to be displayed in the fieldset's legend. 
    */
        title?: string;
    /**
    Set to true will add a listener to the titleCmp property for the click event which will execute the
toggle method. 
    */
        toggleOnTitleClick?: boolean;
    }
    /**
    A container for grouping sets of fields, rendered as a HTML fieldset element. 
    */
    export class FieldSet extends Ext.container.Container {
    /**
    Refers to the Ext.form.field.Checkbox component that is added next to the title in the legend. 
    */
        checkboxCmp: Ext.form.field.Checkbox;
    /**
    The component for the fieldset's legend. 
    */
        legend: Ext.Component;
    /**
    Refers to the Ext.panel.Tool component that is added as the collapse/expand button next to the title in
the legend. 
    */
        toggleCmp: Ext.panel.Tool;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.form.FieldSetConfig);
    /**
    Collapses the fieldset. 
    */
        collapse():Ext.form.FieldSet;
    /**
    Creates the checkbox component. 
    */
        createCheckboxCmp():Ext.Component;
    /**
    Creates the legend title component. 
    */
        createTitleCmp():Ext.Component;
    /**
    Creates the toggle button component. 
    */
        createToggleCmp():Ext.Component;
    /**
    Expands the fieldset. 
    */
        expand():Ext.form.FieldSet;
    /**
    Initializes the FieldAncestor's state; this must be called from the initComponent method of any components
importing 
    */
        initFieldAncestor():void;
    /**
    Fired when the error message of any field within the container changes. 
    */
        onFieldErrorChange(field: Ext.form.Labelable, error: string):void;
    /**
    Fired when the validity of any field within the container changes. 
    */
        onFieldValidityChange(field: Ext.form.field.Field, valid: boolean):void;
    /**
    Sets the title of this fieldset. 
    */
        setTitle(title: string):Ext.form.FieldSet;
    /**
    Toggle the fieldset's collapsed state to the opposite of what it is currently. 
    */
        toggle():void;
    }
    interface LabelConfig extends Ext.ComponentConfig {
    /**
    The id of the input element to which this label will be bound via the standard HTML 'for'
attribute. 
    */
        forId?: string;
    /**
    The plain text to display within the label. 
    */
        text?: string;
    }
    /**
    Produces a standalone &lt;label /&gt; element which can be inserted into a form and be associated with a field
in tha
    */
    export class Label extends Ext.Component {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.form.LabelConfig);
    /**
    Updates the label's innerHTML with the specified string. 
    */
        setText(text: string, encode?: boolean):Ext.form.Label;
    }
    interface LabelableConfig {
    /**
    If specified, then the component will be displayed with this value as its active error when first rendered. 
    */
        activeError?: string;
    /**
    The template used to format the Array of error messages passed to setActiveErrors into a single HTML
string. 
    */
        activeErrorsTpl?: string|string[]|Ext.XTemplate;
    /**
    An optional string or XTemplate configuration to insert in the field markup
at the end of the input containing element. 
    */
        afterBodyEl?: string|any[]|Ext.XTemplate;
    /**
    An optional string or XTemplate configuration to insert in the field markup
after the label text. 
    */
        afterLabelTextTpl?: string|any[]|Ext.XTemplate;
    /**
    An optional string or XTemplate configuration to insert in the field markup
after the label element. 
    */
        afterLabelTpl?: string|any[]|Ext.XTemplate;
    /**
    An optional string or XTemplate configuration to insert in the field markup
after the subTpl markup. 
    */
        afterSubTpl?: string|any[]|Ext.XTemplate;
    /**
    Whether to adjust the component's body width to make room for 'side'
error messages. 
    */
        autoFitErrors?: boolean;
    /**
    The CSS class to be applied to the body content element. 
    */
        baseBodyCls?: string;
    /**
    An optional string or XTemplate configuration to insert in the field markup
at the beginning of the input containing 
    */
        beforeBodyEl?: string|any[]|Ext.XTemplate;
    /**
    An optional string or XTemplate configuration to insert in the field markup
before the label text. 
    */
        beforeLabelTextTpl?: string|any[]|Ext.XTemplate;
    /**
    An optional string or XTemplate configuration to insert in the field markup
before the label element. 
    */
        beforeLabelTpl?: string|any[]|Ext.XTemplate;
    /**
    An optional string or XTemplate configuration to insert in the field markup
before the subTpl markup. 
    */
        beforeSubTpl?: string|any[]|Ext.XTemplate;
    /**
    The CSS class to be applied to the error message element. 
    */
        errorMsgCls?: string;
    /**
    An extra CSS class to be applied to the body content element in addition to baseBodyCls. 
    */
        fieldBodyCls?: string;
    /**
    The label for the field. 
    */
        fieldLabel?: string;
    /**
    A CSS class to be applied to the outermost element to denote that it is participating in the form field layout. 
    */
        formItemCls?: string;
    /**
    When set to true, the label element (fieldLabel and labelSeparator) will be automatically
hidden if the fieldLabel is
    */
        hideEmptyLabel?: boolean;
    /**
    Set to true to completely hide the label element (fieldLabel and labelSeparator). 
    */
        hideLabel?: boolean;
    /**
    The CSS class to use when marking the component invalid. 
    */
        invalidCls?: string;
    /**
    Controls the position and alignment of the fieldLabel. 
    */
        labelAlign?: string;
    /**
    An optional string or XTemplate configuration to insert in the field markup
inside the label element (as attributes). 
    */
        labelAttrTpl?: string|any[]|Ext.XTemplate;
    /**
    The CSS class to be applied to the label element. 
    */
        labelCls?: string;
    /**
    An optional string of one or more additional CSS classes to add to the label element. 
    */
        labelClsExtra?: string;
    /**
    The amount of space in pixels between the fieldLabel and the field body. 
    */
        labelPad?: number;
    /**
    Character(s) to be inserted at the end of the label text. 
    */
        labelSeparator?: string;
    /**
    A CSS style specification string to apply directly to this field's label.

    */
        labelStyle?: string;
    /**
    The width of the fieldLabel in pixels. 
    */
        labelWidth?: number;
    /**
    The location where the error message text should display. 
    */
        msgTarget?: string;
    /**
    true to disable displaying any error message set on this object. 
    */
        preventMark?: boolean;
    }
    /**
    A mixin which allows a component to be configured and decorated with a label and/or error message as is
common for fo
    */
    export class Labelable extends Ext.Mixin {
    /**
    The div Element wrapping the component's contents. 
    */
        bodyEl: Ext.dom.Element;
    /**
    The div Element that will contain the component's error message(s). 
    */
        errorEl: Ext.dom.Element;
    /**
    Flag denoting that this object is labelable as a field. 
    */
        isFieldLabelable: boolean;
    /**
    The label Element for this component. 
    */
        labelEl: Ext.dom.Element;
    /**
    Gets the active error message for this component, if any. 
    */
        getActiveError():string;
    /**
    Gets an Array of any active error messages currently applied to the field. 
    */
        getActiveErrors():string[];
    /**
    Returns the value of childEls. 
    */
        getChildEls():any[];
    /**
    Returns the label for the field. 
    */
        getFieldLabel():string;
    /**
    Get the input id, if any, for this component. 
    */
        getInputId():string;
    /**
    Generates the arguments for the field decorations rendering template. 
    */
        getLabelableRenderData(data: any):any;
    /**
    Gets the markup to be inserted into the outer template's bodyEl. 
    */
        getSubTplMarkup():string;
    /**
    Tells whether the field currently has an active error message. 
    */
        hasActiveError():boolean;
    /**
    Checks if the field has a visible label 
    */
        hasVisibleLabel():boolean;
    /**
    Performs initialization of this mixin. 
    */
        initLabelable():void;
    /**
    Sets the active error message to the given string. 
    */
        setActiveError(msg: string):void;
    /**
    Set the active error message to an Array of error messages. 
    */
        setActiveErrors(errors: string[]):void;
    /**
    Sets the value of childEls. 
    */
        setChildEls(childEls: any[]):void;
    /**
    Applies a set of default configuration values to this Labelable instance. 
    */
        setFieldDefaults(defaults: any):void;
    /**
    Set the label of this field. 
    */
        setFieldLabel(label: string):void;
    /**
    Returns the trimmed label by slicing off the label separator character. 
    */
        trimLabelSeparator():string;
    /**
    Clears the active error message(s). 
    */
        unsetActiveError():void;
    /**
    Destroy the error tip instance. 
    */
        destroyTip():void;
    }
    interface PanelConfig extends Ext.panel.PanelConfig {
    /**
    If specified, load and submit actions will be handled with DirectLoad
and DirectSubmit. 
    */
        api?: any;
    /**
    Parameters to pass with all requests. 
    */
        baseParams?: any;
    /**
    An Ext.data.reader.Reader (e.g. 
    */
        errorReader?: any;
    /**
    If specified, the properties in this object are used as default config values for each Ext.form.Labelable
instance (e.g. 
    */
        fieldDefaults?: any;
    /**
    If set to true, the field values are sent as JSON in the request body. 
    */
        jsonSubmit?: boolean;
    /**
    The request method to use (GET or POST) for form actions if one isn't supplied in the action options.

    */
        method?: string;
    /**
    A list of params to be executed server side. 
    */
        paramOrder?: string|string[];
    /**
    Only used for the api load configuration. 
    */
        paramsAsHash?: boolean;
    /**
    If set to true, sets up an interval task (using the pollInterval) in which the
panel's fields are repeatedly checked 
    */
        pollForChanges?: boolean;
    /**
    Interval in milliseconds at which the form's fields are checked for value changes. 
    */
        pollInterval?: number;
    /**
    An Ext.data.reader.Reader (e.g. 
    */
        reader?: any;
    /**
    If set to true, a standard HTML form submit is used instead of a XHR (Ajax) style form submission. 
    */
        standardSubmit?: boolean;
    /**
    Timeout for form actions in seconds.

    */
        timeout?: number;
    /**
    If set to true, reset() resets to the last loaded or
Ext.form.Basic.setValues() data instead of when the form was fir
    */
        trackResetOnLoad?: boolean;
    /**
    The URL to use for form actions if one isn't supplied in the
doAction options.

    */
        url?: string;
    /**
    By default wait messages are displayed with Ext.MessageBox.wait. 
    */
        waitMsgTarget?: string|HTMLElement|Ext.dom.Element;
    /**
    The default title to show for the waiting message box

    */
        waitTitle?: string;
    }
    /**
    FormPanel provides a standard container for forms. 
    */
    export class Panel extends Ext.panel.Panel {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.form.PanelConfig);
    /**
    Forces each field within the form panel to
check if its value has changed. 
    */
        checkChange():void;
    /**
    Provides access to the Form which this Panel contains. 
    */
        getForm():Ext.form.Basic;
    /**
    Returns the currently loaded Ext.data.Model instance if one was loaded via loadRecord. 
    */
        getRecord():Ext.data.Model;
    /**
    Convenience function for fetching the current value of each field in the form. 
    */
        getValues(asString?: boolean, dirtyOnly?: boolean, includeEmptyText?: boolean, useDataValues?: boolean):any;
    /**
    Convenience function to check if the form has any invalid fields. 
    */
        hasInvalidField():void;
    /**
    Initializes the FieldAncestor's state; this must be called from the initComponent method of any components
importing 
    */
        initFieldAncestor():void;
    /**
    Convenience function to check if the form has any dirty fields. 
    */
        isDirty():boolean;
    /**
    Convenience function to check if the form has all valid fields. 
    */
        isValid():boolean;
    /**
    This is a proxy for the underlying BasicForm's Ext.form.Basic.load call. 
    */
        load(options: any):void;
    /**
    Loads an Ext.data.Model into this form (internally just calls Ext.form.Basic.loadRecord)
See also trackResetOnLoad. 
    */
        loadRecord(record: Ext.data.Model):Ext.form.Basic;
    /**
    Fired when the error message of any field within the container changes. 
    */
        onFieldErrorChange(field: Ext.form.Labelable, error: string):void;
    /**
    Fired when the validity of any field within the container changes. 
    */
        onFieldValidityChange(field: Ext.form.field.Field, valid: boolean):void;
    /**
    Convenience function reset the form. 
    */
        reset(resetRecord?: boolean):Ext.form.Basic;
    /**
    Start an interval task to continuously poll all the fields in the form for changes in their
values. 
    */
        startPolling(interval: number):void;
    /**
    Stop a running interval task that was started by startPolling. 
    */
        stopPolling():void;
    /**
    This is a proxy for the underlying BasicForm's Ext.form.Basic.submit call. 
    */
        submit(options: any):void;
    /**
    Persists the values in this form into the passed Ext.data.Model object in a beginEdit/endEdit block. 
    */
        updateRecord(record?: Ext.data.Model):Ext.form.Basic;
    }
    interface RadioGroupConfig extends Ext.form.CheckboxGroupConfig {
    /**
    DOM tabIndex attribute to set on the
active Focusable child of this container when using the "Roaming tabindex"
techn
    */
        activeChildTabIndex?: number;
    /**
    Enable or disable
navigation with arrow keys for this FocusableContainer. 
    */
        enableFocusableContainer?: boolean;
    /**
    DOM tabIndex attribute to set on
inactive Focusable children of this container when using the "Roaming tabindex"
tech
    */
        inactiveChildTabIndex?: number;
    }
    /**
    A field container which has a specialized layout for arranging
Ext.form.field.Radio controls into columns, and provid
    */
    export class RadioGroup extends Ext.form.CheckboxGroup {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.form.RadioGroupConfig);
    }
    interface RadioManagerConfig {
    }
    /**
    Private utility class for managing all Ext.form.field.Radio fields grouped by name.

    */
    export class RadioManager {
    /**
    This object holds a key for any event that has a listener. 
    */
        static hasListeners: any;
    /**
    true in this class to identify an object as an instantiated MixedCollection, or subclass thereof. 
    */
        static isMixedCollection: boolean;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        static isObservable: boolean;
    /**
    true in this class to identify an object as an instantiated Sortable, or subclass thereof. 
    */
        static isSortable: boolean;
    /**
    Adds an item to the collection. 
    */
        static add(key: any, obj?: any):any;
    /**
    Appends an after-event handler. 
    */
        static addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Adds all elements of an Array or an Object to the collection. 
    */
        static addAll(objs: any):void;
    /**
    Appends a before-event handler. 
    */
        static addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        static addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        static addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Removes all items from the collection. 
    */
        static clear():void;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        static clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        static clearManagedListeners():void;
    /**
    Creates a shallow copy of this collection 
    */
        static clone():Ext.util.MixedCollection;
    /**
    Collects unique values of a particular property in this MixedCollection 
    */
        static collect(property: string, root?: string, allowBlank?: boolean):any[];
    /**
    Returns true if the collection contains the passed Object as an item. 
    */
        static contains(o: any):boolean;
    /**
    Returns true if the collection contains the passed Object as a key. 
    */
        static containsKey(key: string):boolean;
    /**
    Executes the specified function once for every item in the collection. 
    */
        static each(fn: (item: any, index: number, len: number) => any, scope?: any):void;
    /**
    Executes the specified function once for every key in the collection, passing each
key, and its associated item as th
    */
        static eachKey(fn: (key: string, item: any, index: number, len: number) => any, scope?: any):void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        static enableBubble(eventNames: string|string[]):void;
    /**
    Filters the objects in this collection by a set of Filters, or by a single
property/value pair with optional paramete
    */
        static filter(property: Ext.util.Filter[]|string, value: string|RegExp, anyMatch?: boolean, caseSensitive?: boolean):Ext.util.MixedCollection;
    /**
    Filter by a function. 
    */
        static filterBy(fn: (item: any, key: string) => any, scope?: any):Ext.util.MixedCollection;
    /**
    Returns the first item in the collection which elicits a true return value from the passed selection function. 
    */
        static find():void;
    /**
    Returns the first item in the collection which elicits a true return value from the
passed selection function. 
    */
        static findBy(fn: (item: any, key: string) => any, scope?: any):any;
    /**
    Finds the index of the first matching object in this collection by a specific property/value. 
    */
        static findIndex(property: string, value: string|RegExp, start?: number, anyMatch?: boolean, caseSensitive?: boolean):number;
    /**
    Find the index of the first matching object in this collection by a function. 
    */
        static findIndexBy(fn: (item: any, key: string) => any, scope?: any, start?: number):number;
    /**
    Calculates the insertion index of the new item based upon the comparison function passed, or the current sort order. 
    */
        static findInsertionIndex(newItem: any, sorterFn?: Function):number;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        static fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        static fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        static fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Returns the first item in the collection. 
    */
        static first():any;
    /**
    Returns a comparator function which compares two items and returns -1, 0, or 1 depending
on the currently defined set
    */
        static generateComparator():void;
    /**
    Returns the item associated with the passed key OR index. 
    */
        static get(key: string|number):any;
    /**
    Returns the item at the specified index. 
    */
        static getAt(index: number):any;
    /**
    Returns the item associated with the passed key. 
    */
        static getByKey(key: string|number):any;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the number of items in the collection. 
    */
        static getCount():number;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    A function which will be called, passing a newly added object
when the object is added without a separate id. 
    */
        static getKey(item: any):any;
    /**
    Returns a range of items in this collection 
    */
        static getRange(startIndex?: number, endIndex?: number):any[];
    /**
    Returns the value of sorters. 
    */
        static getSorters():Ext.util.Sorter[]|any[];
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        static hasListener(eventName: string):boolean;
    /**
    Returns index within the collection of the passed Object. 
    */
        static indexOf(o: any):number;
    /**
    Returns index within the collection of the passed key. 
    */
        static indexOfKey(key: string):number;
    /**
    Inserts an item at the specified index in the collection. 
    */
        static insert(index: number, key: any, o?: any):any;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        static isSuspended(event?: string):boolean;
    /**
    Returns the last item in the collection. 
    */
        static last():any;
    /**
    Shorthand for addManagedListener. 
    */
        static mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        static mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        static on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        static onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        static onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        static relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Remove an item from the collection. 
    */
        static remove(o: any):any;
    /**
    Removes a before-event handler. 
    */
        static removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Remove all items in the collection. 
    */
        static removeAll(items?: any[]):Ext.util.MixedCollection;
    /**
    Remove an item from a specified index in the collection. 
    */
        static removeAt(index: number):any;
    /**
    Removes an item associated with the passed key fom the collection. 
    */
        static removeAtKey(key: string):any;
    /**
    Removes a before-event handler. 
    */
        static removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        static removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        static removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Remove a range of items starting at a specified index in the collection. 
    */
        static removeRange(index: number, removeCount?: number):any;
    /**
    Reorders each of the items based on a mapping from old index to new index. 
    */
        static reorder(mapping: any):void;
    /**
    Replaces an item in the collection. 
    */
        static replace(key: string, o: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        static resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        static resumeEvents(discardQueue?: boolean):void;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    An alias for addListener. 
    */
        static setListeners(listeners: any):void;
    /**
    Sets the value of sorters. 
    */
        static setSorters(sorters: Ext.util.Sorter[]|any[]):void;
    /**
    Updates the sorters collection and triggers sorting of this Sortable. 
    */
        static sort(sorters?: string|Ext.util.Sorter[], direction?: string, insertionPosition?: string):Ext.util.Sorter[];
    /**
    Sorts the collection by a single sorter function 
    */
        static sortBy(sorterFn: Function):void;
    /**
    Sorts this collection by keys. 
    */
        static sortByKey(direction?: string, fn?: Function):void;
    /**
    Collects all of the values of the given property and returns their sum 
    */
        static sum(property: string, root?: string, start?: number, end?: number):number;
    /**
    Suspends firing of the named event(s). 
    */
        static suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        static suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        static un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        static unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        static unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Change the key for an existing item in the collection. 
    */
        static updateKey(oldKey: any, newKey: any):void;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
}
declare module Ext.form.action {
    interface ActionConfig {
    /**
    The function to call when a failure packet was received, or when an error
occurred in the Ajax communication. 
    */
        failure?: Function|string;
    /**
    The BasicForm instance that is invoking this Action. 
    */
        form?: Ext.form.Basic;
    /**
    Extra headers to be sent in the AJAX request for submit and load actions. 
    */
        headers?: any;
    /**
    The HTTP method to use to access the requested URL. 
    */
        method?: string;
    /**
    Extra parameter values to pass. 
    */
        params?: any;
    /**
    When set to true, causes the Form to be reset on Action success. 
    */
        reset?: boolean;
    /**
    The scope in which to call the configured success and failure callback functions
(the this reference for the callback
    */
        scope?: any;
    /**
    If set to true, the emptyText value will be sent with the form when it is submitted. 
    */
        submitEmptyText?: boolean;
    /**
    The function to call when a valid success return packet is received. 
    */
        success?: Function|string;
    /**
    The number of seconds to wait for a server response before failing with the failureType as
CONNECT_FAILURE. 
    */
        timeout?: number;
    /**
    The URL that the Action is to invoke. 
    */
        url?: string;
    /**
    The message to be displayed by a call to Ext.window.MessageBox.wait during the time the action is being
processed.

    */
        waitMsg?: string;
    /**
    The title to be displayed by a call to Ext.window.MessageBox.wait during the time the action is being
processed.

    */
        waitTitle?: string;
    }
    /**
    The subclasses of this class provide actions to perform upon Forms. 
    */
    export class Action extends Ext.Base {
    /**
    The type of failure detected will be one of these:
CLIENT_INVALID, SERVER_INVALID, CONNECT_FAILURE, or LOAD_FAILURE. 
    */
        failureType: string;
    /**
    The raw XMLHttpRequest object used to perform the action.

    */
        response: any;
    /**
    The decoded response object containing a boolean success property and other, action-specific properties.

    */
        result: any;
    /**
    The type of action this Action instance performs. 
    */
        type: string;
    /**
    Failure type returned when client side validation of the Form fails thus aborting a submit action. 
    */
        CLIENT_INVALID: string;
    /**
    Failure type returned when a communication error happens when attempting to send a request to the remote
server. 
    */
        CONNECT_FAILURE: string;
    /**
    Failure type returned when the response's success property is set to false, or no field values are returned
in the re
    */
        LOAD_FAILURE: string;
    /**
    Failure type returned when server side processing fails and the result's success property is set to
false. 
    */
        SERVER_INVALID: string;
    /**
    Creates new Action. 
    */
        constructor(config?: Ext.form.action.ActionConfig);
    /**
    Invokes this action using the current configuration. 
    */
        run():void;
    }
    /**
    A mixin that contains methods specific to Ext.Direct actions shared
by DirectLoad and DirectSubmit.

    */
    export class DirectAction extends Ext.Mixin {
    }
    interface DirectLoadConfig extends Ext.form.action.LoadConfig {
    }
    /**
    Provides Ext.direct.Manager support for loading form data. 
    */
    export class DirectLoad extends Ext.form.action.Load {
    /**
    Creates new Action. 
    */
        constructor(config?: Ext.form.action.DirectLoadConfig);
    }
    interface DirectSubmitConfig extends Ext.form.action.SubmitConfig {
    }
    /**
    Provides Ext.direct support for submitting form data. 
    */
    export class DirectSubmit extends Ext.form.action.Submit {
    /**
    Creates new Action. 
    */
        constructor(config?: Ext.form.action.DirectSubmitConfig);
    }
    interface LoadConfig extends Ext.form.action.ActionConfig {
    }
    /**
    A class which handles loading of data from a server into the Fields of an Ext.form.Basic. 
    */
    export class Load extends Ext.form.action.Action {
    /**
    Creates new Action. 
    */
        constructor(config?: Ext.form.action.LoadConfig);
    }
    interface StandardSubmitConfig extends Ext.form.action.SubmitConfig {
    /**
    Optional target attribute to be used for the form when submitting. 
    */
        target?: string;
    }
    /**
    A class which handles submission of data from Forms using a standard &lt;form&gt; element submit. 
    */
    export class StandardSubmit extends Ext.form.action.Submit {
    /**
    Creates new Action. 
    */
        constructor(config?: Ext.form.action.StandardSubmitConfig);
    }
    interface SubmitConfig extends Ext.form.action.ActionConfig {
    /**
    Determines whether a Form's fields are validated in a final call to isValid prior
to submission. 
    */
        clientValidation?: boolean;
    }
    /**
    A class which handles submission of data from Forms and processes the returned response. 
    */
    export class Submit extends Ext.form.action.Action {
    /**
    Creates new Action. 
    */
        constructor(config?: Ext.form.action.SubmitConfig);
    }
}
declare module Ext.form.field {
    interface BaseConfig extends Ext.ComponentConfig {
    /**
    If specified, then the component will be displayed with this value as its active error when first rendered. 
    */
        activeError?: string;
    /**
    The template used to format the Array of error messages passed to setActiveErrors into a single HTML
string. 
    */
        activeErrorsTpl?: string|string[]|Ext.XTemplate;
    /**
    An optional string or XTemplate configuration to insert in the field markup
at the end of the input containing element. 
    */
        afterBodyEl?: string|any[]|Ext.XTemplate;
    /**
    An optional string or XTemplate configuration to insert in the field markup
after the label text. 
    */
        afterLabelTextTpl?: string|any[]|Ext.XTemplate;
    /**
    An optional string or XTemplate configuration to insert in the field markup
after the label element. 
    */
        afterLabelTpl?: string|any[]|Ext.XTemplate;
    /**
    An optional string or XTemplate configuration to insert in the field markup
after the subTpl markup. 
    */
        afterSubTpl?: string|any[]|Ext.XTemplate;
    /**
    Whether to adjust the component's body width to make room for 'side'
error messages. 
    */
        autoFitErrors?: boolean;
    /**
    The CSS class to be applied to the body content element. 
    */
        baseBodyCls?: string;
    /**
    An optional string or XTemplate configuration to insert in the field markup
at the beginning of the input containing 
    */
        beforeBodyEl?: string|any[]|Ext.XTemplate;
    /**
    An optional string or XTemplate configuration to insert in the field markup
before the label text. 
    */
        beforeLabelTextTpl?: string|any[]|Ext.XTemplate;
    /**
    An optional string or XTemplate configuration to insert in the field markup
before the label element. 
    */
        beforeLabelTpl?: string|any[]|Ext.XTemplate;
    /**
    An optional string or XTemplate configuration to insert in the field markup
before the subTpl markup. 
    */
        beforeSubTpl?: string|any[]|Ext.XTemplate;
    /**
    Defines a timeout in milliseconds for buffering checkChangeEvents that fire in rapid succession. 
    */
        checkChangeBuffer?: number;
    /**
    A list of event names that will be listened for on the field's input element, which will cause
the field's value to b
    */
        checkChangeEvents?: string[];
    /**
    The CSS class to use when the field value is dirty. 
    */
        dirtyCls?: string;
    /**
    The CSS class to be applied to the error message element. 
    */
        errorMsgCls?: string;
    /**
    An extra CSS class to be applied to the body content element in addition to baseBodyCls. 
    */
        fieldBodyCls?: string;
    /**
    The default CSS class for the field input 
    */
        fieldCls?: string;
    /**
    The label for the field. 
    */
        fieldLabel?: string;
    /**
    Optional CSS style(s) to be applied to the field input element. 
    */
        fieldStyle?: string;
    /**
    A CSS class to be applied to the outermost element to denote that it is participating in the form field layout. 
    */
        formItemCls?: string;
    /**
    When set to true, the label element (fieldLabel and labelSeparator) will be automatically
hidden if the fieldLabel is
    */
        hideEmptyLabel?: boolean;
    /**
    Set to true to completely hide the label element (fieldLabel and labelSeparator). 
    */
        hideLabel?: boolean;
    /**
    An optional string or XTemplate configuration to insert in the field markup
inside the input element (as attributes). 
    */
        inputAttrTpl?: string|any[]|Ext.XTemplate;
    /**
    The id that will be given to the generated input DOM element. 
    */
        inputId?: string;
    /**
    The type attribute for input fields -- e.g. 
    */
        inputType?: string;
    /**
    The CSS class to use when marking the component invalid. 
    */
        invalidCls?: string;
    /**
    The error text to use when marking a field invalid and no message is provided 
    */
        invalidText?: string;
    /**
    Controls the position and alignment of the fieldLabel. 
    */
        labelAlign?: string;
    /**
    An optional string or XTemplate configuration to insert in the field markup
inside the label element (as attributes). 
    */
        labelAttrTpl?: string|any[]|Ext.XTemplate;
    /**
    The CSS class to be applied to the label element. 
    */
        labelCls?: string;
    /**
    An optional string of one or more additional CSS classes to add to the label element. 
    */
        labelClsExtra?: string;
    /**
    The amount of space in pixels between the fieldLabel and the field body. 
    */
        labelPad?: number;
    /**
    Character(s) to be inserted at the end of the label text. 
    */
        labelSeparator?: string;
    /**
    A CSS style specification string to apply directly to this field's label.

    */
        labelStyle?: string;
    /**
    The width of the fieldLabel in pixels. 
    */
        labelWidth?: number;
    /**
    The location where the error message text should display. 
    */
        msgTarget?: string;
    /**
    The name of the field. 
    */
        name?: string;
    /**
    true to disable displaying any error message set on this object. 
    */
        preventMark?: boolean;
    /**
    true to mark the field as readOnly in HTML. 
    */
        readOnly?: boolean;
    /**
    The CSS class applied to the component's main element when it is readOnly. 
    */
        readOnlyCls?: string;
    /**
    Setting this to false will prevent the field from being submitted even when it is
not disabled. 
    */
        submitValue?: boolean;
    /**
    Whether the field should validate when it loses focus. 
    */
        validateOnBlur?: boolean;
    /**
    Specifies whether this field should be validated immediately whenever a change in its value is detected. 
    */
        validateOnChange?: boolean;
    /**
    This property, when a String, contributes its value to the error state of this
instance as reported by getErrors.

    */
        validation?: boolean|string;
    /**
    A value to initialize this field with.

    */
        value?: any;
    /**
    The event name(s) to use to publish the value
Ext.form.field.Base.bind for this field. 
    */
        valuePublishEvent?: string[]|string;
    }
    /**
    Base class for form fields that provides default event handling, rendering, and other common functionality
needed by 
    */
    export class Base extends Ext.Component {
    /**
    The div Element wrapping the component's contents. 
    */
        bodyEl: Ext.dom.Element;
    /**
    The div Element that will contain the component's error message(s). 
    */
        errorEl: Ext.dom.Element;
    /**
    The input Element for this Field. 
    */
        inputEl: Ext.dom.Element;
    /**
    Flag denoting that this object is labelable as a field. 
    */
        isFieldLabelable: boolean;
    /**
    Flag denoting that this component is a Field. 
    */
        isFormField: boolean;
    /**
    The label Element for this component. 
    */
        labelEl: Ext.dom.Element;
    /**
    The original value of the field as configured in the value configuration, or as loaded by the last
form load operatio
    */
        originalValue: any;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.form.field.BaseConfig);
    /**
    A utility for grouping a set of modifications which may trigger value changes into a single transaction, to
prevent e
    */
        batchChanges(fn: Function):void;
    /**
    Template method before a field is reset. 
    */
        beforeReset():void;
    /**
    Checks whether the value of the field has changed since the last time it was checked. 
    */
        checkChange():void;
    /**
    Checks the isDirty state of the field and if it has changed since the last time it was checked,
fires the dirtychange
    */
        checkDirty():void;
    /**
    Cleans up values initialized by this Field mixin on the current instance. 
    */
        cleanupField():void;
    /**
    Clear any invalid styles/messages for this field. 
    */
        clearInvalid():void;
    /**
    Called when focus leaves this input field. 
    */
        completeEdit():void;
    /**
    Only relevant if the instance's isFileUpload method returns true. 
    */
        extractFileInput():HTMLElement;
    /**
    Gets the active error message for this component, if any. 
    */
        getActiveError():string;
    /**
    Gets an Array of any active error messages currently applied to the field. 
    */
        getActiveErrors():string[];
    /**
    Runs this field's validators and returns an array of error messages for any validation failures. 
    */
        getErrors(value: any):string[];
    /**
    Returns the label for the field. 
    */
        getFieldLabel():string;
    /**
    Returns the input id for this field. 
    */
        getInputId():void;
    /**
    Generates the arguments for the field decorations rendering template. 
    */
        getLabelableRenderData(data: any):any;
    /**
    Returns the value(s) that should be saved to the Ext.data.Model instance for this field, when Ext.form.Basic.updateRe
    */
        getModelData(includeEmptyText: any, isSubmitting: any):any;
    /**
    Returns the raw value of the field, without performing any normalization, conversion, or validation. 
    */
        getRawValue():string;
    /**
    Creates and returns the data object to be used when rendering the fieldSubTpl. 
    */
        getSubTplData(fieldData: any):any;
    /**
    Gets the markup to be inserted into the outer template's bodyEl. 
    */
        getSubTplMarkup(fieldData: any):void;
    /**
    private override to use getSubmitValue() as a convenience 
    */
        getSubmitData():any;
    /**
    Returns the value that would be included in a standard form submit for this field. 
    */
        getSubmitValue():string;
    /**
    Returns the value of validation. 
    */
        getValidation():boolean|string;
    /**
    Returns the current data value of the field. 
    */
        getValue():any;
    /**
    Tells whether the field currently has an active error message. 
    */
        hasActiveError():boolean;
    /**
    Checks if the field has a visible label 
    */
        hasVisibleLabel():boolean;
    /**
    Initializes this Field mixin on the current instance. 
    */
        initField():void;
    /**
    Performs initialization of this mixin. 
    */
        initLabelable():void;
    /**
    Initializes the field's value based on the initial config. 
    */
        initValue():void;
    /**
    Returns true if the value of this Field has been changed from its originalValue. 
    */
        isDirty():boolean;
    /**
    Returns whether two field values are logically equal. 
    */
        isEqual(value1: any, value2: any):boolean;
    /**
    Returns whether this Field is a file upload field; if it returns true, forms will use special techniques for
submitti
    */
        isFileUpload():boolean;
    /**
    Returns whether or not the field value is currently valid by validating the
processed raw value of the field. 
    */
        isValid():boolean;
    /**
    Display one or more error messages associated with this field, using
msgTarget to determine how to display the
messag
    */
        markInvalid(errors: string|string[]):void;
    /**
    Performs any necessary manipulation of a raw field value to prepare it for conversion and/or
validation, for instance
    */
        processRawValue(value: any):any;
    /**
    Converts a raw input field value into a mixed-type value that is suitable for this particular field type. 
    */
        rawToValue(rawValue: any):any;
    /**
    Resets the current field value to the originally loaded value and clears any validation messages. 
    */
        reset():void;
    /**
    Resets the field's originalValue property so it matches the current value. 
    */
        resetOriginalValue():void;
    /**
    Sets the active error message to the given string. 
    */
        setActiveError(msg: string):void;
    /**
    Set the active error message to an Array of error messages. 
    */
        setActiveErrors(errors: string[]):void;
    /**
    Applies a set of default configuration values to this Labelable instance. 
    */
        setFieldDefaults(defaults: any):void;
    /**
    Set the label of this field. 
    */
        setFieldLabel(label: string):void;
    /**
    Set the CSS style of the field input element. 
    */
        setFieldStyle(style: any):void;
    /**
    Sets the field's raw value directly, bypassing value conversion, change detection, and
validation. 
    */
        setRawValue(value: any):any;
    /**
    Sets the read only state of this field. 
    */
        setReadOnly(readOnly: boolean):void;
    /**
    Sets the value of validation. 
    */
        setValidation(validation: boolean|string):void;
    /**
    Sets a data value into the field and runs the change detection and validation. 
    */
        setValue(value: any):Ext.form.field.Field;
    /**
    Transform the raw value before it is set 
    */
        transformRawValue(value: any):any;
    /**
    Returns the trimmed label by slicing off the label separator character. 
    */
        trimLabelSeparator():string;
    /**
    Clears the active error message(s). 
    */
        unsetActiveError():void;
    /**
    Returns whether or not the field value is currently valid by validating the field's current
value, and fires the vali
    */
        validate():boolean;
    /**
    Uses getErrors to build an array of validation errors. 
    */
        validateValue(value: any):boolean;
    /**
    Converts a mixed-type value to a raw representation suitable for displaying in the field. 
    */
        valueToRaw(value: any):any;
    }
    interface CheckboxConfig extends Ext.form.field.BaseConfig {
    /**
    An optional string or XTemplate configuration to insert in the field markup
after the box label text. 
    */
        afterBoxLabelTextTpl?: string|any[]|Ext.XTemplate;
    /**
    An optional string or XTemplate configuration to insert in the field markup
after the box label element. 
    */
        afterBoxLabelTpl?: string|any[]|Ext.XTemplate;
    /**
    An optional string or XTemplate configuration to insert in the field markup
before the box label text. 
    */
        beforeBoxLabelTextTpl?: string|any[]|Ext.XTemplate;
    /**
    An optional string or XTemplate configuration to insert in the field markup
before the box label element. 
    */
        beforeBoxLabelTpl?: string|any[]|Ext.XTemplate;
    /**
    An optional text label that will appear next to the checkbox. 
    */
        boxLabel?: string;
    /**
    The position relative to the checkbox where the boxLabel should appear. 
    */
        boxLabelAlign?: string;
    /**
    An optional string or XTemplate configuration to insert in the field markup
inside the box label element (as attribut
    */
        boxLabelAttrTpl?: string|any[]|Ext.XTemplate;
    /**
    The CSS class to be applied to the boxLabel element 
    */
        boxLabelCls?: string;
    /**
    true if the checkbox should render initially checked 
    */
        checked?: boolean;
    /**
    The CSS class(es) added to the component's main element when it is in the checked state. 
    */
        checkedCls?: string;
    /**
    A function called when the checked value changes (can be used instead of handling the change event). 
    */
        handler?: Function|string;
    /**
    The value that should go into the generated input element's value attribute and should be used as the parameter
value
    */
        inputValue?: string;
    /**
    An object to use as the scope ('this' reference) of the handler function. 
    */
        scope?: any;
    /**
    If configured, this will be submitted as the checkbox's value during form submit if the checkbox is unchecked. 
    */
        uncheckedValue?: string;
    }
    /**
    Single checkbox field. 
    */
    export class Checkbox extends Ext.form.field.Base {
    /**
    A reference to the label element created for the boxLabel. 
    */
        boxLabelEl: Ext.dom.Element;
    /**
    true in this class to identify an object as an instantiated Checkbox, or subclass thereof. 
    */
        isCheckbox: boolean;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.form.field.CheckboxConfig);
    /**
    Sets the boxLabel for this checkbox. 
    */
        setBoxLabel(boxLabel: string):void;
    }
    interface ComboBoxConfig extends Ext.form.field.PickerConfig {
    /**
    The text query to send to the server to return all records for the list with no filtering 
    */
        allQuery?: string;
    /**
    Configure as true to allow matching of the typed characters at any position in the valueField's value. 
    */
        anyMatch?: boolean;
    /**
    This option controls whether to initially load the store when a value is set so that
the display value can be determi
    */
        autoLoadOnValue?: boolean;
    /**
    true to automatically highlight the first result gathered by the data store in the dropdown list when it is
opened. 
    */
        autoSelect?: boolean;
    /**
    Configure as true to make the filtering match with exact case matching 
    */
        caseSensitive?: boolean;
    /**
    When queryMode is 'local' only

As text is entered, the underlying store is filtered to match the value. 
    */
        clearFilterOnBlur?: boolean;
    /**
    Has no effect if multiSelect is false

Configure as true to automatically collapse the pick list after a selection is
    */
        collapseOnSelect?: boolean;
    /**
    Set of options that will be used as defaults for the user-configured listConfig object. 
    */
        defaultListConfig?: any;
    /**
    The character(s) used to separate the display values of multiple selected items when
multiSelect = true. 
    */
        delimiter?: string;
    /**
    The underlying data field name to bind to this ComboBox. 
    */
        displayField?: string;
    /**
    The template to be used to display selected records inside the text field. 
    */
        displayTpl?: string|string[]|Ext.XTemplate;
    /**
    When queryMode is 'local' only

Set to true to have the ComboBox use the typed value as a RegExp source to filter the
    */
        enableRegEx?: boolean;
    /**
    true to restrict the selected value to one of the values in the list, false to allow the user to set
arbitrary text i
    */
        forceSelection?: boolean;
    /**
    false to not allow the component to resize itself when its data changes
(and its grow property is true) 
    */
        growToLongestValue?: boolean;
    /**
    The name of an underlying hidden field which will be synchronized with the underlying value of the combo. 
    */
        hiddenName?: string;
    /**
    An optional set of configuration properties that will be passed to the Ext.view.BoundList's constructor. 
    */
        listConfig?: any;
    /**
    The minimum number of characters the user must type before autocomplete and typeAhead activate. 
    */
        minChars?: number;
    /**
    If set to true, allows the combo field to hold more than one value at a time, and allows selecting multiple
items fro
    */
        multiSelect?: boolean;
    /**
    If greater than 0, a Ext.toolbar.Paging is displayed in the footer of the dropdown list and the
filter queries will e
    */
        pageSize?: number;
    /**
    Has no effect if multiSelect is false

Configure as false to automatically collapse the pick list after a selection i
    */
        pinList?: boolean;
    /**
    When true, this prevents the combo from re-querying (either locally or remotely) when the current query
is the same a
    */
        queryCaching?: boolean;
    /**
    The length of time in milliseconds to delay between the start of typing and sending the query to filter the
dropdown 
    */
        queryDelay?: number;
    /**
    The mode in which the ComboBox uses the configured Store. 
    */
        queryMode?: string;
    /**
    Name of the parameter used by the Store to pass the typed string when the ComboBox is configured with
queryMode: 'rem
    */
        queryParam?: string;
    /**
    Whether the Tab key should select the currently highlighted item. 
    */
        selectOnTab?: boolean;
    /**
    The selected model. 
    */
        selection?: Ext.data.Model;
    /**
    The data source to which the combo / tagfield is bound. 
    */
        store?: any;
    /**
    The id, DOM node or Ext.dom.Element of an existing HTML &lt;select&gt; element to convert into a ComboBox. 
    */
        transform?: string|HTMLElement|Ext.dom.Element;
    /**
    true to automatically render this combo box in place of the select element that is being
transformed. 
    */
        transformInPlace?: boolean;
    /**
    The action to execute when the trigger is clicked. 
    */
        triggerAction?: string;
    /**
    true to populate and autoselect the remainder of the text being typed after a configurable delay
(typeAheadDelay) if 
    */
        typeAhead?: boolean;
    /**
    The length of time in milliseconds to wait until the typeahead text is displayed if typeAhead = true 
    */
        typeAheadDelay?: number;
    /**
    The underlying data value name to bind to this ComboBox. 
    */
        valueField?: string;
    /**
    When using a name/value combo, if the value passed to setValue is not found in the store, valueNotFoundText will
be d
    */
        valueNotFoundText?: string;
    }
    /**
    A combobox control with support for autocomplete, remote loading, and many other features. 
    */
    export class ComboBox extends Ext.form.field.Picker {
    /**
    The value of the match string used to filter the store. 
    */
        lastQuery: string;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.form.field.ComboBoxConfig);
    /**
    Adds a value or values to the current value of the field 
    */
        addValue(value: any):void;
    /**
    A method called when the filtering caused by the doQuery call is complete and the store has been
either filtered loca
    */
        afterQuery(queryPlan: any):void;
    /**
    A method which may modify aspects of how the store is to be filtered (if queryMode is "local")
of loaded (if queryMod
    */
        beforeQuery(queryPlan: any):void;
    /**
    Binds a store to this instance. 
    */
        bindStore(store?: Ext.data.AbstractStore|string, preventFilter?: boolean):void;
    /**
    Binds listeners for this component to the store. 
    */
        bindStoreListeners(store: Ext.data.AbstractStore):void;
    /**
    Clears any value currently set in the ComboBox. 
    */
        clearValue():void;
    /**
    Executes a query to filter the dropdown list. 
    */
        doQuery(queryString: string, forceAll?: boolean, rawQuery?: boolean):boolean;
    /**
    Finds the record by searching for a specific field/value combination. 
    */
        findRecord(field: string, value: any):Ext.data.Model;
    /**
    Finds the record by searching values in the displayField. 
    */
        findRecordByDisplay(value: any):Ext.data.Model;
    /**
    Finds the record by searching values in the valueField. 
    */
        findRecordByValue(value: any):Ext.data.Model;
    /**
    Returns the value of delimiter. 
    */
        getDelimiter():string;
    /**
    Returns the value of displayField. 
    */
        getDisplayField():string;
    /**
    Returns the value of displayTpl. 
    */
        getDisplayTpl():string|string[]|Ext.XTemplate;
    /**
    Returns the Ext.util.FilterCollection. 
    */
        getFilters(autoCreate?: any):Ext.util.FilterCollection;
    /**
    Gets data for each record to be used for constructing the display value with
the displayTpl. 
    */
        getRecordDisplayData(record: Ext.data.Model):any;
    /**
    Returns the combobox's selection. 
    */
        getSelection():Ext.data.Model;
    /**
    Gets the current store instance. 
    */
        getStore():Ext.data.AbstractStore;
    /**
    Gets the listeners to bind to a new store. 
    */
        getStoreListeners(store: any):any;
    /**
    Returns the value of valueNotFoundText. 
    */
        getValueNotFoundText():string;
    /**
    Template method, it is called when a new store is bound
to the current instance. 
    */
        onBindStore(store: any, initial: any):void;
    /**
    Template method, it is called when an existing store is unbound
from the current instance. 
    */
        onUnbindStore():void;
    /**
    Selects an item by a Model, or by a key value. 
    */
        select(r: any):void;
    /**
    Sets the value of delimiter. 
    */
        setDelimiter(delimiter: string):void;
    /**
    Sets the value of displayField. 
    */
        setDisplayField(displayField: string):void;
    /**
    Sets the value of displayTpl. 
    */
        setDisplayTpl(displayTpl: string|string[]|Ext.XTemplate):void;
    /**
    Sets the value of filters. 
    */
        setFilters(filters: any):void;
    /**
    Sets the value of selection. 
    */
        setSelection(selection: Ext.data.Model):void;
    /**
    Sets the store to the specified store. 
    */
        setStore(store: any):void;
    /**
    Sets the value of valueNotFoundText. 
    */
        setValueNotFoundText(valueNotFoundText: string):void;
    /**
    Unbinds listeners from this component to the store. 
    */
        unbindStoreListeners(store: Ext.data.AbstractStore):void;
    }
    interface DateConfig extends Ext.form.field.PickerConfig {
    /**
    Multiple date formats separated by "|" to try when parsing a user input value and it does not match the defined
format. 
    */
        altFormats?: string;
    /**
    An array of "dates" to disable, as strings. 
    */
        disabledDates?: string[];
    /**
    The tooltip text to display when the date falls on a disabled date. 
    */
        disabledDatesText?: string;
    /**
    An array of days to disable, 0 based. 
    */
        disabledDays?: number[];
    /**
    The tooltip to display when the date falls on a disabled day. 
    */
        disabledDaysText?: string;
    /**
    The default date format string which can be overriden for localization support. 
    */
        format?: string;
    /**
    The error text to display when the date in the cell is after maxValue. 
    */
        maxText?: string;
    /**
    The maximum allowed date. 
    */
        maxValue?: Date|string;
    /**
    The error text to display when the date in the cell is before minValue. 
    */
        minText?: string;
    /**
    The minimum allowed date. 
    */
        minValue?: Date|string;
    /**
    false to hide the footer area of the Date picker containing the Today button and disable the keyboard handler for
spa
    */
        showToday?: boolean;
    /**
    Day index at which the week should begin, 0-based. 
    */
        startDay?: number;
    /**
    The date format string which will be submitted to the server. 
    */
        submitFormat?: string;
    /**
    True to enforce strict date parsing to prevent the default Javascript "date rollover". 
    */
        useStrict?: boolean;
    }
    /**
    Provides a date input field with a date picker dropdown and automatic date
validation. 
    */
    export class Date extends Ext.form.field.Picker {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.form.field.DateConfig);
    /**
    Attempts to parse a given string value using a given date format. 
    */
        safeParse(value: string, format: string):Date;
    /**
    Replaces any existing disabled dates with new values and refreshes the Date picker. 
    */
        setDisabledDates(disabledDates: string[]):void;
    /**
    Replaces any existing disabled days (by index, 0-6) with new values and refreshes the Date picker. 
    */
        setDisabledDays(disabledDays: number[]):void;
    /**
    Replaces any existing maxValue with the new value and refreshes the Date picker. 
    */
        setMaxValue(value: Date):void;
    /**
    Replaces any existing minValue with the new value and refreshes the Date picker. 
    */
        setMinValue(value: Date):void;
    }
    interface DisplayConfig extends Ext.form.field.BaseConfig {
    /**
    True to escape HTML in text when rendering it. 
    */
        htmlEncode?: boolean;
    /**
    A function to transform the raw value for display in the field. 
    */
        renderer?: Function;
    /**
    The scope to execute the renderer function. 
    */
        scope?: any;
    }
    /**
    A display-only text field which is not validated and not submitted. 
    */
    export class Display extends Ext.form.field.Base {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.form.field.DisplayConfig);
    }
    interface FieldConfig {
    /**
    True to disable the field. 
    */
        disabled?: boolean;
    /**
    The name of the field. 
    */
        name?: string;
    /**
    Setting this to false will prevent the field from being submitted even when it is
not disabled. 
    */
        submitValue?: boolean;
    /**
    Specifies whether this field should be validated immediately whenever a change in its value is detected. 
    */
        validateOnChange?: boolean;
    /**
    This property, when a String, contributes its value to the error state of this
instance as reported by getErrors.

    */
        validation?: boolean|string;
    /**
    A value to initialize this field with.

    */
        value?: any;
    /**
    The event name(s) to use to publish the value
Ext.form.field.Base.bind for this field. 
    */
        valuePublishEvent?: string[]|string;
    }
    /**
    This mixin provides a common interface for the logical behavior and state of form fields, including:


Getter and set
    */
    export class Field extends Ext.Base {
    /**
    Flag denoting that this component is a Field. 
    */
        isFormField: boolean;
    /**
    The original value of the field as configured in the value configuration, or as loaded by the last
form load operatio
    */
        originalValue: any;
    /**
    A utility for grouping a set of modifications which may trigger value changes into a single transaction, to
prevent e
    */
        batchChanges(fn: Function):void;
    /**
    Template method before a field is reset. 
    */
        beforeReset():void;
    /**
    Checks whether the value of the field has changed since the last time it was checked. 
    */
        checkChange():void;
    /**
    Checks the isDirty state of the field and if it has changed since the last time it was checked,
fires the dirtychange
    */
        checkDirty():void;
    /**
    Cleans up values initialized by this Field mixin on the current instance. 
    */
        cleanupField():void;
    /**
    Clear any invalid styles/messages for this field. 
    */
        clearInvalid():void;
    /**
    Only relevant if the instance's isFileUpload method returns true. 
    */
        extractFileInput():HTMLElement;
    /**
    Runs this field's validators and returns an array of error messages for any validation failures. 
    */
        getErrors(value: any):string[];
    /**
    Returns the value(s) that should be saved to the Ext.data.Model instance for this field, when Ext.form.Basic.updateRe
    */
        getModelData(includeEmptyText: any, isSubmitting: any):any;
    /**
    Returns the parameter(s) that would be included in a standard form submit for this field. 
    */
        getSubmitData():any;
    /**
    Returns the value of validation. 
    */
        getValidation():boolean|string;
    /**
    Returns the current data value of the field. 
    */
        getValue():any;
    /**
    Initializes this Field mixin on the current instance. 
    */
        initField():void;
    /**
    Initializes the field's value based on the initial config. 
    */
        initValue():void;
    /**
    Returns true if the value of this Field has been changed from its originalValue. 
    */
        isDirty():boolean;
    /**
    Returns whether two field values are logically equal. 
    */
        isEqual(value1: any, value2: any):boolean;
    /**
    Returns whether this Field is a file upload field; if it returns true, forms will use special techniques for
submitti
    */
        isFileUpload():boolean;
    /**
    Returns whether or not the field value is currently valid by validating the field's current
value. 
    */
        isValid():boolean;
    /**
    Display one or more error messages associated with this field, using
msgTarget to determine how to display the
messag
    */
        markInvalid(errors: string|string[]):void;
    /**
    Resets the current field value to the originally loaded value and clears any validation messages. 
    */
        reset():void;
    /**
    Resets the field's originalValue property so it matches the current value. 
    */
        resetOriginalValue():void;
    /**
    Sets the value of validation. 
    */
        setValidation(validation: boolean|string):void;
    /**
    Sets a data value into the field and runs the change detection and validation. 
    */
        setValue(value: any):Ext.form.field.Field;
    /**
    Returns whether or not the field value is currently valid by validating the field's current
value, and fires the vali
    */
        validate():boolean;
    }
    interface FileConfig extends Ext.form.field.TextConfig {
    /**
    Specify optional custom button Ext.button.Button config (eg. 
    */
        buttonConfig?: any;
    /**
    The number of pixels of space reserved between the button and the text field. 
    */
        buttonMargin?: number;
    /**
    True to display the file upload field as a button with no visible text field. 
    */
        buttonOnly?: boolean;
    /**
    The button text to display on the upload button. 
    */
        buttonText?: string;
    /**
    True to clear the selected file value when the form this field belongs to
is submitted to the server. 
    */
        clearOnSubmit?: boolean;
    }
    /**
    A file upload field which has custom styling and allows control over the button text and other
features of text field
    */
    export class File extends Ext.form.field.Text {
    /**
    A reference to the trigger Button component created for this upload field. 
    */
        button: Ext.button.Button;
    /**
    A reference to the invisible file input element created for this upload field. 
    */
        fileInputEl: Ext.dom.Element;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.form.field.FileConfig);
    /**
    Gets the markup to be inserted into the subTplMarkup. 
    */
        getTriggerMarkup():void;
    }
    interface FileButtonConfig extends Ext.button.ButtonConfig {
    }
    /**
    

    */
    export class FileButton extends Ext.button.Button {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.form.field.FileButtonConfig);
    }
    interface HiddenConfig extends Ext.form.field.BaseConfig {
    }
    /**
    A basic hidden field for storing hidden values in forms that need to be passed in the form submit. 
    */
    export class Hidden extends Ext.form.field.Base {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.form.field.HiddenConfig);
    }
    interface HtmlEditorConfig extends Ext.form.FieldContainerConfig {
    /**
    An optional string or XTemplate configuration to insert in the field markup
after the iframe element. 
    */
        afterIFrameTpl?: string|any[]|Ext.XTemplate;
    /**
    An optional string or XTemplate configuration to insert in the field markup
after the textarea element. 
    */
        afterTextAreaTpl?: string|any[]|Ext.XTemplate;
    /**
    An optional string or XTemplate configuration to insert in the field markup
before the iframe element. 
    */
        beforeIFrameTpl?: string|any[]|Ext.XTemplate;
    /**
    An optional string or XTemplate configuration to insert in the field markup
before the textarea element. 
    */
        beforeTextAreaTpl?: string|any[]|Ext.XTemplate;
    /**
    The default text for the create link prompt 
    */
        createLinkText?: string;
    /**
    A default ui to use for the HtmlEditor's toolbar
Buttons 
    */
        defaultButtonUI?: string;
    /**
    The default value for the create link prompt 
    */
        defaultLinkValue?: string;
    /**
    A default value to be put into the editor to resolve focus issues. 
    */
        defaultValue?: string;
    /**
    Enable the left, center, right alignment buttons 
    */
        enableAlignments?: boolean;
    /**
    Enable the fore/highlight color buttons 
    */
        enableColors?: boolean;
    /**
    Enable font selection. 
    */
        enableFont?: boolean;
    /**
    Enable the increase/decrease font size buttons 
    */
        enableFontSize?: boolean;
    /**
    Enable the bold, italic and underline buttons 
    */
        enableFormat?: boolean;
    /**
    Enable the create link button. 
    */
        enableLinks?: boolean;
    /**
    Enable the bullet and numbered list buttons. 
    */
        enableLists?: boolean;
    /**
    Enable the switch to source edit button. 
    */
        enableSourceEdit?: boolean;
    /**
    An array of available font families 
    */
        fontFamilies?: string[];
    /**
    An optional string or XTemplate configuration to insert in the field markup
inside the iframe element (as attributes). 
    */
        iframeAttrTpl?: string|any[]|Ext.XTemplate;
    /**
    The name of the field. 
    */
        name?: string;
    /**
    Setting this to false will prevent the field from being submitted even when it is
not disabled. 
    */
        submitValue?: boolean;
    /**
    Specifies whether this field should be validated immediately whenever a change in its value is detected. 
    */
        validateOnChange?: boolean;
    /**
    This property, when a String, contributes its value to the error state of this
instance as reported by getErrors.

    */
        validation?: boolean|string;
    /**
    A value to initialize this field with.

    */
        value?: any;
    /**
    The event name(s) to use to publish the value
Ext.form.field.Base.bind for this field. 
    */
        valuePublishEvent?: string[]|string;
    }
    /**
    Provides a lightweight HTML Editor component. 
    */
    export class HtmlEditor extends Ext.form.FieldContainer {
    /**
    Object collection of toolbar tooltips for the buttons in the editor. 
    */
        buttonTips: any;
    /**
    Flag denoting that this component is a Field. 
    */
        isFormField: boolean;
    /**
    The original value of the field as configured in the value configuration, or as loaded by the last
form load operatio
    */
        originalValue: any;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.form.field.HtmlEditorConfig);
    /**
    A utility for grouping a set of modifications which may trigger value changes into a single transaction, to
prevent e
    */
        batchChanges(fn: Function):void;
    /**
    Template method before a field is reset. 
    */
        beforeReset():void;
    /**
    Checks whether the value of the field has changed since the last time it was checked. 
    */
        checkChange():void;
    /**
    Checks the isDirty state of the field and if it has changed since the last time it was checked,
fires the dirtychange
    */
        checkDirty():void;
    /**
    If you need/want custom HTML cleanup, this is the method you should override. 
    */
        cleanHtml(html: string):string;
    /**
    Cleans up values initialized by this Field mixin on the current instance. 
    */
        cleanupField():void;
    /**
    Clear any invalid styles/messages for this field. 
    */
        clearInvalid():void;
    /**
    Called when the editor creates its toolbar. 
    */
        createToolbar(editor: Ext.form.field.HtmlEditor):void;
    /**
    Executes a Midas editor command directly on the editor document. 
    */
        execCmd(cmd: string, value?: string|boolean):void;
    /**
    Only relevant if the instance's isFileUpload method returns true. 
    */
        extractFileInput():HTMLElement;
    /**
    Called when the editor initializes the iframe with HTML contents. 
    */
        getDocMarkup():void;
    /**
    Runs this field's validators and returns an array of error messages for any validation failures. 
    */
        getErrors(value: any):string[];
    /**
    Returns the value(s) that should be saved to the Ext.data.Model instance for this field, when Ext.form.Basic.updateRe
    */
        getModelData(includeEmptyText: any, isSubmitting: any):any;
    /**
    Returns the parameter(s) that would be included in a standard form submit for this field. 
    */
        getSubmitData():any;
    /**
    Returns the editor's toolbar. 
    */
        getToolbar():Ext.toolbar.Toolbar;
    /**
    Returns the value of validation. 
    */
        getValidation():boolean|string;
    /**
    Returns the current data value of the field. 
    */
        getValue():any;
    /**
    Initializes this Field mixin on the current instance. 
    */
        initField():void;
    /**
    Initializes the field's value based on the initial config. 
    */
        initValue():void;
    /**
    Inserts the passed text at the current cursor position. 
    */
        insertAtCursor(text: string):void;
    /**
    Returns true if the value of this Field has been changed from its originalValue. 
    */
        isDirty():boolean;
    /**
    Returns whether two field values are logically equal. 
    */
        isEqual(value1: any, value2: any):boolean;
    /**
    Returns whether this Field is a file upload field; if it returns true, forms will use special techniques for
submitti
    */
        isFileUpload():boolean;
    /**
    Returns whether or not the field value is currently valid by validating the field's current
value. 
    */
        isValid():boolean;
    /**
    Display one or more error messages associated with this field, using
msgTarget to determine how to display the
messag
    */
        markInvalid(errors: string|string[]):void;
    /**
    Pushes the value of the textarea into the iframe editor. 
    */
        pushValue():void;
    /**
    Executes a Midas editor command on the editor document and performs necessary focus and toolbar updates. 
    */
        relayCmd(cmd: string, value?: string|boolean):void;
    /**
    Resets the current field value to the originally loaded value and clears any validation messages. 
    */
        reset():void;
    /**
    Resets the field's originalValue property so it matches the current value. 
    */
        resetOriginalValue():void;
    /**
    Sets the read only state of this field. 
    */
        setReadOnly(readOnly: boolean):void;
    /**
    Sets the value of validation. 
    */
        setValidation(validation: boolean|string):void;
    /**
    Sets a data value into the field and runs the change detection and validation. 
    */
        setValue(value: any):Ext.form.field.Field;
    /**
    Syncs the contents of the editor iframe with the textarea. 
    */
        syncValue():void;
    /**
    Toggles the editor between standard and source edit mode. 
    */
        toggleSourceEdit(sourceEditMode?: boolean):void;
    /**
    Triggers a toolbar update by reading the markup state of the current selection in the editor. 
    */
        updateToolbar():void;
    }
    interface NumberConfig extends Ext.form.field.SpinnerConfig {
    /**
    False to disallow decimal values 
    */
        allowDecimals?: boolean;
    /**
    Set to false to disallow Exponential number notation 
    */
        allowExponential?: boolean;
    /**
    True to automatically strip not allowed characters from the field. 
    */
        autoStripChars?: boolean;
    /**
    The base set of characters to evaluate as valid numbers. 
    */
        baseChars?: string;
    /**
    The maximum precision to display after the decimal separator 
    */
        decimalPrecision?: number;
    /**
    Character(s) to allow as the decimal separator. 
    */
        decimalSeparator?: string;
    /**
    Error text to display if the maximum value validation fails. 
    */
        maxText?: string;
    /**
    The maximum allowed value. 
    */
        maxValue?: number;
    /**
    Error text to display if the minimum value validation fails. 
    */
        minText?: string;
    /**
    The minimum allowed value. 
    */
        minValue?: number;
    /**
    Error text to display if the value is not a valid number. 
    */
        nanText?: string;
    /**
    Error text to display if the value is negative and minValue is set to 0. 
    */
        negativeText?: string;
    /**
    Specifies a numeric interval by which the field's value will be incremented or decremented when the user invokes
the 
    */
        step?: number;
    /**
    False to ensure that the getSubmitValue method strips
always uses . 
    */
        submitLocaleSeparator?: boolean;
    }
    /**
    A numeric text field that provides automatic keystroke filtering to disallow non-numeric characters,
and numeric vali
    */
    export class Number extends Ext.form.field.Spinner {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.form.field.NumberConfig);
    /**
    Replaces any existing maxValue with the new value. 
    */
        setMaxValue(value: number):void;
    /**
    Replaces any existing minValue with the new value. 
    */
        setMinValue(value: number):void;
    }
    interface PickerConfig extends Ext.form.field.TextConfig {
    /**
    Whether the picker dropdown's width should be explicitly set to match the width of the field. 
    */
        matchFieldWidth?: boolean;
    /**
    A class to be added to the field's bodyEl element when the picker is opened. 
    */
        openCls?: string;
    /**
    The alignment position with which to align the picker. 
    */
        pickerAlign?: string;
    /**
    An offset [x,y] to use in addition to the pickerAlign when positioning the picker. 
    */
        pickerOffset?: number[];
    /**
    An additional CSS class used to style the trigger button. 
    */
        triggerCls?: string;
    }
    /**
    An abstract class for fields that have a single trigger which opens a "picker" popup below the field, e.g. 
    */
    export class Picker extends Ext.form.field.Text {
    /**
    True if the picker is currently expanded, false if not. 
    */
        isExpanded: boolean;
    /**
    true in this class to identify an object as an instantiated Picker Field, or subclass thereof. 
    */
        isPickerField: boolean;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.form.field.PickerConfig);
    /**
    Aligns the picker to the input element 
    */
        alignPicker():void;
    /**
    Collapses this field's picker dropdown. 
    */
        collapse():void;
    /**
    Creates and returns the component to be used as this field's picker. 
    */
        createPicker():void;
    /**
    Expands this field's picker dropdown. 
    */
        expand():void;
    /**
    Returns a reference to the picker component for this field, creating it if necessary by
calling createPicker. 
    */
        getPicker():Ext.Component;
    /**
    Handles the trigger click; by default toggles between expanding and collapsing the picker component. 
    */
        onTriggerClick(e: any):void;
    }
    interface RadioConfig extends Ext.form.field.CheckboxConfig {
    }
    /**
    Single radio field. 
    */
    export class Radio extends Ext.form.field.Checkbox {
    /**
    true in this class to identify an object as an instantiated Radio, or subclass thereof. 
    */
        isRadio: boolean;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.form.field.RadioConfig);
    /**
    If this radio is part of a group, it will return the selected value 
    */
        getGroupValue():string;
    }
    interface SpinnerConfig extends Ext.form.field.TextConfig {
    /**
    Specifies whether the up and down arrow keys should trigger spinning up and down. 
    */
        keyNavEnabled?: boolean;
    /**
    Specifies whether the mouse wheel should trigger spinning up and down while the field has focus. 
    */
        mouseWheelEnabled?: boolean;
    /**
    Specifies whether the down spinner button is enabled. 
    */
        spinDownEnabled?: boolean;
    /**
    Specifies whether the up spinner button is enabled. 
    */
        spinUpEnabled?: boolean;
    }
    /**
    A field with a pair of up/down spinner buttons. 
    */
    export class Spinner extends Ext.form.field.Text {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.form.field.SpinnerConfig);
    /**
    This method is called when the spinner down button is clicked, or when the down arrow key is pressed if
keyNavEnabled
    */
        onSpinDown():void;
    /**
    This method is called when the spinner up button is clicked, or when the up arrow key is pressed if
keyNavEnabled is 
    */
        onSpinUp():void;
    /**
    Sets whether the spinner down button is enabled. 
    */
        setSpinDownEnabled(enabled: boolean):void;
    /**
    Sets whether the spinner up button is enabled. 
    */
        setSpinUpEnabled(enabled: boolean):void;
    /**
    Triggers the spinner to step down; fires the spin and spindown events and calls the
onSpinDown method. 
    */
        spinDown():void;
    /**
    Triggers the spinner to step up; fires the spin and spinup events and calls the
onSpinUp method. 
    */
        spinUp():void;
    }
    interface TagConfig extends Ext.form.field.ComboBoxConfig {
    /**
    Has no effect if forceSelection is true. 
    */
        createNewOnBlur?: boolean;
    /**
    Has no effect if forceSelection is true. 
    */
        createNewOnEnter?: boolean;
    /**
    Has no effect if multiSelect is false. 
    */
        encodeSubmitValue?: boolean;
    /**
    True to hide the currently selected values from the drop down list. 
    */
        filterPickList?: boolean;
    /**
    The XTemplate to use for the inner
markup of the labeled items. 
    */
        labelTpl?: string|Ext.XTemplate;
    /**
    true to have each selected value fill to the width of the form field
`false to have each selected value size to its d
    */
        stacked?: boolean;
    /**
    The XTemplate to use for the tip of the labeled items.

    */
        tipTpl?: string|Ext.XTemplate;
    /**
    true to activate the trigger when clicking in empty space in the field. 
    */
        triggerOnClick?: boolean;
    /**
    The name of the parameter used to load unknown records into the store. 
    */
        valueParam?: string;
    }
    /**
    tagfield provides a combobox that removes the hassle of dealing with long and unruly select
options. 
    */
    export class Tag extends Ext.form.field.ComboBox {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.form.field.TagConfig);
    /**
    Overridden to use value (selection) instead of raw value and to avoid the use of placeholder 
    */
        applyEmptyText():void;
    /**
    Overridden to handle partial-input selections more directly 
    */
        assertValue():void;
    /**
    Returns the record from valueStore for the labeled item node 
    */
        getRecordByListItemNode(itemEl: any):void;
    /**
    Returns the records for the field's current value 
    */
        getValueRecords():any[];
    /**
    Intercept calls to onBlur to remove focusCls, because the base field
classes assume this should be applied to inputEl 
    */
        onBlur():void;
    /**
    Intercept calls to onFocus to add focusCls, because the base field
classes assume this should be applied to inputEl 
    */
        onFocus():void;
    /**
    Delegation control for selecting and removing labeled items or triggering list collapse/expansion 
    */
        onItemListClick(e: any):void;
    /**
    Handles keyDown processing of key-based selection of labeled items. 
    */
        onKeyDown(e: any):void;
    /**
    Handles auto-selection and creation of labeled items based on this field's
delimiter, as well as the keyUp processing
    */
        onKeyUp(e: any, t: any):void;
    /**
    Overridden to get and set the DOM value directly for type-ahead suggestion (bypassing get/setRawValue) 
    */
        onTypeAhead():void;
    /**
    Overridden to use inputEl instead of raw value and to avoid the use of placeholder 
    */
        preFocus():void;
    /**
    Removal of labeled item by node reference 
    */
        removeByListItemNode(itemEl: any):void;
    /**
    Removes a value or values from the current value of the field 
    */
        removeValue(value: any):void;
    /**
    Intercept calls to renderActiveError to add invalidCls, because the base
field classes assume this should be applied 
    */
        renderActiveError():void;
    /**
    Toggle of labeled item selection by node reference 
    */
        toggleSelectionByListItemNode(itemEl: any, keepExisting: any):void;
    }
    interface TextConfig extends Ext.form.field.BaseConfig {
    /**
    Specify false to validate that the value's length must be > 0. 
    */
        allowBlank?: boolean;
    /**
    Specify false to automatically trim the value before validating
the whether the value is blank. 
    */
        allowOnlyWhitespace?: boolean;
    /**
    The error text to display if the allowBlank validation fails 
    */
        blankText?: string;
    /**
    Specify true to disable input keystroke filtering 
    */
        disableKeyFilter?: boolean;
    /**
    false to prevent the user from typing text directly into the field; the field can
only have its value set programmati
    */
        editable?: boolean;
    /**
    The CSS class to apply to an empty field to style the emptyText. 
    */
        emptyCls?: string;
    /**
    The default text to place into an empty field. 
    */
        emptyText?: string;
    /**
    true to enable the proxying of key events for the HTML input field 
    */
        enableKeyEvents?: boolean;
    /**
    True to set the maxLength property on the underlying input field. 
    */
        enforceMaxLength?: boolean;
    /**
    true if this field should automatically grow and shrink to its content 
    */
        grow?: boolean;
    /**
    A string that will be appended to the field's current value for the purposes of calculating the target field
size. 
    */
        growAppend?: string;
    /**
    The maximum width to allow when grow = true 
    */
        growMax?: number;
    /**
    The minimum width to allow when grow = true 
    */
        growMin?: number;
    /**
    true to hide all triggers 
    */
        hideTrigger?: boolean;
    /**
    The CSS class that is added to the element wrapping the input element 
    */
        inputWrapCls?: string;
    /**
    An input mask regular expression that will be used to filter keystrokes (character being
typed) that do not match. 
    */
        maskRe?: RegExp;
    /**
    Maximum input field length allowed by validation. 
    */
        maxLength?: number;
    /**
    Error text to display if the maximum length validation fails 
    */
        maxLengthText?: string;
    /**
    Minimum input field length required 
    */
        minLength?: number;
    /**
    Error text to display if the minimum length validation fails. 
    */
        minLengthText?: string;
    /**
    A JavaScript RegExp object to be tested against the field value during validation. 
    */
        regex?: RegExp;
    /**
    The error text to display if regex is used and the test fails during validation 
    */
        regexText?: string;
    /**
    true to attach a click repeater to the trigger(s). 
    */
        repeatTriggerClick?: boolean;
    /**
    The CSS class to apply to a required field, i.e. 
    */
        requiredCls?: string;
    /**
    true to automatically select any existing field text when the field receives input
focus. 
    */
        selectOnFocus?: boolean;
    /**
    An initial value for the 'size' attribute on the text input element. 
    */
        size?: number;
    /**
    A JavaScript RegExp object used to strip unwanted content from the value
during input. 
    */
        stripCharsRe?: RegExp;
    /**
    The CSS class that is added to the div wrapping the input element and trigger button(s). 
    */
        triggerWrapCls?: string;
    /**
    Triggers to use in this field. 
    */
        triggers?: any;
    /**
    Specify as true to modify the behaviour of allowBlank so that blank values are not passed as valid, but are subject t
    */
        validateBlank?: boolean;
    /**
    A custom validation function to be called during field validation (getErrors). 
    */
        validator?: Function;
    /**
    A validation type name as defined in Ext.form.field.VTypes

    */
        vtype?: string;
    /**
    A custom error message to display in place of the default message provided for the vtype currently
set for this field. 
    */
        vtypeText?: string;
    }
    /**
    A basic text field. 
    */
    export class Text extends Ext.form.field.Base {
    /**
    A reference to the element that wraps the input element. 
    */
        inputCell: Ext.dom.Element;
    /**
    A reference to the element that wraps the input element. 
    */
        inputWrap: Ext.dom.Element;
    /**
     
    */
        triggerEl: Ext.dom.CompositeElement;
    /**
    A reference to the element which encapsulates the input field and all
trigger button(s). 
    */
        triggerWrap: Ext.dom.Element;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.form.field.TextConfig);
    /**
    Automatically grows the field to accommodate the width of the text up to the maximum
field width allowed. 
    */
        autoSize():void;
    /**
    Returns the value of hideTrigger. 
    */
        getHideTrigger():boolean;
    /**
    Returns the trigger with the given id 
    */
        getTrigger(id: string):Ext.form.trigger.Trigger;
    /**
    Get the total width of the trigger button area. 
    */
        getTriggerWidth():number;
    /**
    Returns the value of triggers. 
    */
        getTriggers():any;
    /**
    Selects text in this field 
    */
        selectText(start?: number, end?: number):void;
    /**
    Sets the value of hideTrigger. 
    */
        setHideTrigger(hideTrigger: boolean):void;
    /**
    Sets the value of triggers. 
    */
        setTriggers(triggers: any):void;
    }
    interface TextAreaConfig extends Ext.form.field.TextConfig {
    /**
    True if you want the ENTER key to be classed as a special key and the specialkey event to be fired
when ENTER is pres
    */
        enterIsSpecial?: boolean;
    /**
    true to prevent scrollbars from appearing regardless of how much text is in the field. 
    */
        preventScrollbars?: boolean;
    }
    /**
    This class creates a multiline text field, which can be used as a direct replacement for traditional
textarea fields. 
    */
    export class TextArea extends Ext.form.field.Text {
    /**
     
    */
        constructor(config: Ext.form.field.TextAreaConfig);
    }
    interface TimeConfig extends Ext.form.field.ComboBoxConfig {
    /**
    Multiple date formats separated by "|" to try when parsing a user input value and it doesn't match the defined
format. 
    */
        altFormats?: string;
    /**
    The default time format string which can be overriden for localization support. 
    */
        format?: string;
    /**
    The number of minutes between each time value in the list. 
    */
        increment?: number;
    /**
    The error text to display when the entered time is after maxValue. 
    */
        maxText?: string;
    /**
    The maximum allowed time. 
    */
        maxValue?: Date|string;
    /**
    The error text to display when the entered time is before minValue. 
    */
        minText?: string;
    /**
    The minimum allowed time. 
    */
        minValue?: Date|string;
    /**
    The maximum height of the Ext.picker.Time dropdown. 
    */
        pickerMaxHeight?: number;
    /**
    Specify as true to enforce that only values on the increment boundary are accepted. 
    */
        snapToIncrement?: boolean;
    /**
    The date format string which will be submitted to the server. 
    */
        submitFormat?: string;
    }
    /**
    Provides a time input field with a time dropdown and automatic time validation. 
    */
    export class Time extends Ext.form.field.ComboBox {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.form.field.TimeConfig);
    /**
    Replaces any existing maxValue with the new time and refreshes the picker's range. 
    */
        setMaxValue(value: Date|string):void;
    /**
    Replaces any existing minValue with the new time and refreshes the picker's range. 
    */
        setMinValue(value: Date|string):void;
    }
    interface TriggerConfig extends Ext.form.field.TextConfig {
    /**
    An additional CSS class used to style the trigger button. 
    */
        triggerCls?: string;
    }
    /**
     
    */
    export class Trigger extends Ext.form.field.Text {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.form.field.TriggerConfig);
    }
    /**
    This is a singleton object which contains a set of commonly used field validation functions
and provides a mechanism 
    */
    export class VTypes {
    /**
    The keystroke filter mask to be applied on alpha input. 
    */
        static alphaMask: RegExp;
    /**
    The error text to display when the alpha validation function returns false. 
    */
        static alphaText: string;
    /**
    The keystroke filter mask to be applied on alphanumeric input. 
    */
        static alphanumMask: RegExp;
    /**
    The error text to display when the alphanumeric validation function returns false. 
    */
        static alphanumText: string;
    /**
    The keystroke filter mask to be applied on email input. 
    */
        static emailMask: RegExp;
    /**
    The error text to display when the email validation function returns false. 
    */
        static emailText: string;
    /**
    The error text to display when the url validation function returns false. 
    */
        static urlText: string;
    /**
    The function used to validate alpha values 
    */
        static alpha(value: string):boolean;
    /**
    The function used to validate alphanumeric values 
    */
        static alphanum(value: string):boolean;
    /**
    The function used to validate email addresses. 
    */
        static email(value: string):boolean;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    The function used to validate URLs 
    */
        static url(value: string):boolean;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
}
declare module Ext.form.trigger {
    interface ComponentConfig extends Ext.form.trigger.TriggerConfig {
    /**
    A config object for a Component or Widget,
or an already instantiated Component or Widget.

    */
        component?: any;
    }
    /**
    A Text Field Trigger that contains a Component or Widget.

    */
    export class Component extends Ext.form.trigger.Trigger {
    /**
    The component or widget

    */
        component: any;
    /**
     
    */
        constructor(config: Ext.form.trigger.ComponentConfig);
    }
    interface SpinnerConfig extends Ext.form.trigger.TriggerConfig {
    /**
    The handler for the 'down' button
@declarativeHandler 
    */
        downHandler?: Function|string;
    /**
    The handler for the 'up' button
@declarativeHandler 
    */
        upHandler?: Function|string;
    /**
    True to layout the spinner in a vertical format. 
    */
        vertical?: boolean;
    }
    /**
    A Trigger that contains 2 clickable elements inside in the form of a "up" and a "down"
trigger.

    */
    export class Spinner extends Ext.form.trigger.Trigger {
    /**
     
    */
        constructor(config: Ext.form.trigger.SpinnerConfig);
    }
    interface TriggerConfig {
    /**
    CSS class to add to the trigger element.

    */
        cls?: string;
    /**
    An additional CSS class (or classes) to be added to the trigger's element. 
    */
        extraCls?: string;
    /**
    Function to run when trigger is clicked or tapped. 
    */
        handler?: Function|string;
    /**
    true to initially render the trigger hidden. 
    */
        hidden?: boolean;
    /**
    Set 'false' to prevent trigger from being hidden even though the related field is set readOnly 
    */
        hideOnReadOnly?: boolean;
    /**
    true to attach a click repeater to the trigger 
    */
        repeatClick?: boolean;
    /**
    Execution context for the handler function.

    */
        scope?: any;
    /**
    An optional weighting to change the ordering of the items. 
    */
        weight?: number;
    /**
    The trigger's width, in pixels. 
    */
        width?: number;
    }
    /**
    Base class for Text Field triggers

    */
    export class Trigger extends Ext.Base {
    /**
    An optional template for rendering child elements inside the trigger element. 
    */
        bodyTpl: Ext.Template|string|any[];
    /**
    If this property is specified by the target class of this mixin its properties are
used to configure the created Ext.
    */
        factoryConfig: any;
    /**
     
    */
        constructor(config: Ext.form.trigger.TriggerConfig);
    /**
    Called when this trigger's field is rendered 
    */
        afterFieldRender():void;
    /**
    Allows addition of data to the render data object for the bodyTpl. 
    */
        getBodyRenderData():any;
    /**
    Get the element for this trigger. 
    */
        getEl():Ext.dom.Element;
    /**
    Returns the element that should receive the "state" classes - focusCls,
overCls, and clickCls. 
    */
        getStateEl():void;
    /**
    Hides the trigger 
    */
        hide():void;
    /**
    Returns true if this Trigger is visible. 
    */
        isVisible():boolean;
    /**
    Handles a click on the trigger's element 
    */
        onClick():void;
    /**
    Called when this trigger's field is blurred 
    */
        onFieldBlur():void;
    /**
    Called when this trigger's field is focused 
    */
        onFieldFocus():void;
    /**
    Called when this trigger's field is rendered 
    */
        onFieldRender():void;
    /**
    Shows the trigger 
    */
        show():void;
    }
}
declare module Ext.fx {
    interface AnimConfig {
    /**
    Used in conjunction with iterations to reverse the animation each time an iteration completes. 
    */
        alternate?: boolean;
    /**
    true to immediately force this animation to its final state. 
    */
        autoEnd?: boolean;
    /**
    A function to be run after the animation has completed. 
    */
        callback?: Function|string;
    /**
    Time to delay before starting the animation. 
    */
        delay?: number;
    /**
    Time in milliseconds for a single animation to last. 
    */
        duration?: number;
    /**
    Currently only for Component Animation: Only set a component's outer element size bypassing layouts. 
    */
        dynamic?: boolean;
    /**
    This describes how the intermediate values used during a transition will be calculated. 
    */
        easing?: string;
    /**
    An object containing property/value pairs for the beginning of the animation. 
    */
        from?: any;
    /**
    Number of times to execute the animation. 
    */
        iterations?: number;
    /**
    Animation keyframes follow the CSS3 Animation configuration pattern. 
    */
        keyframes?: any;
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    /**
    true to remove the target when the animation is complete, using the appropriate removal
method for the target. 
    */
        remove?: boolean;
    /**
    Run the animation from the end to the beginning
Defaults to false. 
    */
        reverse?: boolean;
    /**
    The scope that the callback function will be called with

    */
        scope?: any;
    /**
    The Ext.fx.target.Target to apply the animation to. 
    */
        target?: any;
    /**
    An object containing property/value pairs for the end of the animation. 
    */
        to?: any;
    }
    /**
    This class manages animation for a specific target. 
    */
    export class Anim extends Ext.Base {
    /**
    Current iteration the animation is running. 
    */
        currentIteration: number;
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Anim, or subclass thereof. 
    */
        isAnimation: boolean;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
    Flag to determine if the animation is paused. 
    */
        paused: boolean;
    /**
    Flag to determine if the animation has started 
    */
        running: boolean;
    /**
    Starting time of the animation. 
    */
        startTime: Date;
    /**
     
    */
        constructor(config: Ext.fx.AnimConfig);
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Fire afteranimate event and end the animation. 
    */
        end():void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Immediately force this animation to its final state. 
    */
        jumpToEnd():void;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    }
    interface AnimationConfig {
    /**
    The type of animation to use. 
    */
        type?: string;
    }
    /**
    This class is a factory class that will create and return an animation class based on the type configuration.

    */
    export class Animation extends Ext.Base {
    }
    interface AnimatorConfig {
    /**
    Time to delay before starting the animation. 
    */
        delay?: number;
    /**
    Time in milliseconds for the animation to last. 
    */
        duration?: number;
    /**
    Currently only for Component Animation: Only set a component's outer element size bypassing layouts. 
    */
        dynamic?: boolean;
    /**
    This describes how the intermediate values used during a transition will be calculated. 
    */
        easing?: string;
    /**
    Number of times to execute the animation. 
    */
        iterations?: number;
    /**
    Animation keyframes follow the CSS3 Animation configuration pattern. 
    */
        keyframes?: any;
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    /**
    The Ext.fx.target to apply the animation to. 
    */
        target?: Ext.fx.target.Target;
    }
    /**
    This class is used to run keyframe based animations, which follows the CSS3 based animation structure. 
    */
    export class Animator extends Ext.Base {
    /**
    Current iteration the animation is running. 
    */
        currentIteration: number;
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Animator, or subclass thereof. 
    */
        isAnimator: boolean;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
    Current keyframe step of the animation. 
    */
        keyframeStep: number;
    /**
    Flag to determine if the animation is paused. 
    */
        paused: boolean;
    /**
    Flag to determine if the animation has started 
    */
        running: boolean;
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Fire afteranimate event and end the animation. 
    */
        end():void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    }
    /**
    

    */
    export class CubicBezier {
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    /**
    Provides SVG Paths handling functions. 
    */
    export class DrawPath {
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    /**
    This class contains a series of function definitions used to modify values during an animation. 
    */
    export class Easing {
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface ManagerConfig {
    /**
    Default interval in miliseconds to calculate each frame. 
    */
    }
    /**
    Animation Manager which keeps track of all current animations and manages them on a frame by frame basis.

    */
    export class Manager {
    /**
    Add an Anim to the manager. 
    */
        static addAnim(anim: Ext.fx.Anim):void;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Remove an Anim from the manager. 
    */
        static removeAnim(anim: Ext.fx.Anim):void;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    /**
    

    */
    export class PropertyHandler extends Ext.Base {
    }
    /**
    Animation Queue mixin to handle chaining and queueing by target.

    */
    export class Queue extends Ext.Base {
    /**
     
    */
        constructor();
    }
    /**
    

    */
    export class Runner extends Ext.Base {
    /**
     
    */
        constructor();
    }
    /**
    

    */
    export class State extends Ext.Base {
    /**
     
    */
        constructor(data: any);
    }
}
declare module Ext.fx.animation {
    interface AbstractConfig extends Ext.EventedConfig {
    /**
    Before configuration.

    */
        before?: any;
    /**
    Easing type. 
    */
        easing?: string;
    }
    /**
    

    */
    export class Abstract extends Ext.Evented {
    /**
     
    */
        constructor();
    /**
    Returns the value of after. 
    */
        getAfter():any;
    /**
    Returns the value of before. 
    */
        getBefore():any;
    /**
    Returns the value of delay. 
    */
        getDelay():number;
    /**
    Returns the value of direction. 
    */
        getDirection():string;
    /**
    Returns the value of duration. 
    */
        getDuration():number;
    /**
    Returns the value of easing. 
    */
        getEasing():string;
    /**
    Returns the value of element. 
    */
        getElement():any;
    /**
    Returns the value of iteration. 
    */
        getIteration():number;
    /**
    Returns the value of onBeforeEnd. 
    */
        getOnBeforeEnd():any;
    /**
    Returns the value of onBeforeStart. 
    */
        getOnBeforeStart():any;
    /**
    Returns the value of onEnd. 
    */
        getOnEnd():any;
    /**
    Returns the value of preserveEndState. 
    */
        getPreserveEndState():boolean;
    /**
    Returns the value of replacePrevious. 
    */
        getReplacePrevious():boolean;
    /**
    Returns the value of reverse. 
    */
        getReverse():any;
    /**
    Returns the value of scope. 
    */
        getScope():any;
    /**
    Sets the value of after. 
    */
        setAfter(after: any):void;
    /**
    Sets the value of before. 
    */
        setBefore(before: any):void;
    /**
    Sets the value of delay. 
    */
        setDelay(delay: number):void;
    /**
    Sets the value of direction. 
    */
        setDirection(direction: string):void;
    /**
    Sets the value of duration. 
    */
        setDuration(duration: number):void;
    /**
    Sets the value of easing. 
    */
        setEasing(easing: string):void;
    /**
    Sets the value of element. 
    */
        setElement(element: any):void;
    /**
    Sets the value of iteration. 
    */
        setIteration(iteration: number):void;
    /**
    Sets the value of name. 
    */
        setName(name: string):void;
    /**
    Sets the value of onBeforeEnd. 
    */
        setOnBeforeEnd(onBeforeEnd: any):void;
    /**
    Sets the value of onBeforeStart. 
    */
        setOnBeforeStart(onBeforeStart: any):void;
    /**
    Sets the value of onEnd. 
    */
        setOnEnd(onEnd: any):void;
    /**
    Sets the value of preserveEndState. 
    */
        setPreserveEndState(preserveEndState: boolean):void;
    /**
    Sets the value of replacePrevious. 
    */
        setReplacePrevious(replacePrevious: boolean):void;
    /**
    Sets the value of reverse. 
    */
        setReverse(reverse: any):void;
    /**
    Sets the value of scope. 
    */
        setScope(scope: any):void;
    }
    interface CubeConfig extends Ext.fx.animation.AbstractConfig {
    /**
    The direction of which the slide animates 
    */
        direction?: string;
    }
    /**
    

    */
    export class Cube extends Ext.fx.animation.Abstract {
    /**
     
    */
        constructor();
    /**
    Returns the value of out. 
    */
        getOut():boolean;
    /**
    Sets the value of out. 
    */
        setOut(out: boolean):void;
    }
    interface FadeConfig extends Ext.fx.animation.AbstractConfig {
    /**
    True if you want to make this animation fade out, instead of fade in. 
    */
        out?: boolean;
    }
    /**
    

    */
    export class Fade extends Ext.fx.animation.Abstract {
    /**
     
    */
        constructor();
    /**
    Returns the value of out. 
    */
        getOut():boolean;
    /**
    Sets the value of out. 
    */
        setOut(out: boolean):void;
    }
    interface FadeOutConfig extends Ext.fx.animation.FadeConfig {
    }
    /**
    

    */
    export class FadeOut extends Ext.fx.animation.Fade {
    /**
     
    */
        constructor();
    }
    interface FlipConfig extends Ext.fx.animation.AbstractConfig {
    /**
    The direction of which the slide animates 
    */
        direction?: string;
    }
    /**
    

    */
    export class Flip extends Ext.fx.animation.Abstract {
    /**
     
    */
        constructor();
    /**
    Returns the value of half. 
    */
        getHalf():boolean;
    /**
    Returns the value of out. 
    */
        getOut():any;
    /**
    Sets the value of half. 
    */
        setHalf(half: boolean):void;
    /**
    Sets the value of out. 
    */
        setOut(out: any):void;
    }
    interface PopConfig extends Ext.fx.animation.AbstractConfig {
    /**
    True if you want to make this animation pop out, instead of pop in. 
    */
        out?: boolean;
    }
    /**
    

    */
    export class Pop extends Ext.fx.animation.Abstract {
    /**
     
    */
        constructor();
    /**
    Returns the value of out. 
    */
        getOut():boolean;
    /**
    Sets the value of out. 
    */
        setOut(out: boolean):void;
    }
    interface PopOutConfig extends Ext.fx.animation.PopConfig {
    }
    /**
    

    */
    export class PopOut extends Ext.fx.animation.Pop {
    /**
     
    */
        constructor();
    }
    interface SlideConfig extends Ext.fx.animation.AbstractConfig {
    /**
    The direction of which the slide animates 
    */
        direction?: string;
    /**
    The offset that the animation should go offscreen before entering (or when exiting) 
    */
        offset?: number;
    /**
    True if you want to make this animation slide out, instead of slide in. 
    */
        out?: boolean;
    }
    /**
    

    */
    export class Slide extends Ext.fx.animation.Abstract {
    /**
     
    */
        constructor();
    /**
    Returns the value of isElementBoxFit. 
    */
        getIsElementBoxFit():boolean;
    /**
    Returns the value of offset. 
    */
        getOffset():number;
    /**
    Returns the value of out. 
    */
        getOut():boolean;
    /**
    Returns the value of useCssTransform. 
    */
        getUseCssTransform():boolean;
    /**
    Sets the value of containerBox. 
    */
        setContainerBox(containerBox: string):void;
    /**
    Sets the value of elementBox. 
    */
        setElementBox(elementBox: string):void;
    /**
    Sets the value of isElementBoxFit. 
    */
        setIsElementBoxFit(isElementBoxFit: boolean):void;
    /**
    Sets the value of offset. 
    */
        setOffset(offset: number):void;
    /**
    Sets the value of out. 
    */
        setOut(out: boolean):void;
    /**
    Sets the value of useCssTransform. 
    */
        setUseCssTransform(useCssTransform: boolean):void;
    }
    interface SlideOutConfig extends Ext.fx.animation.SlideConfig {
    }
    /**
    

    */
    export class SlideOut extends Ext.fx.animation.Slide {
    /**
     
    */
        constructor();
    }
    interface WipeConfig extends Ext.fx.AnimationConfig {
    /**
    The direction of which the slide animates 
    */
        direction?: string;
    /**
    Valid values are 'ease', 'linear', ease-in', 'ease-out', 'ease-in-out',
or a cubic-bezier curve as defined by CSS. 
    */
        easing?: string;
    /**
    True if you want to make this animation wipe out, instead of slide in. 
    */
        out?: boolean;
    }
    /**
    

    */
    export class Wipe extends Ext.fx.Animation {
    /**
    Returns the value of direction. 
    */
        getDirection():string;
    /**
    Returns the value of easing. 
    */
        getEasing():string;
    /**
    Returns the value of out. 
    */
        getOut():boolean;
    /**
    Sets the value of direction. 
    */
        setDirection(direction: string):void;
    /**
    Sets the value of easing. 
    */
        setEasing(easing: string):void;
    /**
    Sets the value of out. 
    */
        setOut(out: boolean):void;
    }
    interface WipeOutConfig extends Ext.fx.animation.WipeConfig {
    }
    /**
    

    */
    export class WipeOut extends Ext.fx.animation.Wipe {
    }
}
declare module Ext.fx.easing {
    interface AbstractConfig {
    }
    /**
    

    */
    export class Abstract extends Ext.Base {
    /**
     
    */
        constructor(config: Ext.fx.easing.AbstractConfig);
    /**
    Returns the value of startTime. 
    */
        getStartTime():number;
    /**
    Returns the value of startValue. 
    */
        getStartValue():number;
    /**
    Sets the value of startTime. 
    */
        setStartTime(startTime: number):void;
    /**
    Sets the value of startValue. 
    */
        setStartValue(startValue: number):void;
    }
    interface BounceConfig extends Ext.fx.easing.AbstractConfig {
    }
    /**
    

    */
    export class Bounce extends Ext.fx.easing.Abstract {
    /**
     
    */
        constructor(config: Ext.fx.easing.BounceConfig);
    /**
    Returns the value of acceleration. 
    */
        getAcceleration():number;
    /**
    Returns the value of springTension. 
    */
        getSpringTension():number;
    /**
    Returns the value of startVelocity. 
    */
        getStartVelocity():number;
    /**
    Sets the value of acceleration. 
    */
        setAcceleration(acceleration: number):void;
    /**
    Sets the value of springTension. 
    */
        setSpringTension(springTension: number):void;
    /**
    Sets the value of startVelocity. 
    */
        setStartVelocity(startVelocity: number):void;
    }
    interface BoundMomentumConfig extends Ext.fx.easing.AbstractConfig {
    /**
    A valid config object for Ext.fx.easing.Bounce

    */
        bounce?: any;
    /**
    The minimum velocity to end this easing 
    */
        minVelocity?: number;
    /**
    A valid config object for Ext.fx.easing.Momentum

    */
        momentum?: any;
    /**
    The start velocity 
    */
        startVelocity?: number;
    }
    /**
    This easing is typically used for Ext.scroll.Scroller. 
    */
    export class BoundMomentum extends Ext.fx.easing.Abstract {
    /**
     
    */
        constructor(config: Ext.fx.easing.BoundMomentumConfig);
    /**
    Returns the value of bounce. 
    */
        getBounce():any;
    /**
    Returns the value of maxMomentumValue. 
    */
        getMaxMomentumValue():number;
    /**
    Returns the value of minMomentumValue. 
    */
        getMinMomentumValue():number;
    /**
    Returns the value of minVelocity. 
    */
        getMinVelocity():number;
    /**
    Returns the value of momentum. 
    */
        getMomentum():any;
    /**
    Returns the value of startVelocity. 
    */
        getStartVelocity():number;
    /**
    Sets the value of bounce. 
    */
        setBounce(bounce: any):void;
    /**
    Sets the value of maxMomentumValue. 
    */
        setMaxMomentumValue(maxMomentumValue: number):void;
    /**
    Sets the value of minMomentumValue. 
    */
        setMinMomentumValue(minMomentumValue: number):void;
    /**
    Sets the value of minVelocity. 
    */
        setMinVelocity(minVelocity: number):void;
    /**
    Sets the value of momentum. 
    */
        setMomentum(momentum: any):void;
    /**
    Sets the value of startVelocity. 
    */
        setStartVelocity(startVelocity: number):void;
    }
    interface EaseInConfig extends Ext.fx.easing.LinearConfig {
    }
    /**
    

    */
    export class EaseIn extends Ext.fx.easing.Linear {
    /**
     
    */
        constructor(config: Ext.fx.easing.EaseInConfig);
    /**
    Returns the value of exponent. 
    */
        getExponent():number;
    /**
    Sets the value of exponent. 
    */
        setExponent(exponent: number):void;
    }
    interface EaseOutConfig extends Ext.fx.easing.LinearConfig {
    }
    /**
    

    */
    export class EaseOut extends Ext.fx.easing.Linear {
    /**
     
    */
        constructor(config: Ext.fx.easing.EaseOutConfig);
    /**
    Returns the value of exponent. 
    */
        getExponent():number;
    /**
    Sets the value of exponent. 
    */
        setExponent(exponent: number):void;
    }
    /**
    

    */
    export class Easing extends Ext.Base {
    /**
     
    */
        constructor(easing: any);
    }
    interface LinearConfig extends Ext.fx.easing.AbstractConfig {
    }
    /**
    

    */
    export class Linear extends Ext.fx.easing.Abstract {
    /**
     
    */
        constructor(config: Ext.fx.easing.LinearConfig);
    /**
    Returns the value of duration. 
    */
        getDuration():number;
    /**
    Returns the value of endValue. 
    */
        getEndValue():number;
    /**
    Sets the value of duration. 
    */
        setDuration(duration: number):void;
    /**
    Sets the value of endValue. 
    */
        setEndValue(endValue: number):void;
    }
    interface MomentumConfig extends Ext.fx.easing.AbstractConfig {
    }
    /**
    

    */
    export class Momentum extends Ext.fx.easing.Abstract {
    /**
     
    */
        constructor(config: Ext.fx.easing.MomentumConfig);
    /**
    Returns the value of acceleration. 
    */
        getAcceleration():number;
    /**
    Returns the value of friction. 
    */
        getFriction():number;
    /**
    Returns the value of startVelocity. 
    */
        getStartVelocity():number;
    /**
    Sets the value of acceleration. 
    */
        setAcceleration(acceleration: number):void;
    /**
    Sets the value of friction. 
    */
        setFriction(friction: number):void;
    /**
    Sets the value of startVelocity. 
    */
        setStartVelocity(startVelocity: number):void;
    }
}
declare module Ext.fx.layout {
    /**
    

    */
    export class Card extends Ext.Base {
    /**
     
    */
        constructor(config: any);
    }
}
declare module Ext.fx.layout.card {
    interface AbstractConfig extends Ext.EventedConfig {
    }
    /**
    

    */
    export class Abstract extends Ext.Evented {
    /**
     
    */
        constructor(config: Ext.fx.layout.card.AbstractConfig);
    /**
    Returns the value of direction. 
    */
        getDirection():string;
    /**
    Returns the value of duration. 
    */
        getDuration():any;
    /**
    Returns the value of layout. 
    */
        getLayout():any;
    /**
    Returns the value of reverse. 
    */
        getReverse():any;
    /**
    Sets the value of direction. 
    */
        setDirection(direction: string):void;
    /**
    Sets the value of duration. 
    */
        setDuration(duration: any):void;
    /**
    Sets the value of layout. 
    */
        setLayout(layout: any):void;
    /**
    Sets the value of reverse. 
    */
        setReverse(reverse: any):void;
    }
    interface CoverConfig extends Ext.fx.layout.card.StyleConfig {
    }
    /**
    

    */
    export class Cover extends Ext.fx.layout.card.Style {
    /**
     
    */
        constructor(config: Ext.fx.layout.card.CoverConfig);
    }
    interface CubeConfig extends Ext.fx.layout.card.StyleConfig {
    }
    /**
    

    */
    export class Cube extends Ext.fx.layout.card.Style {
    /**
     
    */
        constructor(config: Ext.fx.layout.card.CubeConfig);
    }
    interface FadeConfig extends Ext.fx.layout.card.StyleConfig {
    }
    /**
    

    */
    export class Fade extends Ext.fx.layout.card.Style {
    /**
     
    */
        constructor(config: Ext.fx.layout.card.FadeConfig);
    }
    interface FlipConfig extends Ext.fx.layout.card.StyleConfig {
    }
    /**
    

    */
    export class Flip extends Ext.fx.layout.card.Style {
    /**
     
    */
        constructor(config: Ext.fx.layout.card.FlipConfig);
    }
    interface PopConfig extends Ext.fx.layout.card.StyleConfig {
    }
    /**
    

    */
    export class Pop extends Ext.fx.layout.card.Style {
    /**
     
    */
        constructor(config: Ext.fx.layout.card.PopConfig);
    }
    interface RevealConfig extends Ext.fx.layout.card.StyleConfig {
    }
    /**
    

    */
    export class Reveal extends Ext.fx.layout.card.Style {
    /**
     
    */
        constructor(config: Ext.fx.layout.card.RevealConfig);
    }
    interface ScrollConfig extends Ext.fx.layout.card.AbstractConfig {
    }
    /**
    

    */
    export class Scroll extends Ext.fx.layout.card.Abstract {
    /**
     
    */
        constructor(config: Ext.fx.layout.card.ScrollConfig);
    }
    interface ScrollCoverConfig extends Ext.fx.layout.card.ScrollConfig {
    }
    /**
    

    */
    export class ScrollCover extends Ext.fx.layout.card.Scroll {
    /**
     
    */
        constructor(config: Ext.fx.layout.card.ScrollCoverConfig);
    }
    interface ScrollRevealConfig extends Ext.fx.layout.card.ScrollConfig {
    }
    /**
    

    */
    export class ScrollReveal extends Ext.fx.layout.card.Scroll {
    /**
     
    */
        constructor(config: Ext.fx.layout.card.ScrollRevealConfig);
    }
    interface SlideConfig extends Ext.fx.layout.card.StyleConfig {
    }
    /**
    

    */
    export class Slide extends Ext.fx.layout.card.Style {
    /**
     
    */
        constructor(config: Ext.fx.layout.card.SlideConfig);
    }
    interface StyleConfig extends Ext.fx.layout.card.AbstractConfig {
    }
    /**
    

    */
    export class Style extends Ext.fx.layout.card.Abstract {
    /**
     
    */
        constructor(config: Ext.fx.layout.card.StyleConfig);
    /**
    Returns the value of inAnimation. 
    */
        getInAnimation():any;
    /**
    Returns the value of outAnimation. 
    */
        getOutAnimation():any;
    /**
    Sets the value of inAnimation. 
    */
        setInAnimation(inAnimation: any):void;
    /**
    Sets the value of outAnimation. 
    */
        setOutAnimation(outAnimation: any):void;
    }
}
declare module Ext.fx.runner {
    interface CssConfig extends Ext.EventedConfig {
    }
    /**
    

    */
    export class Css extends Ext.Evented {
    /**
     
    */
        constructor();
    }
    interface CssAnimationConfig extends Ext.fx.runner.CssConfig {
    }
    /**
    

    */
    export class CssAnimation extends Ext.fx.runner.Css {
    /**
     
    */
        constructor();
    }
    interface CssTransitionConfig {
    }
    /**
    

    */
    export class CssTransition {
    /**
    This object holds a key for any event that has a listener. 
    */
        static hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        static isObservable: boolean;
    /**
    Appends an after-event handler. 
    */
        static addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        static addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        static addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        static addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        static clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        static clearManagedListeners():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        static enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        static fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        static fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        static fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        static hasListener(eventName: string):boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        static isSuspended(event?: string):boolean;
    /**
    Shorthand for addManagedListener. 
    */
        static mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        static mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        static on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        static onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        static onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        static relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        static removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        static removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        static removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        static removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Resumes firing of the named event(s). 
    */
        static resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        static resumeEvents(discardQueue?: boolean):void;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    An alias for addListener. 
    */
        static setListeners(listeners: any):void;
    /**
    Suspends firing of the named event(s). 
    */
        static suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        static suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        static un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        static unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        static unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
}
declare module Ext.fx.target {
    /**
    This class represents a animation target for a Ext.Component. 
    */
    export class Component extends Ext.fx.target.Target {
    /**
    Creates new Target. 
    */
        constructor(target: Ext.Component|Ext.dom.Element|Ext.draw.sprite.Sprite);
    }
    /**
    This class represents a animation target for a Ext.CompositeElement. 
    */
    export class CompositeElement extends Ext.fx.target.Element {
    /**
    true in this class to identify an object as an instantiated CompositeElement, or subclass thereof. 
    */
        isComposite: boolean;
    /**
    Creates new Target. 
    */
        constructor(target: any);
    }
    /**
    This class represents a animation target for a Ext.CompositeElement, where the
constituent elements support CSS based
    */
    export class CompositeElementCSS extends Ext.fx.target.CompositeElement {
    /**
    Creates new Target. 
    */
        constructor(target: any);
    }
    /**
    This class represents a animation target for a Ext.draw.sprite.Composite. 
    */
    export class CompositeSprite extends Ext.fx.target.Sprite {
    /**
    Creates new Target. 
    */
        constructor(target: Ext.Component|Ext.dom.Element|Ext.draw.sprite.Sprite);
    }
    /**
    This class represents a animation target for an Ext.dom.Element. 
    */
    export class Element extends Ext.fx.target.Target {
    /**
    Creates new Target. 
    */
        constructor(target: Ext.Component|Ext.dom.Element|Ext.draw.sprite.Sprite);
    }
    /**
    This class represents a animation target for an Ext.dom.Element that supports CSS
based animation. 
    */
    export class ElementCSS extends Ext.fx.target.Element {
    /**
    Creates new Target. 
    */
        constructor(target: Ext.Component|Ext.dom.Element|Ext.draw.sprite.Sprite);
    }
    /**
    This class represents an animation target for a Ext.draw.sprite.Sprite. 
    */
    export class Sprite extends Ext.fx.target.Target {
    /**
    Creates new Target. 
    */
        constructor(target: Ext.Component|Ext.dom.Element|Ext.draw.sprite.Sprite);
    }
    /**
    This class specifies a generic target for an animation. 
    */
    export class Target extends Ext.Base {
    /**
    Creates new Target. 
    */
        constructor(target: Ext.Component|Ext.dom.Element|Ext.draw.sprite.Sprite);
    }
}
declare module Ext.grid {
    /**
    Instances of this class encapsulate a position in a grid's row/column coordinate system. 
    */
    export class CellContext extends Ext.Base {
    /**
    The column index in the owning View's leaf column set of the referenced cell. 
    */
        colIdx: number;
    /**
    The grid column which owns the referenced cell.

    */
        column: Ext.grid.column.Column;
    /**
    true in this class to identify an object as an instantiated CellContext, or subclass thereof. 
    */
        isCellContext: boolean;
    /**
    The store record which maps to the referenced cell.

    */
        record: Ext.data.Model;
    /**
    The row number in the store which owns the referenced cell. 
    */
        rowIdx: number;
    /**
    Creates a new CellContext which references a GridView 
    */
        constructor(view: Ext.view.Table);
    /**
    Creates a clone of this CellContext. 
    */
        clone():Ext.grid.CellContext;
    /**
    Returns the cell object referenced at the time of calling. 
    */
        getCell(returnDom: boolean):HTMLElement|Ext.dom.Element;
    /**
    Returns the view node object (the encapsulating element of a data row) referenced at the time of
calling. 
    */
        getNode(returnDom: boolean):HTMLElement|Ext.dom.Element;
    /**
    Returns the row object referenced at the time of calling. 
    */
        getRow(returnDom: boolean):HTMLElement|Ext.dom.Element;
    /**
    Compares this CellContext object to another CellContext to see if they refer to the same cell. 
    */
        isEqual(other: Ext.grid.CellContext):boolean;
    /**
    Binds this cell context to a logical cell defined by the record and column. 
    */
        setPosition(row: number|Ext.data.Model, col: number|Ext.grid.column.Column):Ext.grid.CellContext;
    }
    interface CellEditorConfig extends Ext.EditorConfig {
    }
    /**
    Internal utility class that provides default configuration for cell editing.

    */
    export class CellEditor extends Ext.Editor {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.grid.CellEditorConfig);
    }
    interface ColumnComponentLayoutConfig extends Ext.layout.component.AutoConfig {
    }
    /**
    Component layout for grid column headers which have a title element at the top followed by content.

    */
    export class ColumnComponentLayout extends Ext.layout.component.Auto {
    /**
     
    */
        constructor(config: Ext.grid.ColumnComponentLayoutConfig);
    }
    interface ColumnLayoutConfig extends Ext.layout.container.HBoxConfig {
    }
    /**
    This class is used only by the grid's HeaderContainer docked child. 
    */
    export class ColumnLayout extends Ext.layout.container.HBox {
    /**
     
    */
        constructor(config: Ext.grid.ColumnLayoutConfig);
    }
    /**
    Manages and provides information about a TablePanel's visible leaf columns.

    */
    export class ColumnManager extends Ext.Base {
    /**
     
    */
        constructor(visibleOnly: any, headerCt: any, secondHeaderCt: any);
    /**
    Get the first column. 
    */
        getFirst():Ext.grid.column.Column;
    /**
    If called from a root header, gets a leaf level header by index regardless of what the nesting
structure is. 
    */
        getHeaderAtIndex(index: number):Ext.grid.column.Column;
    /**
    Get a leaf level header by data index regardless of what the nesting
structure is. 
    */
        getHeaderByDataIndex(dataIndex: string):Ext.grid.column.Column;
    /**
    Get a leaf level header by index regardless of what the nesting
structure is. 
    */
        getHeaderById(id: string):Ext.grid.column.Column;
    /**
    If called from a root header, returns the index of a leaf level header regardless of what the nesting
structure is. 
    */
        getHeaderIndex(header: Ext.grid.column.Column):number;
    /**
    Get the last column. 
    */
        getLast():Ext.grid.column.Column;
    /**
    When passed a column index, returns the closet visible column to that. 
    */
        getVisibleHeaderClosestToIndex(index: number):void;
    }
    interface NavigationModelConfig extends Ext.view.NavigationModelConfig {
    }
    /**
    This class listens for key events fired from a GridPanel, and moves the currently focused item
by adding the class fo
    */
    export class NavigationModel extends Ext.view.NavigationModel {
    /**
     
    */
        constructor();
    }
    interface PanelConfig extends Ext.panel.TableConfig {
    }
    /**
    Grids are an excellent way of showing large amounts of tabular data on the client side. 
    */
    export class Panel extends Ext.panel.Table {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.grid.PanelConfig);
    }
    interface RowEditorConfig extends Ext.form.PanelConfig {
    }
    /**
    Internal utility class used to provide row editing functionality. 
    */
    export class RowEditor extends Ext.form.Panel {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.grid.RowEditorConfig);
    /**
    Start editing the specified grid at the specified position. 
    */
        startEdit(record: Ext.data.Model, columnHeader: Ext.data.Model):void;
    }
    interface RowEditorButtonsConfig extends Ext.container.ContainerConfig {
    }
    /**
    Private Container class used by the Ext.grid.RowEditor to hold its buttons.

    */
    export class RowEditorButtons extends Ext.container.Container {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.grid.RowEditorButtonsConfig);
    }
    interface ViewDropZoneConfig extends Ext.view.DropZoneConfig {
    }
    /**
    

    */
    export class ViewDropZone extends Ext.view.DropZone {
    /**
    Creates new DropTarget. 
    */
        constructor(config: Ext.grid.ViewDropZoneConfig);
    }
}
declare module Ext.grid.column {
    interface ActionConfig extends Ext.grid.column.ColumnConfig {
    /**
    The alt text to use for the image element. 
    */
        altText?: string;
    /**
    A function which returns the CSS class to apply to the icon image. 
    */
        getClass?: Function;
    /**
    A function which returns the tooltip string for any row. 
    */
        getTip?: Function;
    /**
    A function called when the icon is clicked. 
    */
        handler?: Function|string;
    /**
    The URL of an image to display as the clickable element in the column. 
    */
        icon?: string;
    /**
    A CSS class to apply to the icon image. 
    */
        iconCls?: string;
    /**
    Prevent grid selection upon click. 
    */
        stopSelection?: boolean;
    }
    /**
    A Grid header type which renders an icon, or a series of icons in a grid cell, and offers a scoped click
handler for 
    */
    export class Action extends Ext.grid.column.Column {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.grid.column.ActionConfig);
    /**
    Disables this ActionColumn's action at the specified index. 
    */
        disableAction(index: number|Ext.grid.column.Action, silent?: boolean):void;
    /**
    Enables this ActionColumn's action at the specified index. 
    */
        enableAction(index: number|Ext.grid.column.Action, silent?: boolean):void;
    }
    interface BooleanConfig extends Ext.grid.column.ColumnConfig {
    /**
    The string returned by the renderer when the column value is falsey (but not undefined). 
    */
        falseText?: string;
    /**
    The string returned by the renderer when the column value is not falsey. 
    */
        trueText?: string;
    /**
    The string returned by the renderer when the column value is undefined. 
    */
        undefinedText?: string;
    }
    /**
    A Column definition class which renders boolean data fields. 
    */
    export class Boolean extends Ext.grid.column.Column {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.grid.column.BooleanConfig);
    }
    interface CheckConfig extends Ext.grid.column.ColumnConfig {
    /**
    Prevent grid selection upon mousedown. 
    */
        stopSelection?: boolean;
    }
    /**
    A Column subclass which renders a checkbox in each column cell which toggles the truthiness of the associated data fi
    */
    export class Check extends Ext.grid.column.Column {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.grid.column.CheckConfig);
    }
    interface ColumnConfig extends Ext.grid.header.ContainerConfig {
    /**
    Sets the alignment of the header and rendered columns. 
    */
        align?: string;
    /**
    True to allow whitespace in this column's cells to wrap, and cause taller column height where
necessary. 
    */
        cellWrap?: boolean;
    /**
    An optional array of sub-column definitions. 
    */
        columns?: any[];
    /**
    The name of the field in the grid's Ext.data.Store's Ext.data.Model definition from
which to draw the column's value. 
    */
        dataIndex?: string;
    /**
    A renderer to be used in conjunction with
RowEditing. 
    */
        editRenderer?: Function|string;
    /**
    An optional xtype or config object for a Field to use for editing. 
    */
        editor?: any;
    /**
    The text to display in empty cells (cells with a value of undefined, null, or ''). 
    */
        emptyCellText?: string;
    /**
    Alias for editor. 
    */
        field?: any;
    /**
    This config accepts a format specification as would be used in a Ext.Template
formatted token. 
    */
        formatter?: string;
    /**
    If the grid uses a Ext.grid.feature.Grouping, this option may be used to disable the header menu
item to group by the
    */
        groupable?: boolean;
    /**
    The header text. 
    */
        header?: string;
    /**
    False to prevent the user from hiding this column. 
    */
        hideable?: boolean;
    /**
    If the grid is configured with enableLocking, or has columns which are
configured with a locked value, this option ma
    */
        lockable?: boolean;
    /**
    True to lock this column in place. 
    */
        locked?: boolean;
    /**
    True to disable the column header menu containing sort/hide options. 
    */
        menuDisabled?: boolean;
    /**
    The text to render in the column visibility selection menu for this column. 
    */
        menuText?: string;
    /**
    This flag indicates that the renderer produces HTML. 
    */
        producesHTML?: boolean;
    /**
    A renderer is an 'interceptor' method which can be used to transform data (value,
appearance, etc.) before it is rend
    */
        renderer?: Function|string;
    /**
    The scope to use when calling the
renderer function.

    */
        scope?: any;
    /**
    A renderer to be used in conjunction with the Summary or
GroupingSummary features. 
    */
        summaryRenderer?: Function|string;
    /**
    A CSS class names to apply to the table cells for this column. 
    */
        tdCls?: string;
    /**
    The header text to be used as innerHTML (html tags are accepted) to display in the Grid. 
    */
        text?: string;
    /**
    A tooltip to display for this column header

    */
        tooltip?: string;
    /**
    The type of tooltip to use. 
    */
        tooltipType?: string;
    /**
    An updater is a method which is used when records are updated, and an existing grid row needs updating. 
    */
        updater?: Function|string;
    /**
    True to indicate that data in this column may take on an unpredictable height, possibly differing from row to row. 
    */
        variableRowHeight?: boolean;
    }
    /**
    This class specifies the definition for a column inside a Ext.grid.Panel. 
    */
    export class Column extends Ext.grid.header.Container {
    /**
    Set in this class to identify, at runtime, instances which are not instances of the
HeaderContainer base class, but a
    */
        isColumn: boolean;
    /**
     
    */
        isHeader: boolean;
    /**
    Element that contains the text in column header.

    */
        textEl: Ext.dom.Element;
    /**
    Element that acts as button for column header dropdown menu.

    */
        triggerEl: Ext.dom.Element;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.grid.column.ColumnConfig);
    /**
    Sizes this Column to fit the max content width. 
    */
        autoSize():void;
    /**
    When defined this will take precedence over the
renderer config. 
    */
        defaultRenderer():void;
    /**
    Retrieves the editing field for editing associated with this header. 
    */
        getEditor(record?: any, defaultField?: any):Ext.form.field.Field|boolean;
    /**
    Returns the index of this column only if this column is a base level Column. 
    */
        getIndex():number;
    /**
    Returns the parameter to sort upon when sorting this header. 
    */
        getSortParam():string;
    /**
    Returns the value of triggerVisible. 
    */
        getTriggerVisible():boolean;
    /**
    Returns the index of this column in the list of visible columns only if this column is a base level Column. 
    */
        getVisibleIndex():number;
    /**
    Determines whether the UI should be allowed to offer an option to hide this column. 
    */
        isHideable():void;
    /**
    Determines whether the UI should be allowed to offer an option to lock or unlock this column. 
    */
        isLockable():void;
    /**
    Determines whether this column is in the locked side of a grid. 
    */
        isLocked():void;
    /**
    Sets the form field to be used for editing. 
    */
        setEditor(field: any):void;
    /**
    Sets the header text for this Column. 
    */
        setText(text: string):void;
    /**
    Sets the value of triggerVisible. 
    */
        setTriggerVisible(triggerVisible: boolean):void;
    }
    interface DateConfig extends Ext.grid.column.ColumnConfig {
    /**
    A formatting string as used by Ext.Date.format to format a Date for this Column. 
    */
        format?: string;
    }
    /**
    A Column definition class which renders a passed date according to the default locale, or a configured
format. 
    */
    export class Date extends Ext.grid.column.Column {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.grid.column.DateConfig);
    }
    interface NumberConfig extends Ext.grid.column.ColumnConfig {
    /**
    A formatting string as used by Ext.util.Format.number to format a numeric value for this Column. 
    */
        format?: string;
    }
    /**
    A Column definition class which renders a numeric data field according to a format string. 
    */
    export class Number extends Ext.grid.column.Column {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.grid.column.NumberConfig);
    }
    interface RowNumbererConfig extends Ext.grid.column.ColumnConfig {
    }
    /**
    A special type of Grid Ext.grid.column.Column that provides automatic
row numbering. 
    */
    export class RowNumberer extends Ext.grid.column.Column {
    /**
    true in this class to identify an object as an instantiated RowNumberer, or subclass thereof. 
    */
        isRowNumberer: boolean;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.grid.column.RowNumbererConfig);
    }
    interface TemplateConfig extends Ext.grid.column.ColumnConfig {
    }
    /**
    A Column definition class which renders a value by processing a Model's
data using a configured
XTemplate. 
    */
    export class Template extends Ext.grid.column.Column {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.grid.column.TemplateConfig);
    }
    interface WidgetConfig extends Ext.grid.column.ColumnConfig {
    /**
    A map of xtype to Ext.Component.ui names to use when using Components in this column. 
    */
        defaultWidgetUI?: any;
    /**
    A function that will be called when a widget is attached to a record. 
    */
        onWidgetAttach?: Function|string;
    /**
    Prevent grid selection upon click on the widget. 
    */
        stopSelection?: boolean;
    /**
    A config object containing an xtype. 
    */
        widget?: any;
    }
    /**
    A widget column is configured with a widget config object which specifies an
xtype to indicate which type of Widget o
    */
    export class Widget extends Ext.grid.column.Column {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.grid.column.WidgetConfig);
    /**
    Returns the value of defaultWidgetUI. 
    */
        getDefaultWidgetUI():any;
    /**
    Sets the value of defaultWidgetUI. 
    */
        setDefaultWidgetUI(defaultWidgetUI: any):void;
    }
}
declare module Ext.grid.feature {
    interface AbstractSummaryConfig extends Ext.grid.feature.FeatureConfig {
    /**
    True to show the summary row. 
    */
        showSummaryRow?: boolean;
    }
    /**
    A small abstract class that contains the shared behaviour for any summary
calculations to be used in the grid.

    */
    export class AbstractSummary extends Ext.grid.feature.Feature {
    /**
     
    */
        constructor(config: Ext.grid.feature.AbstractSummaryConfig);
    /**
    Toggle whether or not to show the summary row. 
    */
        toggleSummaryRow(visible: boolean):void;
    }
    interface FeatureConfig extends Ext.util.ObservableConfig {
    }
    /**
    A feature is a type of plugin that is specific to the Ext.grid.Panel. 
    */
    export class Feature extends Ext.util.Observable {
    /**
    True when feature is disabled. 
    */
        disabled: boolean;
    /**
    Prefix to use when firing events on the view. 
    */
        eventPrefix: string;
    /**
    Selector used to determine when to fire the event with the eventPrefix.

    */
        eventSelector: string;
    /**
    Reference to the grid panel

    */
        grid: Ext.grid.Panel;
    /**
    Most features will expose additional events, some may not and will
need to change this to false. 
    */
        hasFeatureEvent: boolean;
    /**
    true in this class to identify an object as an instantiated Feature, or subclass thereof. 
    */
        isFeature: boolean;
    /**
    Reference to the TableView.

    */
        view: Ext.view.Table;
    /**
     
    */
        constructor(config: Ext.grid.feature.FeatureConfig);
    /**
    Disables the feature. 
    */
        disable():void;
    /**
    Enables the feature. 
    */
        enable():void;
    /**
    Abstract method to be overriden when a feature should add additional
arguments to its event signature. 
    */
        getFireEventArgs(eventName: any, view: any, featureTarget: any, e: any):void;
    /**
    Protected method called during View construction. 
    */
        init(grid: Ext.grid.Panel):void;
    }
    interface GroupStoreConfig extends Ext.util.ObservableConfig {
    }
    /**
    Private record store class which takes the place of the view's data store to provide a grouped
view of the data when 
    */
    export class GroupStore extends Ext.util.Observable {
    /**
     
    */
        constructor(groupingFeature: Ext.grid.feature.GroupStoreConfig, store: Ext.grid.feature.GroupStoreConfig);
    /**
    Get the Record with the specified id. 
    */
        getById(id: any):Ext.data.Model;
    /**
    Get the index within the store of the Record with the passed id. 
    */
        indexOfId(id: string):number;
    /**
    Get the index within the entire dataset. 
    */
        indexOfTotal(record: Ext.data.Model):number;
    }
    interface GroupingConfig extends Ext.grid.feature.FeatureConfig {
    /**
    Set to false to disable collapsing groups from the UI. 
    */
        collapsible?: boolean;
    /**
    Number of pixels to indent per grouping level 
    */
        depthToIndent?: number;
    /**
    True to enable the grouping control in the header menu. 
    */
        enableGroupingMenu?: boolean;
    /**
    True to allow the user to turn off grouping. 
    */
        enableNoGroups?: boolean;
    /**
    Text displayed in the grid header menu for grouping by header. 
    */
        groupByText?: string;
    /**
    A string Template snippet, an array of strings (optionally followed by an object containing Template methods) to be u
    */
        groupHeaderTpl?: string|any[]|Ext.Template;
    /**
    These are grouper objects defined for the feature. 
    */
        groupers?: any[];
    /**
    True to hide the header that is currently grouped. 
    */
        hideGroupedHeader?: boolean;
    /**
    The name of the property which contains the Array of summary objects. 
    */
        remoteRoot?: string;
    /**
    Text displayed in the grid header for enabling/disabling grouping. 
    */
        showGroupsText?: string;
    /**
     
    */
        showSummaryRow?: boolean;
    /**
    True to start all groups collapsed. 
    */
        startCollapsed?: boolean;
    }
    /**
    This feature allows to display the grid rows aggregated into groups as specified by the grouper

underneath. 
    */
    export class Grouping extends Ext.grid.feature.Feature {
    /**
     
    */
        constructor(config: Ext.grid.feature.GroupingConfig);
    /**
    Collapse a group 
    */
        collapse(groupName: string, focus: boolean):void;
    /**
    Collapse all groups 
    */
        collapseAll():void;
    /**
    Expand a group 
    */
        expand(groupName: string, focus: boolean):void;
    /**
    Expand all groups 
    */
        expandAll():void;
    /**
    Returns the group data object for the group to which the passed record belongs if the Store is grouped. 
    */
        getRecordGroup(record: Ext.data.Model):any;
    /**
    Returns true if the named group is expanded. 
    */
        isExpanded(groupName: string):boolean;
    /**
    Toggle whether or not to show the summary row. 
    */
        toggleSummaryRow(visible: boolean):void;
    }
    interface GroupingSummaryConfig extends Ext.grid.feature.GroupingConfig {
    }
    /**
    This feature adds an aggregate summary row at the bottom of each group that is provided
by the Ext.grid.feature.Group
    */
    export class GroupingSummary extends Ext.grid.feature.Grouping {
    /**
     
    */
        constructor(config: Ext.grid.feature.GroupingSummaryConfig);
    }
    interface RowBodyConfig extends Ext.grid.feature.FeatureConfig {
    /**
    Configure as true to put the row expander body before the data row. 
    */
        bodyBefore?: boolean;
    }
    /**
    The rowbody feature enhances the grid's markup to have an additional
tr -> td -> div which spans the entire width of 
    */
    export class RowBody extends Ext.grid.feature.Feature {
    /**
     
    */
        constructor(config: Ext.grid.feature.RowBodyConfig);
    /**
    Provides additional data to the prepareData call within the grid view. 
    */
        getAdditionalData(data: any, idx: number, record: Ext.data.Model, orig: any):any;
    }
    interface SummaryConfig extends Ext.grid.feature.AbstractSummaryConfig {
    /**
    Configure 'top' or 'bottom' top create a fixed summary row either above or below the scrollable table.

    */
        dock?: string;
    }
    /**
    This feature is used to place a summary row at the bottom of the grid. 
    */
    export class Summary extends Ext.grid.feature.AbstractSummary {
    /**
     
    */
        constructor(config: Ext.grid.feature.SummaryConfig);
    }
}
declare module Ext.grid.filters {
    interface FiltersConfig extends Ext.plugin.AbstractConfig {
    /**
    The text for the filters menu. 
    */
        menuFilterText?: string;
    /**
    Defaults to true, including a filter submenu in the default header menu. 
    */
        showMenu?: boolean;
    /**
    Name of the value to be used to store state information.

    */
        stateId?: string;
    }
    /**
    This class is a grid plugin that adds a simple and flexible
presentation for store filters. 
    */
    export class Filters extends Ext.plugin.Abstract {
    /**
    The CSS applied to column headers with active filters. 
    */
        filterCls: string;
    /**
    Instantiates the plugin. 
    */
        constructor(config?: Ext.grid.filters.FiltersConfig);
    /**
    Adds a filter to the collection and creates a store filter if has a value property. 
    */
        addFilter(filters: any):void;
    /**
    Adds filters to the collection. 
    */
        addFilters(filters: any[]):void;
    /**
    Binds a store to this instance. 
    */
        bindStore(store?: Ext.data.AbstractStore|string):void;
    /**
    Binds listeners for this component to the store. 
    */
        bindStoreListeners(store: Ext.data.AbstractStore):void;
    /**
    Turns all filters off. 
    */
        clearFilters():void;
    /**
    Gets the current store instance. 
    */
        getStore():Ext.data.AbstractStore;
    /**
    Gets the listeners to bind to a new store. 
    */
        getStoreListeners(store: Ext.data.Store):any;
    /**
    Checks the plugin's grid for statefulness. 
    */
        isStateful():boolean;
    /**
    Template method, it is called when a new store is bound
to the current instance. 
    */
        onBindStore(store: any, initial: any, propName: any):void;
    /**
    Handler called by the grid 'beforedestroy' event 
    */
        onGridDestroy():void;
    /**
    Template method, it is called when an existing store is unbound
from the current instance. 
    */
        onUnbindStore(store: any):void;
    /**
    Sets the store to the specified store. 
    */
        setStore(store: any):void;
    /**
    Unbinds listeners from this component to the store. 
    */
        unbindStoreListeners(store: Ext.data.AbstractStore):void;
    }
}
declare module Ext.grid.filters.filter {
    interface BaseConfig {
    /**
    Indicates the initial status of the filter (defaults to false). 
    */
        active?: boolean;
    /**
    The Ext.data.Store dataIndex of the field this filter represents. 
    */
        dataIndex?: string;
    /**
    The default configuration options for any menu items created by this filter. 
    */
        itemDefaults?: any;
    /**
    Number of milliseconds to wait after user interaction to fire an update. 
    */
        updateBuffer?: number;
    }
    /**
    Abstract base class for filter implementations.

    */
    export class Base extends Ext.Base {
    /**
    True if this filter is active. 
    */
        active: boolean|boolean;
    /**
    If this property is specified by the target class of this mixin its properties are
used to configure the created Ext.
    */
        factoryConfig: any;
    /**
    The filter configuration menu that will be installed into the filter submenu of a column menu.

    */
        menu: Ext.menu.Menu;
    /**
    The filter type. 
    */
        type: string;
    /**
    Initializes the filter given its configuration. 
    */
        constructor(config: Ext.grid.filters.filter.BaseConfig);
    /**
    Returns the value of itemDefaults. 
    */
        getItemDefaults():any;
    /**
    Returns the value of menuDefaults. 
    */
        getMenuDefaults():any;
    /**
    Returns the value of updateBuffer. 
    */
        getUpdateBuffer():number;
    /**
    Sets the status of the filter and fires the appropriate events. 
    */
        setActive(active: boolean, key: string):void;
    /**
    Sets the value of itemDefaults. 
    */
        setItemDefaults(itemDefaults: any):void;
    /**
    Sets the value of menuDefaults. 
    */
        setMenuDefaults(menuDefaults: any):void;
    /**
    Sets the value of updateBuffer. 
    */
        setUpdateBuffer(updateBuffer: number):void;
    }
    interface BooleanConfig extends Ext.grid.filters.filter.SingleFilterConfig {
    /**
    Set this to null if you do not want either option to be checked by default. 
    */
        defaultValue?: boolean;
    /**
    Defaults to 'No'. 
    */
        noText?: string;
    /**
    Defaults to 'Yes'. 
    */
        yesText?: string;
    }
    /**
    The boolean grid filter allows you to create a filter selection that limits results
to values matching true or false. 
    */
    export class Boolean extends Ext.grid.filters.filter.SingleFilter {
    /**
    Initializes the filter given its configuration. 
    */
        constructor(config: Ext.grid.filters.filter.BooleanConfig);
    }
    interface DateConfig extends Ext.grid.filters.filter.TriFilterConfig {
    /**
    The date format to return when using getValue. 
    */
        dateFormat?: string;
    /**
    Configures field items individually. 
    */
        fields?: any;
    /**
    Allowable date as passed to the Ext.DatePicker
Defaults to undefined.

    */
        maxDate?: Date;
    /**
    Allowable date as passed to the Ext.DatePicker
Defaults to undefined.

    */
        minDate?: Date;
    /**
    Configuration options for the date picker associated with each field. 
    */
        pickerDefaults?: any;
    }
    /**
    The date grid filter allows you to create a filter selection that limits results
to values matching specific date con
    */
    export class Date extends Ext.grid.filters.filter.TriFilter {
    /**
    Initializes the filter given its configuration. 
    */
        constructor(config: Ext.grid.filters.filter.DateConfig);
    /**
    Returns the value of dateFormat. 
    */
        getDateFormat():string;
    /**
    Returns the value of fields. 
    */
        getFields():any;
    /**
    Gets the menu picker associated with the passed field 
    */
        getPicker(item: string):any;
    /**
    Returns the value of pickerDefaults. 
    */
        getPickerDefaults():any;
    /**
    Handler for when the DatePicker for a field fires the 'select' event 
    */
        onMenuSelect(picker: Ext.picker.Date, date: any):void;
    /**
    Sets the value of dateFormat. 
    */
        setDateFormat(dateFormat: string):void;
    /**
    Sets the value of fields. 
    */
        setFields(fields: any):void;
    /**
    Sets the value of pickerDefaults. 
    */
        setPickerDefaults(pickerDefaults: any):void;
    }
    interface ListConfig extends Ext.grid.filters.filter.SingleFilterConfig {
    /**
    The field name for the id of records in this list's store. 
    */
        idField?: string;
    /**
    The field name for the menu item text in the records in this list's store. 
    */
        labelField?: string;
    /**
    The field in the records of the grid's store from which the menu item text should be retrieved. 
    */
        labelIndex?: string;
    /**
    Defaults to true. 
    */
        loadOnShow?: boolean;
    /**
    The text that is displayed while the configured store is loading. 
    */
        loadingText?: string;
    /**
    The data to be used to implicitly create a data store to back this list. 
    */
        options?: any[];
    /**
    Specify true to group all items in this list into a single-select
radio button group. 
    */
        single?: boolean;
    /**
    The Ext.data.Store this list should use as its data source. 
    */
        store?: Ext.data.Store;
    }
    /**
    The list grid filter allows you to create a filter selection that limits results
to values matching an element in a l
    */
    export class List extends Ext.grid.filters.filter.SingleFilter {
    /**
    Initializes the filter given its configuration. 
    */
        constructor(config: Ext.grid.filters.filter.ListConfig);
    }
    interface NumberConfig extends Ext.grid.filters.filter.TriFilterConfig {
    /**
    The empty text to show for each field. 
    */
        emptyText?: string;
    /**
    Configures field items individually. 
    */
        fields?: any;
    }
    /**
    Filter type for number columns. 
    */
    export class Number extends Ext.grid.filters.filter.TriFilter {
    /**
    Initializes the filter given its configuration. 
    */
        constructor(config: Ext.grid.filters.filter.NumberConfig);
    /**
    Returns the value of fields. 
    */
        getFields():any;
    /**
    Sets the value of fields. 
    */
        setFields(fields: any):void;
    }
    interface SingleFilterConfig extends Ext.grid.filters.filter.BaseConfig {
    }
    /**
    This abstract base class is used by grid filters that have a single
store filter.

    */
    export class SingleFilter extends Ext.grid.filters.filter.Base {
    /**
    Initializes the filter given its configuration. 
    */
        constructor(config: Ext.grid.filters.filter.SingleFilterConfig);
    }
    interface StringConfig extends Ext.grid.filters.filter.SingleFilterConfig {
    /**
    The empty text to show for each field. 
    */
        emptyText?: string;
    }
    /**
    The string grid filter allows you to create a filter selection that limits results
to values matching a particular st
    */
    export class String extends Ext.grid.filters.filter.SingleFilter {
    /**
    Initializes the filter given its configuration. 
    */
        constructor(config: Ext.grid.filters.filter.StringConfig);
    }
    interface TriFilterConfig extends Ext.grid.filters.filter.BaseConfig {
    }
    /**
    This abstract base class is used by grid filters that have a three
store filter.

    */
    export class TriFilter extends Ext.grid.filters.filter.Base {
    /**
    Initializes the filter given its configuration. 
    */
        constructor(config: Ext.grid.filters.filter.TriFilterConfig);
    }
}
declare module Ext.grid.header {
    interface ContainerConfig extends Ext.container.ContainerConfig {
    /**
    DOM tabIndex attribute to set on the
active Focusable child of this container when using the "Roaming tabindex"
techn
    */
        activeChildTabIndex?: number;
    /**
    Width of the header if no width or flex is specified. 
    */
        defaultWidth?: number;
    /**
    False to disable column hiding within this grid. 
    */
        enableColumnHide?: boolean;
    /**
    Disable FocusableContainer behavior by default, since we only want it
to be enabled for the root header container (we
    */
        enableFocusableContainer?: boolean;
    /**
    DOM tabIndex attribute to set on
inactive Focusable children of this container when using the "Roaming tabindex"
tech
    */
        inactiveChildTabIndex?: number;
    /**
    Specify as true to constrain column dragging so that a column cannot be dragged into or out of this column. 
    */
        sealed?: boolean;
    /**
    Provides the default sortable state for all Headers within this HeaderContainer. 
    */
        sortable?: boolean;
    }
    /**
    Headercontainer is a docked container (top or bottom only) that holds the
headers (grid columns) of a
grid or tree. 
    */
    export class Container extends Ext.container.Container {
    /**
    True if this HeaderContainer is in fact a group header which contains sub headers.

    */
        isGroupHeader: boolean;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.grid.header.ContainerConfig);
    /**
    Returns the number of grid columns descended from this HeaderContainer. 
    */
        getColumnCount():void;
    /**
    Returns an array of menu CheckItems corresponding to all immediate children
of the passed Container which have been c
    */
        getColumnMenu(headerContainer: any):void;
    /**
    Returns an array of all columns which exist in the grid's View, visible or not. 
    */
        getGridColumns():Ext.grid.column.Column[];
    /**
    Get a leaf level header by index regardless of what the nesting
structure is. 
    */
        getHeaderAtIndex(index: number):void;
    /**
    Returns the index of a leaf level header regardless of what the nesting
structure is. 
    */
        getHeaderIndex(header: Ext.grid.column.Column):number;
    /**
    Returns an array of menu items to be placed into the shared menu
across all headers in this header container. 
    */
        getMenuItems():any[];
    /**
    Gets the full width of all columns that are visible for setting width of tables. 
    */
        getTableWidth():void;
    /**
    Returns an array of the visible columns in the grid. 
    */
        getVisibleGridColumns():Ext.grid.column.Column[];
    /**
    When passed a column index, returns the closet visible column to that. 
    */
        getVisibleHeaderClosestToIndex(index: number):void;
    }
    interface DragZoneConfig extends Ext.dd.DragZoneConfig {
    }
    /**
    

    */
    export class DragZone extends Ext.dd.DragZone {
    /**
    Creates new DragZone. 
    */
        constructor(headerCt: Ext.grid.header.DragZoneConfig);
    }
    interface DropZoneConfig extends Ext.dd.DropZoneConfig {
    }
    /**
    

    */
    export class DropZone extends Ext.dd.DropZone {
    /**
    Creates new DropTarget. 
    */
        constructor(headerCt: Ext.grid.header.DropZoneConfig);
    }
}
declare module Ext.grid.locking {
    interface HeaderContainerConfig extends Ext.grid.header.ContainerConfig {
    }
    /**
    Private class which acts as a HeaderContainer for the Lockable which aggregates all columns
from both sides of the Lo
    */
    export class HeaderContainer extends Ext.grid.header.Container {
    /**
    Creates new Component. 
    */
        constructor(lockable: Ext.grid.locking.HeaderContainerConfig);
    }
    interface LockableConfig {
    /**
    By default, a lockable grid uses an HBox layout to arrange
the two grids (possibly separated by a splitter). 
    */
        layout?: any;
    /**
    Any special configuration options for the locked part of the grid

    */
        lockedGridConfig?: any;
    /**
    A view configuration to be applied to the
locked side of the grid. 
    */
        lockedViewConfig?: any;
    /**
    Any special configuration options for the normal part of the grid

    */
        normalGridConfig?: any;
    /**
    A view configuration to be applied to the
normal/unlocked side of the grid. 
    */
        normalViewConfig?: any;
    /**
    Number of pixels to scroll when scrolling the locked section with mousewheel. 
    */
        scrollDelta?: number;
    /**
    Configure as true to place a resizing splitter between the locked
and unlocked columns. 
    */
        split?: boolean;
    /**
    An array of events that, when fired, should trigger this object to
save its state. 
    */
        stateEvents?: string[];
    /**
    The xtype of the subgrid to specify. 
    */
        subGridXType?: string;
    /**
    Synchronize rowHeight between the normal and
locked grid view. 
    */
        syncRowHeight?: boolean;
    }
    /**
    Lockable is a private mixin which injects lockable behavior into any
TablePanel subclass such as GridPanel or TreePanel. 
    */
    export class Lockable extends Ext.Base {
    /**
    Synchronizes the row heights between the locked and non locked portion of the grid for each
row. 
    */
        syncRowHeights():void;
    }
    /**
    

    */
    export class RowSynchronizer extends Ext.Base {
    /**
     
    */
        constructor(view: any, rowEl: any);
    }
    interface ViewConfig {
    /**
    CSS class that will be added to focused
Component, and removed when Component blurs. 
    */
        focusCls?: string;
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    /**
    DOM tabIndex attribute for this Focusable

    */
        tabIndex?: number;
    }
    /**
    This class is used internally to provide a single interface when using
a locking grid. 
    */
    export class View extends Ext.Base {
    /**
    true for interactive Components, false for static Components. 
    */
        focusable: boolean;
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated LockingView, or subclass thereof. 
    */
        isLockingView: boolean;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
     
    */
        constructor(config: Ext.grid.locking.ViewConfig);
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Template method to do any pre-blur processing. 
    */
        beforeBlur(e: Ext.event.Event):void;
    /**
    Template method to do any pre-focus processing. 
    */
        beforeFocus(e: Ext.event.Event):void;
    /**
    Binds a store to this instance. 
    */
        bindStore(store?: Ext.data.AbstractStore|string):void;
    /**
    Binds listeners for this component to the store. 
    */
        bindStoreListeners(store: Ext.data.AbstractStore):void;
    /**
    Cancel any deferred focus on this component 
    */
        cancelFocus():void;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Try to focus this component. 
    */
        focus():Ext.Component;
    /**
    Returns the focus styling holder element associated with this Focusable. 
    */
        getFocusClsEl():Ext.dom.Element;
    /**
    Returns the focus holder element associated with this Focusable. 
    */
        getFocusEl():Ext.dom.Element;
    /**
    Gets the current store instance. 
    */
        getStore():Ext.data.AbstractStore;
    /**
    Gets the listeners to bind to a new store. 
    */
        getStoreListeners():any;
    /**
    Return the actual tabIndex for this Focusable. 
    */
        getTabIndex():number;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Template method to do any Focusable related initialization that
does not involve event listeners creation. 
    */
        initFocusable():void;
    /**
    Template method to do any event listener initialization for a Focusable. 
    */
        initFocusableEvents():void;
    /**
    Determine if this Focusable can receive focus at this time. 
    */
        isFocusable(deep?: boolean):boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Changes the data store bound to this view and refreshes it. 
    */
        onBindStore(store: Ext.data.Store):void;
    /**
    Called when focus enters this Component's hierarchy 
    */
        onFocusEnter(e: Ext.event.Event):void;
    /**
    Called when focus exits from this Component's hierarchy 
    */
        onFocusLeave(e: Ext.event.Event):void;
    /**
    Template method, it is called when an existing store is unbound
from the current instance. 
    */
        onUnbindStore(store: Ext.data.AbstractStore, initial: boolean):void;
    /**
    Template method to do any post-blur processing. 
    */
        postBlur(e: Ext.event.Event):void;
    /**
    Template method to do any post-focus processing. 
    */
        postFocus(e: Ext.event.Event):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Sets the store to the specified store. 
    */
        setStore(store: any):void;
    /**
    Set the tabIndex property for this Focusable. 
    */
        setTabIndex(newTabIndex: number):void;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Unbinds listeners from this component to the store. 
    */
        unbindStoreListeners(store: Ext.data.AbstractStore):void;
    }
}
declare module Ext.grid.plugin {
    interface BufferedRendererConfig extends Ext.plugin.AbstractConfig {
    /**
    The number of extra rows to render on the leading side of scrolling
outside the numFromEdge buffer as scrolling proce
    */
        leadingBufferZone?: number;
    /**
    The zone which causes new rows to be appended to the view. 
    */
        numFromEdge?: number;
    /**
    This is the time in milliseconds to buffer load requests when the store is a buffered store
and a page required for r
    */
        scrollToLoadBuffer?: number;
    /**
    By default, on detection of a scroll event which brings the end of the rendered table within
numFromEdge rows of the 
    */
        synchronousRender?: boolean;
    /**
    The number of extra rows to render on the trailing side of scrolling
outside the numFromEdge buffer as scrolling proc
    */
        trailingBufferZone?: number;
    }
    /**
    Implements buffered rendering of a grid, allowing users to scroll
through thousands of records without the performanc
    */
    export class BufferedRenderer extends Ext.plugin.Abstract {
    /**
    true in this class to identify an object as an instantiated BufferedRenderer, or subclass thereof. 
    */
        isBufferedRenderer: boolean;
    /**
    Current pixel scroll position of the associated View. 
    */
        position: number;
    /**
    Instantiates the plugin. 
    */
        constructor(config?: Ext.grid.plugin.BufferedRendererConfig);
    }
    interface CellEditingConfig extends Ext.grid.plugin.EditingConfig {
    }
    /**
    The Ext.grid.plugin.CellEditing plugin injects editing at a cell level for a Grid. 
    */
    export class CellEditing extends Ext.grid.plugin.Editing {
    /**
    Instantiates the plugin. 
    */
        constructor(config?: Ext.grid.plugin.CellEditingConfig);
    /**
    Called from the specialkey event of an active editor when a control key is pressed 
    */
        onSpecialKey(ed: Ext.form.field.Field, field: HTMLElement, e: Ext.event.Event):void;
    /**
    Starts editing by position (row/column) 
    */
        startEditByPosition(position: any):void;
    }
    interface ClipboardConfig extends Ext.plugin.AbstractClipboardConfig {
    }
    /**
    This grid plugin adds clipboard support to a grid. 
    */
    export class Clipboard extends Ext.plugin.AbstractClipboard {
    /**
    Instantiates the plugin. 
    */
        constructor(config?: Ext.grid.plugin.ClipboardConfig);
    }
    interface DragDropConfig extends Ext.plugin.AbstractConfig {
    /**
    Set as true to allow the user to hold down the control key at the start of the
drag operation and copy the dragged re
    */
        allowCopy?: boolean;
    /**
    true to register this container with the Scrollmanager for auto scrolling during drag operations. 
    */
        containerScroll?: any;
    /**
    Set as true to copy the records from the source grid to the destination drop
grid. 
    */
        copy?: boolean;
    /**
    A named drag drop group to which this object belongs. 
    */
        ddGroup?: string;
    /**
    The ddGroup to which the DragZone will belong. 
    */
        dragGroup?: string;
    /**
    The text to show while dragging. 
    */
        dragText?: string;
    /**
    A config object to apply to the creation of the DragZone which handles for drag start gestures. 
    */
        dragZone?: any;
    /**
    The ddGroup to which the DropZone will belong. 
    */
        dropGroup?: string;
    /**
    A config object to apply to the creation of the DropZone which handles mouseover and drop gestures. 
    */
        dropZone?: any;
    /**
    false to disallow dragging items from the View. 
    */
        enableDrag?: boolean;
    /**
    false to disallow the View from accepting drop gestures. 
    */
        enableDrop?: boolean;
    }
    /**
    This plugin provides drag and drop functionality for a GridView. 
    */
    export class DragDrop extends Ext.plugin.Abstract {
    /**
    An DragZone which handles mousedown and dragging of records from the grid.

    */
        dragZone: any;
    /**
    An DropZone which handles mouseover and dropping records in any grid which shares the same dropGroup.

    */
        dropZone: any;
    /**
    Instantiates the plugin. 
    */
        constructor(config?: Ext.grid.plugin.DragDropConfig);
    }
    interface EditingConfig extends Ext.plugin.AbstractConfig {
    /**
    The number of clicks on a grid required to display the editor. 
    */
        clicksToEdit?: number;
    /**
    UI for editor fields

    */
        default?: string;
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    /**
    The event which triggers editing. 
    */
        triggerEvent?: string;
    }
    /**
    This class provides an abstract grid editing plugin on selected columns. 
    */
    export class Editing extends Ext.plugin.Abstract {
    /**
    Set to true while the editing plugin is active and an Editor is visible.

    */
        editing: boolean;
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
    Instantiates the plugin. 
    */
        constructor(config?: Ext.grid.plugin.EditingConfig);
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Cancels any active edit that is in progress. 
    */
        cancelEdit():void;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Completes the edit if there is an active edit in progress. 
    */
        completeEdit():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Fires after the grid is reconfigured 
    */
        onReconfigure():void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Starts editing the specified record, using the specified Column definition to define which field is being edited. 
    */
        startEdit(record: Ext.data.Model|number, columnHeader: Ext.grid.column.Column|number):void;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    }
    interface HeaderReordererConfig extends Ext.plugin.AbstractConfig {
    }
    /**
    

    */
    export class HeaderReorderer extends Ext.plugin.Abstract {
    /**
    Instantiates the plugin. 
    */
        constructor(config?: Ext.grid.plugin.HeaderReordererConfig);
    }
    interface HeaderResizerConfig extends Ext.plugin.AbstractConfig {
    /**
    True to resize on the fly rather than using a proxy marker. 
    */
        dynamic?: boolean;
    }
    /**
    Plugin to add header resizing functionality to a HeaderContainer. 
    */
    export class HeaderResizer extends Ext.plugin.Abstract {
    /**
    Instantiates the plugin. 
    */
        constructor(config?: Ext.grid.plugin.HeaderResizerConfig);
    /**
    Returns the value of dynamic. 
    */
        getDynamic():boolean;
    /**
    Sets the value of dynamic. 
    */
        setDynamic(dynamic: boolean):void;
    }
    interface RowEditingConfig extends Ext.grid.plugin.EditingConfig {
    /**
    true to automatically cancel any pending changes when the row editor begins editing a new row. 
    */
        autoCancel?: boolean;
    /**
    The number of clicks to move the row editor to a new row while it is visible and actively editing another row. 
    */
        clicksToMoveEditor?: number;
    /**
    True to show a tooltip that summarizes all validation errors present
in the row editor. 
    */
        errorSummary?: boolean;
    }
    /**
    The Ext.grid.plugin.RowEditing plugin injects editing at a row level for a Grid. 
    */
    export class RowEditing extends Ext.grid.plugin.Editing {
    /**
    Instantiates the plugin. 
    */
        constructor();
    }
    interface RowExpanderConfig extends Ext.plugin.AbstractConfig {
    /**
    Configure as true to put the row expander body before the data row. 
    */
        bodyBefore?: boolean;
    /**
    The width of the row expander column which contains the [+]/[-] icons to toggle row expansion. 
    */
        columnWidth?: number;
    /**
    true to toggle a row between expanded/collapsed when double clicked
(defaults to true). 
    */
        expandOnDblClick?: boolean;
    /**
    true to toggle selected row(s) between expanded/collapsed when the enter
key is pressed (defaults to true). 
    */
        expandOnEnter?: boolean;
    /**
    The width of the Row Expander column header 
    */
        headerWidth?: number;
    /**
    An XTemplate which, when passed a record data object, produces HTML for the expanded row content on the locked side o
    */
        lockedTpl?: Ext.XTemplate;
    /**
    An XTemplate which, when passed a record data object, produces HTML for the expanded row content. 
    */
        rowBodyTpl?: Ext.XTemplate;
    /**
    true to select a row when clicking on the expander icon
(defaults to false). 
    */
        selectRowOnExpand?: boolean;
    }
    /**
    Plugin (ptype = 'rowexpander') that adds the ability to have a Column in a grid which enables
a second row body which
    */
    export class RowExpander extends Ext.plugin.Abstract {
    /**
    Instantiates the plugin. 
    */
        constructor(config?: Ext.grid.plugin.RowExpanderConfig);
    /**
     
    */
        getFeatureConfig(grid: any):any[];
    }
}
declare module Ext.grid.property {
    interface GridConfig extends Ext.grid.PanelConfig {
    /**
    An object containing name/value pairs of custom editor type definitions that allow
the grid to support additional typ
    */
        customEditors?: any;
    /**
    An object containing name/value pairs of custom renderer type definitions that allow
the grid to support custom rende
    */
        customRenderers?: any;
    /**
    True to automatically infer the type based on the initial value passed
for each field. 
    */
        inferTypes?: boolean;
    /**
    Specify the width for the name column. 
    */
        nameColumnWidth?: number|string;
    /**
    The name of the field from the property store to use as the property field name. 
    */
        nameField?: string;
    /**
    An object containing custom property name/display name pairs. 
    */
        propertyNames?: any;
    /**
    A data object to use as the data source of the grid (see setSource for details).

    */
        source?: any;
    /**
    This option allows various configurations to be set for each field in the property grid. 
    */
        sourceConfig?: any;
    /**
    The name of the field from the property store to use as the value field name. 
    */
        valueField?: string;
    }
    /**
    A specialized grid implementation intended to mimic the traditional property grid as typically seen in
development IDEs. 
    */
    export class Grid extends Ext.grid.Panel {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.grid.property.GridConfig);
    /**
    Gets the value of a property. 
    */
        getProperty(prop: string):any;
    /**
    Gets the source data object containing the property data. 
    */
        getSource():any;
    /**
    Removes a property from the grid. 
    */
        removeProperty(prop: string):void;
    /**
    Sets the value of a property. 
    */
        setProperty(prop: string, value: any, create?: boolean):void;
    /**
    Sets the source data object containing the property data. 
    */
        setSource(source: any, sourceConfig?: any):void;
    }
    interface HeaderContainerConfig extends Ext.grid.header.ContainerConfig {
    }
    /**
    A custom HeaderContainer for the Ext.grid.property.Grid. 
    */
    export class HeaderContainer extends Ext.grid.header.Container {
    /**
    Creates new HeaderContainer. 
    */
        constructor(grid: Ext.grid.property.Grid, source: Ext.grid.property.HeaderContainerConfig);
    }
    interface PropertyConfig extends Ext.data.ModelConfig {
    }
    /**
    A specific Ext.data.Model type that represents a name/value pair and is made to work with the
Ext.grid.property.Grid. 
    */
    export class Property extends Ext.data.Model {
    /**
    Creates new property. 
    */
        constructor(config: Ext.grid.property.PropertyConfig);
    }
    interface ReaderConfig extends Ext.data.reader.ReaderConfig {
    }
    /**
    Custom reader for property grid data

    */
    export class Reader extends Ext.data.reader.Reader {
    /**
    Creates new Reader. 
    */
        constructor(config?: Ext.grid.property.ReaderConfig);
    }
    interface StoreConfig extends Ext.data.StoreConfig {
    }
    /**
    A custom Ext.data.Store for the Ext.grid.property.Grid. 
    */
    export class Store extends Ext.data.Store {
    /**
    Creates new property store. 
    */
        constructor(grid: Ext.grid.Panel, source: Ext.grid.property.StoreConfig);
    /**
    Should only be called by the grid. 
    */
        getSource():void;
    /**
    Should only be called by the grid. 
    */
        setSource(dataObject: any):void;
    }
}
declare module Ext.grid.selection {
    /**
    A class which encapsulates a range of cells defining a selection in a grid. 
    */
    export class Cells extends Ext.grid.selection.Selection {
    /**
    This property indicates the this selection represents selected cells. 
    */
        isCells: boolean;
    /**
     
    */
        constructor(view: any);
    /**
    Returns true if the passed cell context is selected. 
    */
        contains(cellContext: Ext.grid.CellContext):boolean;
    /**
     
    */
        getFirstColumnIndex():number;
    /**
     
    */
        getFirstRowIndex():number;
    /**
     
    */
        getLastColumnIndex():number;
    /**
     
    */
        getLastRowIndex():number;
    }
    /**
    A class which encapsulates a range of columns defining a selection in a grid.

    */
    export class Columns extends Ext.grid.selection.Selection {
    /**
    This property indicates the this selection represents selected columns. 
    */
        isColumns: boolean;
    /**
     
    */
        constructor(view: any);
    /**
    Returns true if the passed column is selected. 
    */
        contains(column: Ext.grid.column.Column):boolean;
    /**
    Returns the columns selected. 
    */
        getColumns():Ext.grid.column.Column[];
    /**
    Returns the number of columns selected. 
    */
        getCount():number;
    }
    /**
    A class which encapsulates a range of rows defining a selection in a grid.

    */
    export class Rows extends Ext.grid.selection.Selection {
    /**
    This property indicates the this selection represents selected rows. 
    */
        isRows: boolean;
    /**
     
    */
        constructor(view: any);
    /**
    This method is called to indicate the start of multiple changes to the selected row set. 
    */
        beginUpdate():void;
    /**
    Returns true if the passed record is selected. 
    */
        contains(record: Ext.data.Model):boolean;
    /**
    This method is called after modifications are complete on a selected row set. 
    */
        endUpdate():void;
    /**
    Returns the number of records selected 
    */
        getCount():number;
    /**
    Returns the records selected. 
    */
        getRecords():Ext.data.Model[];
    }
    /**
    Base class for selections which may be of three subtypes:


Cells A rectangular range of cells defined by a start
rec
    */
    export class Selection extends Ext.Base {
    /**
     
    */
        constructor(view: any);
    /**
    Clones this selection object. 
    */
        clone():Ext.grid.selection.Selection;
    /**
    Calls the passed function for each selected cell from top left to bottom right
iterating over columns within each row. 
    */
        eachCell(fn: (context: Ext.grid.CellContext, columnIndex: number, rowIndex: number) => any, scope?: any):void;
    /**
    Calls the passed function for each selected column from left to right. 
    */
        eachColumn(fn: (column: Ext.grid.column.Column, columnIndex: number) => any, scope?: any):void;
    /**
    Calls the passed function for each selected record. 
    */
        eachRow(fn: (record: Ext.data.Model) => any, scope?: any):void;
    }
    interface SpreadsheetModelConfig extends Ext.selection.ModelConfig {
    /**
    Set to true to enable selection of individual cells or a single rectangular
range of cells. 
    */
        cellSelect?: boolean;
    /**
    The index at which to insert the checkbox column. 
    */
        checkboxColumnIndex?: number|string;
    /**
    Width of checkbox column. 
    */
        checkboxHeaderWidth?: number|string;
    /**
    [checkboxSelect=false]
Enables selection of the row via clicking on checkbox. 
    */
        checkboxSelect?: boolean;
    /**
    Set to true to enable selection of columns. 
    */
        columnSelect?: boolean;
    /**
    Set to true to enables cell range selection by cell dragging. 
    */
        dragSelect?: boolean;
    /**
    Width of row numbering column. 
    */
        rowNumbererHeaderWidth?: number|string;
    /**
    Set to true to enable selection of rows by clicking on a row number column. 
    */
        rowSelect?: boolean;
    /**
    Pass an instance of one of the subclasses of Ext.grid.selection.Selection.

    */
        selected?: Ext.grid.selection.Selection;
    /**
    Configure as false to not display the header checkbox at the top of the checkbox column
when checkboxSelect is set. 
    */
        showHeaderCheckbox?: boolean;
    }
    /**
    A selection model for grids which allows you to select data in
a spreadsheet-like manner. 
    */
    export class SpreadsheetModel extends Ext.selection.Model {
    /**
    Deselects a column. 
    */
        deselectColumn(column: Ext.grid.column.Column, suppressEvent?: boolean):void;
    /**
    Returns the value of cellSelect. 
    */
        getCellSelect():boolean;
    /**
    Retrieve a configuration to be used in a HeaderContainer. 
    */
        getCheckboxHeaderConfig():void;
    /**
    Returns the value of columnSelect. 
    */
        getColumnSelect():boolean;
    /**
    Returns the value of dragSelect. 
    */
        getDragSelect():boolean;
    /**
    Returns the value of rowSelect. 
    */
        getRowSelect():boolean;
    /**
    Returns the value of selected. 
    */
        getSelected():Ext.grid.selection.Selection;
    /**
    This method allows programmatic selection of the cell range. 
    */
        selectCells(rangeStart: any, rangeEnd: any, suppressEvent?: boolean):void;
    /**
    Selects a column. 
    */
        selectColumn(column: Ext.grid.column.Column, keepSelection?: boolean, suppressEvent?: boolean):void;
    /**
    Select one or more rows. 
    */
        selectRows(rows: any, keepSelection?: boolean, suppressEvent?: boolean):void;
    /**
    Sets the value of cellSelect. 
    */
        setCellSelect(cellSelect: boolean):void;
    /**
    Sets the value of columnSelect. 
    */
        setColumnSelect(columnSelect: boolean):void;
    /**
    Sets the value of dragSelect. 
    */
        setDragSelect(dragSelect: boolean):void;
    /**
    Sets the value of rowSelect. 
    */
        setRowSelect(rowSelect: boolean):void;
    /**
    Sets the value of selected. 
    */
        setSelected(selected: Ext.grid.selection.Selection):void;
    }
}
declare module Ext.layout {
    /**
    Manages context information during a layout. 
    */
    export class Context extends Ext.Base {
    /**
    List of layouts to perform.

    */
        layoutQueue: Ext.util.Queue;
    /**
    One of these values:


0 - Before run
1 - Running
2 - Run complete 
    */
        state: number;
    /**
     
    */
        constructor(config: any);
    /**
    Flushes any pending writes to the DOM by calling each ContextItem in the flushQueue. 
    */
        flush():void;
    /**
    Returns the ContextItem for a component. 
    */
        getCmp(cmp: Ext.Component):void;
    /**
    Returns the ContextItem for an element. 
    */
        getEl(parent: Ext.layout.ContextItem, el: Ext.dom.Element):void;
    /**
    Invalidates one or more components' layouts (component and container). 
    */
        invalidate(components: Ext.Component|any[], full: boolean):void;
    /**
    Removes the ContextItem for an element from the cache and from the parent's
"children" array. 
    */
        removeEl(parent: Ext.layout.ContextItem, el: Ext.dom.Element):void;
    /**
    Resets the given layout object. 
    */
        resetLayout(layout: any, ownerContext: any, firstTime: any):void;
    /**
    Runs the layout calculations. 
    */
        run():boolean;
    /**
    Performs one layout cycle by calling each layout in the layout queue. 
    */
        runCycle():boolean;
    /**
    Set the size of a component, element or composite or an array of components or elements. 
    */
        setItemSize(item: Ext.Component|Ext.Component[]|Ext.dom.Element|Ext.dom.Element[]|Ext.dom.CompositeElement, width: number, height: number):void;
    }
    /**
    This class manages state information for a component or element during a layout. 
    */
    export class ContextItem extends Ext.Base {
    /**
    State variables that are cleared when invalidated. 
    */
        state: any;
    /**
    True if this item wraps a Component (rather than an Element). 
    */
        wrapsComponent: boolean;
    /**
     
    */
        constructor(config: any);
    /**
    Registers a layout in the block list for the given property. 
    */
        block(layout: Ext.layout.Layout, propName: string):void;
    /**
    clears the margin cache so that marginInfo get re-read from the dom on the next call to getMarginInfo()
This is neede
    */
        clearMarginCache():void;
    /**
    Registers a layout in the DOM block list for the given property. 
    */
        domBlock(layout: Ext.layout.Layout, propName: string):void;
    /**
    Flushes any updates in the dirty collection to the DOM. 
    */
        flush():void;
    /**
    Gets the border information for the element as an object with left, top, right and
bottom properties holding border s
    */
        getBorderInfo():any;
    /**
    Gets a property of this object if it is correct in the DOM. 
    */
        getDomProp(propName: string):any;
    /**
    Returns the context item for an owned element. 
    */
        getEl(nameOrEl: string|Ext.dom.Element, owner?: Ext.layout.container.Container|Ext.Component):Ext.layout.ContextItem;
    /**
    Gets the "frame" information for the element as an object with left, top, right and
bottom properties holding border+
    */
        getFrameInfo():any;
    /**
    Gets the margin information for the element as an object with left, top, right and
bottom properties holding margin s
    */
        getMarginInfo():any;
    /**
    Gets the padding information for the element as an object with left, top, right and
bottom properties holding padding
    */
        getPaddingInfo():any;
    /**
    Gets a property of this object. 
    */
        getProp(propName: string):any;
    /**
    Returns a style for this item. 
    */
        getStyle(styleName: string):any;
    /**
    Returns styles for this item. 
    */
        getStyles(styleNames: string[], altNames?: string[]):any;
    /**
    Returns true if the given property is correct in the DOM. 
    */
        hasDomProp(propName: string):boolean;
    /**
    Returns true if the given property has been set. 
    */
        hasProp(propName: string):boolean;
    /**
    Invalidates the component associated with this item. 
    */
        invalidate(options: any):void;
    /**
    Recovers a property value from the last computation and restores its value and
dirty state. 
    */
        recoverProp(propName: string, oldProps: any, oldDirty: any):void;
    /**
    Removes a cached ContextItem that was created using getEl. 
    */
        removeEl(nameOrEl: string|Ext.dom.Element, owner?: Ext.layout.container.Container|Ext.Component):void;
    /**
    Queue the setting of a DOM attribute on this ContextItem's target when next flushed. 
    */
        setAttribute(name: any, value: any):void;
    /**
    Sets the contentHeight property. 
    */
        setContentHeight(height: any, measured: any):void;
    /**
    Sets the contentWidth and contentHeight properties. 
    */
        setContentSize(width: any, height: any, measured: any):void;
    /**
    Sets the contentWidth property. 
    */
        setContentWidth(width: any, measured: any):void;
    /**
    Sets the height and constrains the height to min/maxHeight range. 
    */
        setHeight(height: number, dirty?: boolean):number;
    /**
    Sets a property value. 
    */
        setProp(propName: string, value: any, dirty: boolean):number;
    /**
    Sets the height and constrains the width to min/maxWidth range. 
    */
        setWidth(width: number, dirty?: boolean):number;
    }
    /**
    This class is the base for all layout types: component and container.

    */
    export class Layout extends Ext.Base {
    /**
    Used only during a layout run, this value indicates that a
layout has finished its calculations. 
    */
        done: boolean;
    /**
    If this property is specified by the target class of this mixin its properties are
used to configure the created Ext.
    */
        factoryConfig: any;
    /**
    true in this class to identify an object as an instantiated Layout, or subclass thereof. 
    */
        isLayout: boolean;
    /**
     
    */
        constructor(config: any);
    /**
    Removes layout's itemCls and owning Container's itemCls. 
    */
        afterRemove(item: any):void;
    /**
    Called before any calculation cycles to prepare for layout. 
    */
        beginLayout(ownerContext: Ext.layout.ContextItem):void;
    /**
    Called before any calculation cycles to reset DOM values and prepare for calculation. 
    */
        beginLayoutCycle(ownerContext: Ext.layout.ContextItem):void;
    /**
    Called to perform the calculations for this layout. 
    */
        calculate(ownerContext: Ext.layout.ContextItem):void;
    /**
    This method (if implemented) is called at the end of the cycle in which this layout
completes (by not setting done to
    */
        completeLayout(ownerContext: Ext.layout.ContextItem):void;
    /**
    Called before an item is rendered to allow the layout to configure the item. 
    */
        configureItem(item: Ext.Component):void;
    /**
    This method (if implemented) is called after all layouts have completed. 
    */
        finalizeLayout(ownerContext: Ext.layout.ContextItem):void;
    /**
    This method is called after all layouts are complete and their calculations flushed
to the DOM. 
    */
        finishedLayout(ownerContext: Ext.layout.ContextItem):void;
    /**
    Returns an object describing how this layout manages the size of the given component. 
    */
        getItemSizePolicy(item: Ext.Component):Ext.layout.SizePolicy;
    /**
    Returns the set of items to layout (empty by default). 
    */
        getLayoutItems():void;
    /**
    A one-time initialization method called just before rendering. 
    */
        initLayout():void;
    /**
    Validates item is in the proper place in the dom. 
    */
        isValidParent(item: any, target: any, position: any):void;
    /**
    This method (if implemented) is called after all layouts are finished, and all have
a lastComponentSize cached. 
    */
        notifyOwner(ownerContext: Ext.layout.ContextItem):void;
    /**
    This method is called when a child item changes in some way. 
    */
        onContentChange(child: Ext.Component):boolean;
    /**
    Iterates over all passed items, ensuring they are rendered. 
    */
        renderItems(items: any, target: any):void;
    }
    /**
    This class describes a size determination strategy or algorithm used by the layout
system. 
    */
    export class SizeModel extends Ext.Base {
    /**
    True if the size is either natural or shrinkWrap, otherwise false.

    */
        auto: boolean;
    /**
    True if the size is calculated by the ownerLayout. 
    */
        calculated: boolean;
    /**
    True if the size is calculated by the ownerLayout based on a configured size. 
    */
        calculatedFromConfigured: boolean;
    /**
    True if the size is calculated by the ownerLayout based on natural size model
results. 
    */
        calculatedFromNatural: boolean;
    /**
    True if the size is calculated by the ownerLayout based on shrinkWrap size model
results. 
    */
        calculatedFromShrinkWrap: boolean;
    /**
    True if the size is configured (e.g., by a width or minWidth). 
    */
        configured: boolean;
    /**
    True if the size is constrained by a maxWidth or maxHeight configuration. 
    */
        constrainedMax: boolean;
    /**
    True if the size is constrained by a minWidth or minHeight configuration. 
    */
        constrainedMin: boolean;
    /**
    True if the size is either calculated or configured, otherwise false.

    */
        fixed: boolean;
    /**
    The name of this size model (e.g., "calculated").

    */
        name: string;
    /**
    An object with the config property names that determine the
size. 
    */
        names: any;
    /**
    True if the size is determined by CSS and not by content. 
    */
        natural: boolean;
    /**
    The 0-based ordinal for this SizeModel instance.

    */
        ordinal: number;
    /**
    An array of objects indexed by the ordinal of a height SizeModel on
a width SizeModel to yield an object describing b
    */
        pairsByHeightOrdinal: any[];
    /**
    True if the size is determined by content irrespective of the container box. 
    */
        shrinkWrap: boolean;
    /**
     
    */
        constructor(config: any);
    }
    /**
    This class describes how a layout will interact with a component it manages. 
    */
    export class SizePolicy {
    /**
    Indicates that the height of the component is consumed.

    */
        readsHeight: boolean;
    /**
    Indicates that the width of the component is consumed.

    */
        readsWidth: boolean;
    /**
    Indicates that the height of the component will be set (i.e., calculated).

    */
        setsHeight: boolean;
    /**
    Indicates that the width of the component will be set (i.e., calculated).

    */
        setsWidth: boolean;
    }
}
declare module Ext.layout.component {
    interface AutoConfig {
    /**
    When publishing height of an auto Component, it is usually not written to the DOM. 
    */
        setHeightInDom?: boolean;
    /**
    When publishing width of an auto Component, it is usually not written to the DOM. 
    */
        setWidthInDom?: boolean;
    }
    /**
    The class is the default component layout for Ext.Component when no explicit
componentLayout is configured. 
    */
    export class Auto extends Ext.layout.component.Component {
    /**
     
    */
        constructor(config: Ext.layout.component.AutoConfig);
    }
    interface BodyConfig extends Ext.layout.component.AutoConfig {
    }
    /**
    Component layout for components which maintain an inner body element which must be resized to synchronize with the
Co
    */
    export class Body extends Ext.layout.component.Auto {
    /**
     
    */
        constructor(config: Ext.layout.component.BodyConfig);
    }
    interface BoundListConfig extends Ext.layout.component.AutoConfig {
    }
    /**
    Component layout for Ext.view.BoundList.

    */
    export class BoundList extends Ext.layout.component.Auto {
    /**
     
    */
        constructor(config: Ext.layout.component.BoundListConfig);
    }
    /**
    This class is intended to be extended or created via the layout
configuration property. 
    */
    export class Component extends Ext.layout.Layout {
    /**
     
    */
        constructor(config: any);
    /**
    Returns the element into which rendering must take place. 
    */
        getRenderTarget():Ext.dom.Element;
    /**
    Returns the owner component's resize element. 
    */
        getTarget():Ext.dom.Element;
    }
    /**
    This ComponentLayout handles docking for Panels. 
    */
    export class Dock extends Ext.layout.component.Component {
    /**
     
    */
        constructor(config: any);
    /**
    Retrieve an ordered and/or filtered array of all docked Components. 
    */
        getDockedItems(order?: string, beforeBody?: boolean):Ext.Component[];
    /**
    The default weighting of docked items produces this arrangement:

 +--------------------------------------------+
 | 
    */
        invalidateAxes(ownerContext: any, horz: any, vert: any):void;
    }
    interface FieldSetConfig extends Ext.layout.component.BodyConfig {
    }
    /**
    Component layout for Ext.form.FieldSet components

    */
    export class FieldSet extends Ext.layout.component.Body {
    /**
     
    */
        constructor(config: Ext.layout.component.FieldSetConfig);
    }
    interface ProgressBarConfig extends Ext.layout.component.AutoConfig {
    }
    /**
    

    */
    export class ProgressBar extends Ext.layout.component.Auto {
    /**
     
    */
        constructor(config: Ext.layout.component.ProgressBarConfig);
    }
}
declare module Ext.layout.component.field {
    interface FieldContainerConfig extends Ext.layout.component.AutoConfig {
    }
    /**
    

    */
    export class FieldContainer extends Ext.layout.component.Auto {
    /**
     
    */
        constructor(config: Ext.layout.component.field.FieldContainerConfig);
    }
    interface HtmlEditorConfig extends Ext.layout.component.field.FieldContainerConfig {
    }
    /**
    Layout class for Ext.form.field.HtmlEditor fields. 
    */
    export class HtmlEditor extends Ext.layout.component.field.FieldContainer {
    /**
     
    */
        constructor(config: Ext.layout.component.field.HtmlEditorConfig);
    }
}
declare module Ext.layout.container {
    interface AbsoluteConfig extends Ext.layout.container.AnchorConfig {
    /**
    True indicates that changes to one item in this layout do not effect the layout in
general. 
    */
        ignoreOnContentChange?: boolean;
    }
    /**
    This is a layout that inherits the anchoring of Ext.layout.container.Anchor and adds the
ability for x/y positioning 
    */
    export class Absolute extends Ext.layout.container.Anchor {
    /**
     
    */
        constructor();
    }
    interface AccordionConfig extends Ext.layout.container.VBoxConfig {
    /**
    Only valid when multi is false and animate is false. 
    */
        activeOnTop?: boolean;
    /**
    True to slide the contained panels open and closed during expand/collapse using animation, false to open and
close di
    */
        animate?: boolean;
    /**
    Child Panels have their width actively managed to fit within the accordion's width.

    */
        autoWidth?: boolean;
    /**
    True to make sure the collapse/expand toggle button always renders first (to the left of) any other tools
in the cont
    */
        collapseFirst?: boolean;
    /**
    True to adjust the active item's height to fill the available space in the container, false to use the
item's current
    */
        fill?: boolean;
    /**
    True to hide the contained Panels' collapse/expand toggle buttons, false to display them. 
    */
        hideCollapseTool?: boolean;
    /**
    Set to true to enable multiple accordion items to be open at once. 
    */
        multi?: boolean;
    /**
    True to allow expand/collapse of each contained panel by clicking anywhere on the title bar, false to allow
expand/co
    */
        titleCollapse?: boolean;
    }
    /**
    This is a layout that manages multiple Panels in an expandable accordion style such that by default only
one Panel ca
    */
    export class Accordion extends Ext.layout.container.VBox {
    /**
     
    */
        constructor();
    }
    interface AnchorConfig extends Ext.layout.container.AutoConfig {
    /**
    This configuration option is to be applied to child items of a container managed
by an Anchor Layout. 
    */
        anchor?: string;
    /**
    Default anchor for all child container items applied if no anchor or specific width is set on the child item. 
    */
        defaultAnchor?: string;
    }
    /**
    This is a layout that enables anchoring of contained elements relative to the container's dimensions. 
    */
    export class Anchor extends Ext.layout.container.Auto {
    /**
     
    */
        constructor();
    }
    interface AutoConfig extends Ext.layout.container.ContainerConfig {
    /**
    Set to true to leave space for a vertical scrollbar (if the OS shows space-consuming scrollbars) regardless
of whethe
    */
        reserveScrollbar?: boolean;
    }
    /**
    The AutoLayout is the default layout manager delegated by Ext.container.Container to
render any child Components when
    */
    export class Auto extends Ext.layout.container.Container {
    /**
    true to rerun the layout if scrollbars are needed. 
    */
        manageOverflow: boolean;
    /**
    indicates that this layout will correct cross browser padding differences when the
container has overflow. 
    */
        managePadding: boolean;
    /**
     
    */
        constructor();
    /**
    Handles overflow processing for a container. 
    */
        calculateOverflow(ownerContext: Ext.layout.ContextItem):void;
    /**
    Returns the overflow-x style of the render target. 
    */
        getOverflowXStyle(ownerContext: Ext.layout.ContextItem):string;
    /**
    Returns the overflow-y style of the render target. 
    */
        getOverflowYStyle(ownerContext: Ext.layout.ContextItem):string;
    /**
    This method sets the height and/or width of the outerCt/innerCt to adjust for the
following browser-specific issues:

    */
        setCtSizeIfNeeded(ownerContext: Ext.layout.ContextItem, containerSize: any):void;
    }
    interface BorderConfig extends Ext.layout.container.ContainerConfig {
    /**
    Sets the padding to be applied to all child items managed by this layout. 
    */
        padding?: any;
    /**
    The default weights to assign to regions in the border layout. 
    */
        regionWeights?: any;
    /**
    This configuration option is to be applied to the child items managed by this layout. 
    */
        split?: boolean|Ext.resizer.BorderSplitter;
    /**
    This configuration option is to be applied to the child items managed by this layout and
is used in conjunction with 
    */
        splitterResize?: boolean;
    }
    /**
    This is a multi-pane, application-oriented UI layout style that supports multiple nested panels, automatic bars
betwe
    */
    export class Border extends Ext.layout.container.Container {
    /**
     
    */
        constructor();
    }
    interface BoxConfig extends Ext.layout.container.ContainerConfig {
    /**
    Controls how the child items of the container are aligned. 
    */
        align?: string;
    /**
    The Math method
to use for rounding fractional pixels when align:middle is used. 
    */
        alignRoundingMethod?: any;
    /**
    Limits the size of aligned components to the size of the container
under certain circumstances. 
    */
        constrainAlign?: boolean;
    /**
    This flag can be set to false to ignore the split config on box items. 
    */
        enableSplitters?: boolean;
    /**
    This configuration option is to be applied to child items of the container
managed by this layout. 
    */
        flex?: number;
    /**
    An overflow handler or config object for an overflow handler. 
    */
        overflowHandler?: string|Ext.layout.container.boxOverflow.None;
    /**
    Controls how the child items of the container are packed together. 
    */
        pack?: string;
    /**
    Sets the padding to be applied to all child items managed by this layout. 
    */
        padding?: string;
    /**
    Allows stretchMax calculation to take into account the max perpendicular size
(height for HBox layout and width for V
    */
        stretchMaxPartner?: string|Ext.Component;
    /**
    Set to true to switch the layout to vbox. 
    */
        vertical?: boolean;
    }
    /**
    Base Class for HBoxLayout and VBoxLayout Classes. 
    */
    export class Box extends Ext.layout.container.Container {
    /**
     
    */
        constructor(config: Ext.layout.container.BoxConfig);
    /**
    This method is called to (re)cache our understanding of flexes. 
    */
        cacheFlexes(ownerContext: any):void;
    /**
    Returns the value of align. 
    */
        getAlign():string;
    /**
    Returns the value of alignRoundingMethod. 
    */
        getAlignRoundingMethod():any;
    /**
    Returns the value of constrainAlign. 
    */
        getConstrainAlign():boolean;
    /**
    Returns the value of enableSplitters. 
    */
        getEnableSplitters():boolean;
    /**
    Returns the value of overflowHandler. 
    */
        getOverflowHandler():string|Ext.layout.container.boxOverflow.None;
    /**
    Returns the value of pack. 
    */
        getPack():string;
    /**
    Returns the value of padding. 
    */
        getPadding():string;
    /**
    Returns the value of stretchMaxPartner. 
    */
        getStretchMaxPartner():string|Ext.Component;
    /**
    Returns the value of vertical. 
    */
        getVertical():boolean;
    /**
    Sets the value of align. 
    */
        setAlign(align: string):void;
    /**
    Sets the value of alignRoundingMethod. 
    */
        setAlignRoundingMethod(alignRoundingMethod: any):void;
    /**
    Sets the value of constrainAlign. 
    */
        setConstrainAlign(constrainAlign: boolean):void;
    /**
    Sets the value of enableSplitters. 
    */
        setEnableSplitters(enableSplitters: boolean):void;
    /**
    Sets the value of overflowHandler. 
    */
        setOverflowHandler(overflowHandler: string|Ext.layout.container.boxOverflow.None):void;
    /**
    Sets the value of pack. 
    */
        setPack(pack: string):void;
    /**
    Sets the value of padding. 
    */
        setPadding(padding: string):void;
    /**
    Sets the value of stretchMaxPartner. 
    */
        setStretchMaxPartner(stretchMaxPartner: string|Ext.Component):void;
    /**
    Sets the value of vertical. 
    */
        setVertical(vertical: boolean):void;
    }
    interface CardConfig extends Ext.layout.container.FitConfig {
    /**
    True to render each contained item at the time it becomes active, false to render all contained items
as soon as the 
    */
        deferredRender?: boolean;
    }
    /**
    This layout manages multiple child Components, each fitted to the Container, where only a single child Component can 
    */
    export class Card extends Ext.layout.container.Fit {
    /**
     
    */
        constructor();
    /**
    Return the active (visible) component in the layout. 
    */
        getActiveItem():Ext.Component;
    /**
    Return the active (visible) component in the layout to the next card 
    */
        getNext():Ext.Component;
    /**
    Return the active (visible) component in the layout to the previous card 
    */
        getPrev():Ext.Component;
    /**
    Sets the active (visible) component in the layout to the next card 
    */
        next():Ext.Component;
    /**
    Sets the active (visible) component in the layout to the previous card 
    */
        prev():Ext.Component;
    /**
    Makes the given card active. 
    */
        setActiveItem(newCard: Ext.Component|number|string):Ext.Component;
    }
    interface CenterConfig extends Ext.layout.container.FitConfig {
    }
    /**
    This layout manager is used to center contents within a container. 
    */
    export class Center extends Ext.layout.container.Fit {
    /**
     
    */
        constructor();
    }
    interface CheckboxGroupConfig extends Ext.layout.container.ContainerConfig {
    /**
    By default,  CheckboxGroup allocates all available space to the configured columns meaning that
column are evenly spa
    */
        autoFlex?: boolean;
    }
    /**
    This layout implements the column arrangement for Ext.form.CheckboxGroup and Ext.form.RadioGroup. 
    */
    export class CheckboxGroup extends Ext.layout.container.Container {
    /**
     
    */
        constructor();
    }
    interface ColumnConfig extends Ext.layout.container.AutoConfig {
    }
    /**
    This is the layout style of choice for creating structural layouts in a multi-column format where the width of each
c
    */
    export class Column extends Ext.layout.container.Auto {
    /**
     
    */
        constructor();
    }
    interface ColumnSplitterConfig extends Ext.resizer.SplitterConfig {
    }
    /**
    

    */
    export class ColumnSplitter extends Ext.resizer.Splitter {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.layout.container.ColumnSplitterConfig);
    }
    interface ColumnSplitterTrackerConfig extends Ext.resizer.SplitterTrackerConfig {
    }
    /**
    

    */
    export class ColumnSplitterTracker extends Ext.resizer.SplitterTracker {
    }
    interface ContainerConfig {
    /**
    The canonical form of childEls is an object keyed by child's property name
with values that are objects with the foll
    */
        childEls?: any;
    /**
    An optional extra CSS class that will be added to the container. 
    */
        itemCls?: string;
    }
    /**
    This class is intended to be extended or created via the layout
configuration property. 
    */
    export class Container extends Ext.layout.Layout {
    /**
     
    */
        constructor();
    /**
    Returns the value of childEls. 
    */
        getChildEls():any;
    /**
    Returns the container size (that of the target). 
    */
        getContainerSize(ownerContext: Ext.layout.ContextItem, inDom?: boolean):any;
    /**
    Returns the element into which extra functional DOM elements can be inserted. 
    */
        getElementTarget():Ext.dom.Element;
    /**
    Returns the element into which rendering must take place. 
    */
        getRenderTarget():Ext.dom.Element;
    /**
    Returns all items that are rendered 
    */
        getRenderedItems():any[];
    /**
    Returns the owner component's resize element. 
    */
        getTarget():Ext.dom.Element;
    /**
    Returns all items that are both rendered and visible 
    */
        getVisibleItems():any[];
    /**
    Sets the value of childEls. 
    */
        setChildEls(childEls: any):void;
    }
    interface DashboardConfig extends Ext.layout.container.ColumnConfig {
    }
    /**
    This layout extends Ext.layout.container.Column and adds splitters between adjacent
columns allowing the user to resi
    */
    export class Dashboard extends Ext.layout.container.Column {
    /**
     
    */
        constructor();
    }
    interface EditorConfig extends Ext.layout.container.ContainerConfig {
    }
    /**
    Component layout for editors

    */
    export class Editor extends Ext.layout.container.Container {
    /**
     
    */
        constructor();
    }
    interface FitConfig extends Ext.layout.container.ContainerConfig {
    }
    /**
    This is a base class for layouts that contain a single item that automatically expands to fill the layout's
container. 
    */
    export class Fit extends Ext.layout.container.Container {
    /**
     
    */
        constructor();
    }
    interface FormConfig extends Ext.layout.container.AutoConfig {
    /**
    The amount of space, in pixels, to use between the items. 
    */
        itemSpacing?: number;
    /**
    The width of the labels. 
    */
        labelWidth?: number|string;
    }
    /**
    This is a layout that will render form Fields, one under the other all stretched to the Container width. 
    */
    export class Form extends Ext.layout.container.Auto {
    /**
     
    */
        constructor();
    }
    interface HBoxConfig extends Ext.layout.container.BoxConfig {
    }
    /**
    A layout that arranges items horizontally across a Container. 
    */
    export class HBox extends Ext.layout.container.Box {
    /**
     
    */
        constructor(config: Ext.layout.container.HBoxConfig);
    }
    interface SegmentedButtonConfig extends Ext.layout.container.ContainerConfig {
    }
    /**
    This class is used internally to manage the layout of Ext.button.Segmented.

    */
    export class SegmentedButton extends Ext.layout.container.Container {
    /**
     
    */
        constructor();
    }
    interface TableConfig extends Ext.layout.container.ContainerConfig {
    /**
    The total number of columns to create in the table for this layout. 
    */
        columns?: number;
    /**
    An object containing properties which are added to the DomHelper specification used to
create the layout's &lt;table&
    */
        tableAttrs?: any;
    /**
    An object containing properties which are added to the DomHelper specification used to
create the layout's &lt;td&gt;
    */
        tdAttrs?: any;
    /**
    An object containing properties which are added to the DomHelper specification used to
create the layout's &lt;tr&gt;
    */
        trAttrs?: any;
    }
    /**
    This layout allows you to easily render content into an HTML table. 
    */
    export class Table extends Ext.layout.container.Container {
    /**
     
    */
        constructor();
    }
    interface VBoxConfig extends Ext.layout.container.BoxConfig {
    }
    /**
    A layout that arranges items vertically down a Container. 
    */
    export class VBox extends Ext.layout.container.Box {
    /**
     
    */
        constructor(config: Ext.layout.container.VBoxConfig);
    }
}
declare module Ext.layout.container.boxOverflow {
    /**
    

    */
    export class Menu extends Ext.layout.container.boxOverflow.None {
    /**
    Array of all items that are currently hidden and should go into the dropdown menu 
    */
        menuItems: any[];
    /**
    HTML fragment to render into the toolbar overflow menu if there are no items to display 
    */
        noItemsMenuText: string;
    /**
     
    */
        constructor(config: any);
    }
    /**
    Base class for Box Layout overflow handlers. 
    */
    export class None extends Ext.Base {
    /**
    If this property is specified by the target class of this mixin its properties are
used to configure the created Ext.
    */
        factoryConfig: any;
    /**
     
    */
        constructor(config: any);
    }
    interface ScrollerConfig {
    /**
    True to animate the scrolling of items within the layout (ignored if enableScroll is false) 
    */
        animateScroll?: boolean;
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    /**
    Number of milliseconds that each scroll animation lasts 
    */
        scrollDuration?: number;
    /**
    The number of pixels to scroll by on scroller click 
    */
        scrollIncrement?: number;
    /**
    Number of milliseconds between each scroll while a scroller button is held down 
    */
        scrollRepeatInterval?: number;
    /**
    The number of pixels to increment on mouse wheel scrolling. 
    */
        wheelIncrement?: number;
    }
    /**
    

    */
    export class Scroller extends Ext.layout.container.boxOverflow.None {
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
     
    */
        constructor(config: Ext.layout.container.boxOverflow.ScrollerConfig);
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Returns the current scroll position of the innerCt element 
    */
        getScrollPosition():number;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    Scrolls to the given component. 
    */
        scrollToItem(item: string|number|Ext.Component, animate: boolean):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    }
}
declare module Ext.menu {
    interface CheckItemConfig extends Ext.menu.ItemConfig {
    /**
    True to prevent the checked item from being toggled. 
    */
        checkChangeDisabled?: boolean;
    /**
    Alternative for the checkchange event. 
    */
        checkHandler?: Function|string;
    /**
    True to render the menuitem initially checked. 
    */
        checked?: boolean;
    /**
    The CSS class used by cls to show the checked state. 
    */
        checkedCls?: string;
    /**
    Name of a radio group that the item belongs. 
    */
        group?: string;
    /**
    The CSS class applied to this item's icon image to denote being a part of a radio group. 
    */
        groupCls?: string;
    /**
    Scope for the checkHandler callback.

    */
        scope?: any;
    /**
    The CSS class used by cls to show the unchecked state. 
    */
        uncheckedCls?: string;
    }
    /**
    A menu item that contains a togglable checkbox by default, but that can also be a part of a radio group. 
    */
    export class CheckItem extends Ext.menu.Item {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.menu.CheckItemConfig);
    /**
    Disables just the checkbox functionality of this menu Item. 
    */
        disableCheckChange():void;
    /**
    Re-enables the checkbox functionality of this menu item after having been
disabled by disableCheckChange 
    */
        enableCheckChange():void;
    /**
    Sets the checked state of the item 
    */
        setChecked(checked: boolean, suppressEvents?: boolean):void;
    }
    interface ColorPickerConfig extends Ext.menu.MenuConfig {
    /**
    False to continue showing the menu after a color is selected. 
    */
        hideOnClick?: boolean;
    /**
    An id to assign to the underlying color picker.

    */
        pickerId?: string;
    }
    /**
    A menu containing a Ext.picker.Color Component. 
    */
    export class ColorPicker extends Ext.menu.Menu {
    /**
    The Ext.picker.Color instance for this ColorMenu

    */
        picker: Ext.picker.Color;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.menu.ColorPickerConfig);
    }
    interface DatePickerConfig extends Ext.menu.MenuConfig {
    /**
    ARIA label for the Date Picker menu 
    */
        ariaLabel?: string;
    /**
    False to continue showing the menu after a date is selected. 
    */
        hideOnClick?: boolean;
    /**
    An id to assign to the underlying date picker.

    */
        pickerId?: string;
    }
    /**
    A menu containing an Ext.picker.Date Component. 
    */
    export class DatePicker extends Ext.menu.Menu {
    /**
    The Ext.picker.Date instance for this DateMenu

    */
        picker: Ext.picker.Date;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.menu.DatePickerConfig);
    }
    interface ItemConfig extends Ext.ComponentConfig {
    /**
    The CSS class added to the menu item when the item is focused. 
    */
        activeCls?: string;
    /**
    Whether or not this menu item can be focused. 
    */
        canActivate?: boolean;
    /**
    The delay in milliseconds to wait before hiding the menu after clicking the menu item. 
    */
        clickHideDelay?: number;
    /**
    Whether or not to destroy any associated sub-menu when this item is destroyed. 
    */
        destroyMenu?: boolean;
    /**
    A numeric unicode character code to use as the icon for this item. 
    */
        glyph?: number|string;
    /**
    A function called when the menu item is clicked (can be used instead of click event). 
    */
        handler?: Function|string;
    /**
    Whether to not to hide the owning menu when this item is clicked. 
    */
        hideOnClick?: boolean;
    /**
    The href attribute to use for the underlying anchor link. 
    */
        href?: string;
    /**
    The target attribute to use for the underlying anchor link.

    */
        hrefTarget?: string;
    /**
    The path to an icon to display in this item. 
    */
        icon?: string;
    /**
    A CSS class that specifies a background-image to use as the icon for this item. 
    */
        iconCls?: string;
    /**
    Either an instance of Ext.menu.Menu or a config object for an Ext.menu.Menu
which will act as a sub-menu to this item.

    */
        menu?: any;
    /**
    The default Ext.util.Positionable.getAlignToXY anchor position value for this
item's sub-menu relative to this item's
    */
        menuAlign?: string;
    /**
    The delay in milliseconds before this item's sub-menu expands after this item is moused over. 
    */
        menuExpandDelay?: number;
    /**
    The delay in milliseconds before this item's sub-menu hides after this item is moused out. 
    */
        menuHideDelay?: number;
    /**
    Whether or not this item is plain text/html with no icon or visual activation.

    */
        plain?: boolean;
    /**
    The text/html to display in this item.

    */
        text?: string;
    /**
    The tooltip for the button - can be a string to be used as innerHTML (html tags are accepted) or
QuickTips config obj
    */
        tooltip?: any;
    /**
    The type of tooltip to use. 
    */
        tooltipType?: string;
    }
    /**
    A base class for all menu items that require menu-related functionality such as click handling,
sub-menus, icons, etc. 
    */
    export class Item extends Ext.Component {
    /**
    Whether or not this item is currently activated 
    */
        activated: boolean;
    /**
    true in this class to identify an object as an instantiated Menu Item, or subclass thereof. 
    */
        isMenuItem: boolean;
    /**
    The sub-menu associated with this item, if one was configured.

    */
        menu: any;
    /**
    The parent Menu of this item.

    */
        parentMenu: Ext.menu.Menu;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.menu.ItemConfig);
    /**
    Retrieves the first direct child of this container which matches the passed selector or component. 
    */
        child(selector?: string|Ext.Component):any;
    /**
    Retrieves the first descendant of this container which matches the passed selector. 
    */
        down(selector?: string|Ext.Component):any;
    /**
    Get the attached sub-menu for this item. 
    */
        getMenu():Ext.menu.Menu;
    /**
    Retrieves all descendant components which match the passed selector. 
    */
        query(selector?: string):Ext.Component[];
    /**
    Retrieves all descendant components which match the passed function. 
    */
        queryBy(fn: Function, scope?: any):Ext.Component[];
    /**
    Finds a component at any level under this container matching the id/itemId. 
    */
        queryById(id: string):Ext.Component;
    /**
    Sets the click handler of this item 
    */
        setHandler(fn: Function, scope?: any):void;
    /**
    Sets the icon on this item. 
    */
        setIcon(icon: string):void;
    /**
    Sets the iconCls of this item 
    */
        setIconCls(iconCls: string):void;
    /**
    Set a child menu for this item. 
    */
        setMenu(menu: any, destroyMenu?: boolean):void;
    /**
    Sets the text of this item 
    */
        setText(text: string):void;
    /**
    Sets the tooltip for this menu item. 
    */
        setTooltip(tooltip: any):Ext.menu.Item;
    /**
    Traverses the tree rooted at this node in post-order mode, calling the passed function on the nodes at each level. 
    */
        visitPostOrder(selector: any, fn: (node: any) => any, scope?: any, extraArgs?: any[]):void;
    /**
    Traverses the tree rooted at this node in pre-order mode, calling the passed function on the nodes at each level. 
    */
        visitPreOrder(selector: any, fn: (node: any) => any, scope?: any, extraArgs?: any[]):void;
    }
    /**
    Provides a common registry groups of Ext.menu.CheckItems. 
    */
    export class Manager {
    /**
    Returns a Ext.menu.Menu object 
    */
        static get(menu: any, config?: any):Ext.menu.Menu;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Hides all floating menus that are currently visible 
    */
        static hideAll():boolean;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface MenuConfig extends Ext.panel.PanelConfig {
    /**
    DOM tabIndex attribute to set on the
active Focusable child of this container when using the "Roaming tabindex"
techn
    */
        activeChildTabIndex?: number;
    /**
    True to allow multiple menus to be displayed at the same time. 
    */
        allowOtherMenus?: boolean;
    /**
    Enable or disable
navigation with arrow keys for this FocusableContainer. 
    */
        enableFocusableContainer?: boolean;
    /**
     
    */
        enableKeyNav?: boolean;
    /**
    True to ignore clicks on any item in this menu that is a parent item (displays a submenu)
so that the submenu is not 
    */
        ignoreParentClicks?: boolean;
    /**
    DOM tabIndex attribute to set on
inactive Focusable children of this container when using the "Roaming tabindex"
tech
    */
        inactiveChildTabIndex?: number;
    /**
    True to remove the incised line down the left side of the menu and to not indent general Component items. 
    */
        plain?: boolean;
    /**
    True to show the icon separator. 
    */
        showSeparator?: boolean;
    }
    /**
    A menu object. 
    */
    export class Menu extends Ext.panel.Panel {
    /**
    true in this class to identify an object as an instantiated Menu, or subclass thereof. 
    */
        isMenu: boolean;
    /**
    The parent Menu of this Menu.

    */
        parentMenu: Ext.menu.Menu;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.menu.MenuConfig);
    /**
     
    */
        canActivateItem(item: Ext.Component):boolean;
    /**
    Deactivates the current active item on the menu, if one exists. 
    */
        deactivateActiveItem():void;
    }
    interface SeparatorConfig extends Ext.menu.ItemConfig {
    /**
    The CSS class used by the separator item to show the incised line. 
    */
        separatorCls?: string;
    }
    /**
    Adds a separator bar to a menu, used to divide logical groups of menu items. 
    */
    export class Separator extends Ext.menu.Item {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.menu.SeparatorConfig);
    }
}
declare module Ext.mixin {
    interface BindableConfig {
    /**
    Setting this config option adds or removes data bindings for other configs. 
    */
        bind?: any;
    /**
    A string alias, a configuration object or an instance of a ViewController for
this container. 
    */
        controller?: any;
    /**
    If true, this component will be the default scope (this pointer) for events
specified with string names so that the s
    */
        defaultListenerScope?: boolean;
    /**
    One or more names of config properties that this component should publish
to its ViewModel. 
    */
        publishes?: any;
    /**
    Specifies a name for this component inside its component hierarchy. 
    */
        reference?: string;
    /**
    If provided this creates a new Session instance for this component. 
    */
        session?: any;
    /**
    This object holds a map of config properties that will update their binding
as they are modified. 
    */
        twoWayBindable?: any;
    /**
    The ViewModel is a data provider for this component and its children. 
    */
        viewModel?: any;
    }
    /**
    This class is intended as a mixin for classes that want to provide a "bind" config that
connects to a ViewModel.

    */
    export class Bindable extends Ext.Base {
    /**
    This property is used to determine the property of a bind config that is just
the value. 
    */
        defaultBindProperty: string;
    /**
    Returns the value of bind. 
    */
        getBind():any;
    /**
    Returns the Ext.app.ViewController instance associated with this
component via the controller config or setController
    */
        getController():Ext.app.ViewController;
    /**
    Returns the value of defaultListenerScope. 
    */
        getDefaultListenerScope():boolean;
    /**
    Returns the value of publishes. 
    */
        getPublishes():any;
    /**
    Returns the value of reference. 
    */
        getReference():string;
    /**
    Returns the value of session. 
    */
        getSession():any;
    /**
    Returns the value of twoWayBindable. 
    */
        getTwoWayBindable():any;
    /**
    Returns the value of viewModel. 
    */
        getViewModel():any;
    /**
    Called by getInherited to initialize the inheritedState the first time it is
requested. 
    */
        initInheritedState(inheritedState: any):void;
    /**
    Gets the controller that controls this view. 
    */
        lookupController(skipThis?: boolean):Ext.app.ViewController;
    /**
    Returns the Ext.data.Session for this instance. 
    */
        lookupSession(skipThis?: boolean):Ext.data.Session;
    /**
    Returns the Ext.app.ViewModel for this instance. 
    */
        lookupViewModel(skipThis?: boolean):Ext.app.ViewModel;
    /**
    Publish this components state to the ViewModel. 
    */
        publishState(property?: string, value?: any):void;
    /**
    Sets the value of bind. 
    */
        setBind(bind: any):void;
    /**
    Sets the value of controller. 
    */
        setController(controller: any):void;
    /**
    Sets the value of defaultListenerScope. 
    */
        setDefaultListenerScope(defaultListenerScope: boolean):void;
    /**
    Sets the value of publishes. 
    */
        setPublishes(publishes: any):void;
    /**
    Sets the value of reference. 
    */
        setReference(reference: string):void;
    /**
    Sets the value of session. 
    */
        setSession(session: any):void;
    /**
    Sets the value of twoWayBindable. 
    */
        setTwoWayBindable(twoWayBindable: any):void;
    /**
    Sets the value of viewModel. 
    */
        setViewModel(viewModel: any):void;
    }
    /**
    This mixin automates use of Ext.Factory. 
    */
    export class Factoryable extends Ext.Base {
    /**
    If this property is specified by the target class of this mixin its properties are
used to configure the created Ext.
    */
        factoryConfig: any;
    }
    /**
    

    */
    export class Hookable extends Ext.Mixin {
    }
    /**
    An Identifiable mixin.

    */
    export class Identifiable extends Ext.Base {
    /**
    Retrieves the id of this component. 
    */
        getId():string;
    }
    /**
    A mixin that provides the functionality for inheritable configs. 
    */
    export class Inheritable extends Ext.Mixin {
    /**
    This method returns an object containing the inherited properties for this instance. 
    */
        getInherited(inner?: boolean):any;
    /**
    This method returns the value of a config property that may be inherited from some
ancestor. 
    */
        getInheritedConfig(property: string, skipThis?: boolean):any;
    /**
    Used by ComponentQuery, and the up
method to find the owning Component in the linkage hierarchy. 
    */
        getRefOwner():void;
    /**
    This method is called to initialize the inheritedState objects for this instance. 
    */
        initInheritedState(inheritedState: any, inheritedStateInner?: any):void;
    /**
    Gets the Controller or Component that is used as the event root for this view. 
    */
        resolveListenerScope(defaultScope?: any):Ext.app.ViewController|Ext.container.Container;
    /**
    Returns the default listener scope for a "satellite" of this component. 
    */
        resolveSatelliteListenerScope(satellite: Ext.mixin.Observable, defaultScope?: any):any;
    }
    /**
    This mixin allows users to easily require external scripts in their classes. 
    */
    export class Mashup extends Ext.Base {
    }
    interface ObservableConfig {
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    }
    /**
    Base class that provides a common interface for publishing events. 
    */
    export class Observable extends Ext.Base {
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Starts capture on the specified Observable. 
    */
        capture(o: Ext.util.Observable, fn: Function, scope?: any):void;
    /**
    Sets observability on the passed class constructor. 
    */
        observe(c: Function, listeners: any):void;
    /**
    Removes all added captures from the Observable. 
    */
        releaseCapture(o: Ext.util.Observable):void;
    }
    /**
    A mixin for providing query related methods for Ext.ComponentQuery for classes that
implement getRefItems.

    */
    export class Queryable extends Ext.Base {
    /**
    Retrieves the first direct child of this container which matches the passed selector or component. 
    */
        child(selector?: string|Ext.Component):any;
    /**
    Retrieves the first descendant of this container which matches the passed selector. 
    */
        down(selector?: string|Ext.Component):any;
    /**
    Retrieves all descendant components which match the passed selector. 
    */
        query(selector?: string):Ext.Component[];
    /**
    Retrieves all descendant components which match the passed function. 
    */
        queryBy(fn: Function, scope?: any):Ext.Component[];
    /**
    Finds a component at any level under this container matching the id/itemId. 
    */
        queryById(id: string):Ext.Component;
    /**
    Traverses the tree rooted at this node in post-order mode, calling the passed function on the nodes at each level. 
    */
        visitPostOrder(selector: any, fn: (node: any) => any, scope?: any, extraArgs?: any[]):void;
    /**
    Traverses the tree rooted at this node in pre-order mode, calling the passed function on the nodes at each level. 
    */
        visitPreOrder(selector: any, fn: (node: any) => any, scope?: any, extraArgs?: any[]):void;
    }
    interface ResponsiveConfig {
    /**
    This object consists of keys that represent the conditions on which configs
will be applied. 
    */
        responsiveConfig?: any;
    /**
    It is common when using responsiveConfig to have recurring expressions that
make for complex configurations. 
    */
        responsiveFormulas?: any;
    }
    /**
    This mixin provides its user with a responsiveConfig config that allows the class
to conditionally control config pro
    */
    export class Responsive extends Ext.Base {
    }
    interface SelectableConfig {
    /**
    Allow users to deselect a record in a DataView, List or Grid. 
    */
        allowDeselect?: boolean;
    /**
    true to deselect current selection when the container body is
clicked. 
    */
        deselectOnContainerClick?: boolean;
    /**
    true to disable selection. 
    */
        disableSelection?: boolean;
    /**
    true to disable selection. 
    */
        locked?: boolean;
    /**
    Modes of selection. 
    */
        mode?: string;
    }
    /**
    Tracks what records are currently selected in a databound widget. 
    */
    export class Selectable extends Ext.Mixin {
    /**
     
    */
        constructor();
    /**
    Deselects any currently selected records and clears all stored selections. 
    */
        clearSelections():void;
    /**
    Deselects the given record(s). 
    */
        deselect(records: number|any[]|Ext.data.Model, suppressEvent: boolean):void;
    /**
    Deselects all records. 
    */
        deselectAll(supress: any):void;
    /**
    Deselects a record instance by record instance or index. 
    */
        doDeselect(records: Ext.data.Model|number, suppressEvent: boolean):void;
    /**
    Selects a record instance by record instance or index. 
    */
        doSelect(records: Ext.data.Model|number, keepExisting: boolean, suppressEvent: boolean):void;
    /**
    Returns the value of allowDeselect. 
    */
        getAllowDeselect():boolean;
    /**
    Returns the number of selections. 
    */
        getCount():number;
    /**
    Returns the value of deselectOnContainerClick. 
    */
        getDeselectOnContainerClick():boolean;
    /**
    Returns the value of disableSelection. 
    */
        getDisableSelection():boolean;
    /**
    Returns the array of previously selected items. 
    */
        getLastSelected():any[];
    /**
    Returns the value of mode. 
    */
        getMode():string;
    /**
    Returns an array of the currently selected records. 
    */
        getSelection():any[];
    /**
    Returns the number of selections. 
    */
        getSelectionCount():number;
    /**
    Returns the selection mode currently used by this Selectable. 
    */
        getSelectionMode():string;
    /**
    Returns true if there is a selected record. 
    */
        hasSelection():boolean;
    /**
    Returns true if the Selectable is currently locked. 
    */
        isLocked():boolean;
    /**
    Returns true if the specified row is selected. 
    */
        isSelected(record: Ext.data.Model|number):boolean;
    /**
    Adds the given records to the currently selected set. 
    */
        select(records: Ext.data.Model|any[]|number, keepExisting: boolean, suppressEvent: boolean):void;
    /**
    Selects all records. 
    */
        selectAll(silent: boolean):void;
    /**
    Selects a range of rows if the selection model getDisableSelection is not locked. 
    */
        selectRange(startRecord: number, endRecord: number, keepExisting?: boolean):void;
    /**
    Sets the value of allowDeselect. 
    */
        setAllowDeselect(allowDeselect: boolean):void;
    /**
    Sets the value of deselectOnContainerClick. 
    */
        setDeselectOnContainerClick(deselectOnContainerClick: boolean):void;
    /**
    Sets the value of disableSelection. 
    */
        setDisableSelection(disableSelection: boolean):void;
    /**
    This was an internal function accidentally exposed in 1.x and now deprecated. 
    */
        setLastFocused():void;
    /**
    Sets the value of mode. 
    */
        setMode(mode: string):void;
    /**
    Sets a record as the last focused record. 
    */
        updateLastFocused(newRecord: Ext.data.Model, oldRecord: Ext.data.Model):void;
    }
    /**
    

    */
    export class Templatable extends Ext.Mixin {
    }
    /**
    A Traversable mixin.

    */
    export class Traversable extends Ext.Mixin {
    /**
    Returns the parent of this component, if it has one. 
    */
        getParent():Ext.Component;
    /**
    Returns true if this component has a parent. 
    */
        hasParent():boolean;
    }
}
declare module Ext.panel {
    interface BarConfig extends Ext.container.ContainerConfig {
    }
    /**
    Abstract base class for common functionality shared between Ext.panel.Header
and Ext.tab.Bar

    */
    export class Bar extends Ext.container.Container {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.panel.BarConfig);
    }
    interface DDConfig extends Ext.dd.DragSourceConfig {
    }
    /**
    DD implementation for Panels.

    */
    export class DD extends Ext.dd.DragSource {
    /**
    Creates new drag-source. 
    */
        constructor(panel: Ext.panel.DDConfig, cfg: Ext.panel.DDConfig);
    }
    interface HeaderConfig extends Ext.panel.BarConfig {
    /**
    A numeric unicode character code to use as the icon for the panel header. 
    */
        glyph?: number|string;
    /**
    Path to image for an icon. 
    */
        icon?: string;
    /**
    The side of the title to render the icon. 
    */
        iconAlign?: any;
    /**
    CSS class for an icon. 
    */
        iconCls?: string;
    /**
    The index at which the any items will be inserted into the Header's
items collection. 
    */
        itemPosition?: number;
    /**
    The title text or config object for the Title component.

    */
        title?: string|Ext.panel.Title;
    /**
    The alignment of the title text within the available space between the
icon and the tools. 
    */
        titleAlign?: any;
    /**
    The ordinal position among the header items (tools and other components specified using the items config)
at which th
    */
        titlePosition?: number;
    /**
    The rotation of the header's title text. 
    */
        titleRotation?: any;
    }
    /**
    Simple header class which is used for on Ext.panel.Panel and Ext.window.Window.

    */
    export class Header extends Ext.panel.Bar {
    /**
    true in this class to identify an object as an instantiated Header, or subclass thereof. 
    */
        isHeader: boolean;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.panel.HeaderConfig);
    /**
    Add a tool to the header 
    */
        addTool(tool: any):void;
    /**
    Returns the value of glyph. 
    */
        getGlyph():number|string;
    /**
    Returns the value of icon. 
    */
        getIcon():string;
    /**
    Returns the value of iconAlign. 
    */
        getIconAlign():any;
    /**
    Returns the value of iconCls. 
    */
        getIconCls():string;
    /**
    Returns the value of title. 
    */
        getTitle():string|Ext.panel.Title;
    /**
    Returns the value of titleAlign. 
    */
        getTitleAlign():any;
    /**
    Returns the value of titlePosition. 
    */
        getTitlePosition():number;
    /**
    Returns the value of titleRotation. 
    */
        getTitleRotation():any;
    /**
    Gets the tools for this header. 
    */
        getTools():Ext.panel.Tool[];
    /**
    Sets the value of glyph. 
    */
        setGlyph(glyph: number|string):void;
    /**
    Sets the value of icon. 
    */
        setIcon(icon: string):void;
    /**
    Sets the value of iconAlign. 
    */
        setIconAlign(iconAlign: any):void;
    /**
    Sets the value of iconCls. 
    */
        setIconCls(iconCls: string):void;
    /**
    Sets the value of title. 
    */
        setTitle(title: string|Ext.panel.Title):void;
    /**
    Sets the value of titleAlign. 
    */
        setTitleAlign(titleAlign: any):void;
    /**
    Sets the value of titlePosition. 
    */
        setTitlePosition(titlePosition: number):void;
    /**
    Sets the value of titleRotation. 
    */
        setTitleRotation(titleRotation: any):void;
    }
    interface PanelConfig extends Ext.container.ContainerConfig {
    /**
    true to animate the transition when the panel is collapsed, false to skip the animation (defaults to true
if the Ext.
    */
        animCollapse?: boolean;
    /**
    Convenience config. 
    */
        bbar?: any;
    /**
    A shortcut to add or remove the border on the body of a panel. 
    */
        bodyBorder?: boolean;
    /**
    A CSS class, space-delimited string of classes, or array of classes to be applied to the panel's body element. 
    */
        bodyCls?: string|string[];
    /**
    A shortcut for setting a padding style on the body element. 
    */
        bodyPadding?: number|string;
    /**
    Custom CSS styles to be applied to the panel's body element, which can be supplied as a valid CSS style string,
an ob
    */
        bodyStyle?: any;
    /**
    The alignment of any buttons added to this panel. 
    */
        buttonAlign?: string;
    /**
    Convenience config used for adding buttons docked to the bottom of the panel. 
    */
        buttons?: any;
    /**
    True to display the 'close' tool button and allow the user to close the window, false to hide the button and
disallow
    */
        closable?: boolean;
    /**
    The action to take when the close header tool is clicked:


'destroy' :

remove the window from the DOM and destroy i
    */
        closeAction?: string;
    /**
    The direction to collapse the Panel when the toggle button is clicked. 
    */
        collapseDirection?: string;
    /**
    true to make sure the collapse/expand toggle button always renders first (to the left of) any other tools in
the pane
    */
        collapseFirst?: boolean;
    /**
    Important: this config is only effective for collapsible Panels which are direct child items of a
border layout. 
    */
        collapseMode?: string;
    /**
    true to render the panel collapsed, false to render it expanded. 
    */
        collapsed?: boolean;
    /**
    A CSS class to add to the panel's element after it has been collapsed. 
    */
        collapsedCls?: string;
    /**
    True to make the panel collapsible and have an expand/collapse toggle Tool added into the header tool button
area. 
    */
        collapsible?: boolean;
    /**
    True to constrain the panel header within its containing element (allowing the panel body to fall outside of
its cont
    */
        constrainHeader?: boolean;
    /**
    This object holds the default weights applied to dockedItems that have no weight. 
    */
        defaultDockWeights?: any;
    /**
    A component or series of components to be added as docked items to this panel. 
    */
        dockedItems?: any;
    /**
    Convenience config used for adding items to the bottom of the panel. 
    */
        fbar?: any;
    /**
    Important: This config is only effective for collapsible Panels which are direct child items of a
border layout. 
    */
        floatable?: boolean;
    /**
    True to apply a frame to the panel panels header (if 'frame' is true). 
    */
        frameHeader?: boolean;
    /**
    A numeric unicode character code to use as the icon for the panel header. 
    */
        glyph?: number|string;
    /**
    Pass as false to prevent a Header from being created and shown. 
    */
        header?: any;
    /**
    Optional CSS class to apply to the header element on mouseover

    */
        headerOverCls?: string;
    /**
    Specify as 'top', 'bottom', 'left' or 'right'. 
    */
        headerPosition?: any;
    /**
    true to hide the expand/collapse toggle button when collapsible == true, false to display it. 
    */
        hideCollapseTool?: boolean;
    /**
    Path to image for an icon. 
    */
        icon?: string;
    /**
    The side of the title to render the icon.

    */
        iconAlign?: any;
    /**
    CSS class for an icon. 
    */
        iconCls?: string;
    /**
    Convenience config. 
    */
        lbar?: any;
    /**
    When true, the dock component layout writes
height information to the panel's DOM elements based on its shrink wrap h
    */
        manageHeight?: boolean;
    /**
    Minimum width of all footer toolbar buttons in pixels. 
    */
        minButtonWidth?: number;
    /**
    True to overlap the header in a panel over the framing of the panel itself. 
    */
        overlapHeader?: boolean;
    /**
    Important: This config is only effective for collapsible Panels which are direct child items of a
border layout when 
    */
        placeholder?: any;
    /**
    The mode for hiding collapsed panels when
using collapseMode "placeholder". 
    */
        placeholderCollapseHideMode?: number;
    /**
     
    */
        preventHeader?: boolean;
    /**
    Convenience config. 
    */
        rbar?: any;
    /**
    Allows for this panel to include the dockedItems when trying to determine
the overall size of the panel. 
    */
        shrinkWrapDock?: boolean|number;
    /**
    When draggable is true, Specify this as true to  cause the draggable config
to work the same as it does in Window. 
    */
        simpleDrag?: boolean;
    /**
    Convenience config. 
    */
        tbar?: any;
    /**
    The title text or config object for the Title component.

    */
        title?: string;
    /**
    The alignment of the title text within the available space between the
icon and the tools.

    */
        titleAlign?: any;
    /**
    true to allow expanding and collapsing the panel (when collapsible = true) by clicking anywhere in
the header bar, fa
    */
        titleCollapse?: boolean;
    /**
    The rotation of the header's title text. 
    */
        titleRotation?: any;
    /**
    An array of Ext.panel.Tool configs/instances to be added to the header tool area. 
    */
        tools?: any[]|Ext.panel.Tool[];
    }
    /**
    Panel is a container that has specific functionality and structural components that make it the perfect building
bloc
    */
    export class Panel extends Ext.container.Container {
    /**
    The Panel's body Element which may be used to contain HTML content. 
    */
        body: Ext.dom.Element;
    /**
    Only present if this Panel has been configured with draggable true. 
    */
        dd: Ext.dd.DragSource|Ext.util.ComponentDragger;
    /**
    true in this class to identify an object as an instantiated Panel, or subclass thereof. 
    */
        isPanel: boolean;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.panel.PanelConfig);
    /**
    Adds a CSS class to the body element. 
    */
        addBodyCls(cls: string):Ext.panel.Panel;
    /**
    Adds docked item(s) to the container. 
    */
        addDocked(items: any, pos?: number):Ext.Component[];
    /**
    Add tools to this panel 
    */
        addTool(tools: any[]|Ext.panel.Tool[]):void;
    /**
    Template method to be implemented in subclasses to add their tools after the collapsible tool. 
    */
        addTools():void;
    /**
    Invoked after the Panel is Collapsed. 
    */
        afterCollapse(animated: boolean):void;
    /**
    Invoked after the Panel is Expanded. 
    */
        afterExpand(animated: boolean):void;
    /**
    Closes the Panel. 
    */
        close():void;
    /**
    Collapses the panel body so that the body becomes hidden. 
    */
        collapse(direction?: string, animate?: boolean):Ext.panel.Panel;
    /**
    converts a collapsdDir into an anchor argument for Element.slideIn
overridden in rtl mode to switch "l" and "r" 
    */
        convertCollapseDir(collapseDir: any):void;
    /**
    Expands the panel body so that it becomes visible. 
    */
        expand(animate?: boolean):Ext.panel.Panel;
    /**
    Returns the current collapsed state of the panel. 
    */
        getCollapsed():boolean|string;
    /**
    Finds a docked component by id, itemId or position. 
    */
        getDockedComponent(comp: string|number):Ext.Component;
    /**
    Retrieves an array of all currently docked Components. 
    */
        getDockedItems(selector: string, beforeBody: boolean):Ext.Component[];
    /**
    Returns the value of glyph. 
    */
        getGlyph():any;
    /**
    Gets the Header for this panel. 
    */
        getHeader():Ext.panel.Header;
    /**
    Returns the value of headerPosition. 
    */
        getHeaderPosition():any;
    /**
    Returns the value of icon. 
    */
        getIcon():any;
    /**
    Returns the value of iconAlign. 
    */
        getIconAlign():any;
    /**
    Returns the value of iconCls. 
    */
        getIconCls():any;
    /**
    Returns the value of title. 
    */
        getTitle():string;
    /**
    Returns the value of titleAlign. 
    */
        getTitleAlign():any;
    /**
    Returns the value of titleRotation. 
    */
        getTitleRotation():any;
    /**
    Inserts docked item(s) to the panel at the indicated position. 
    */
        insertDocked(pos: number, items: any):void;
    /**
    Invoked after a docked item is added to the Panel. 
    */
        onDockedAdd(component: Ext.Component):void;
    /**
    Invoked after a docked item is removed from the Panel. 
    */
        onDockedRemove(component: Ext.Component):void;
    /**
    Removes a CSS class from the body element. 
    */
        removeBodyCls(cls: string):Ext.panel.Panel;
    /**
    Removes the docked item from the panel. 
    */
        removeDocked(item: Ext.Component, autoDestroy?: boolean):void;
    /**
    Sets the body style according to the passed parameters. 
    */
        setBodyStyle(style: any, value: string):Ext.panel.Panel;
    /**
    Collapses or expands the panel. 
    */
        setCollapsed(collapsed: boolean):void;
    /**
    Sets the value of headerPosition. 
    */
        setHeaderPosition(headerPosition: any):void;
    /**
    Sets the value of iconAlign. 
    */
        setIconAlign(iconAlign: any):void;
    /**
    Sets the title of this panel. 
    */
        setTitle(title: string):void;
    /**
    Sets the value of titleAlign. 
    */
        setTitleAlign(titleAlign: any):void;
    /**
    Sets the value of titleRotation. 
    */
        setTitleRotation(titleRotation: any):void;
    /**
    Shortcut for performing an expand or collapse based on the current state of the panel. 
    */
        toggleCollapse():Ext.panel.Panel;
    }
    /**
    This mixin is applied to panels that want to manage a Pin state and corresponding tool.

    */
    export class Pinnable extends Ext.Mixin {
    }
    interface ProxyConfig {
    /**
    True to insert a placeholder proxy element while dragging the panel, false to drag with no proxy. 
    */
        insertProxy?: boolean;
    /**
    True to move the panel to the dragged position when dropped 
    */
        moveOnDrag?: boolean;
    }
    /**
    A custom drag proxy implementation specific to Ext.panel.Panels. 
    */
    export class Proxy extends Ext.Base {
    /**
    

    */
        panel: Ext.panel.Panel;
    /**
    Creates new panel proxy. 
    */
        constructor(panel: Ext.panel.Panel, config?: Ext.panel.ProxyConfig);
    /**
    Gets the proxy's element 
    */
        getEl():Ext.dom.Element;
    /**
    Gets the proxy's ghost Panel 
    */
        getGhost():Ext.panel.Panel;
    /**
    Gets the proxy element. 
    */
        getProxy():Ext.dom.Element;
    /**
    Hides the proxy 
    */
        hide():void;
    /**
    Moves the proxy to a different position in the DOM. 
    */
        moveProxy(parentNode: HTMLElement, before?: HTMLElement):void;
    /**
    Shows the proxy 
    */
        show():void;
    }
    interface TableConfig extends Ext.panel.PanelConfig {
    /**
    True to allow deselecting a record. 
    */
        allowDeselect?: boolean;
    /**
    Use true to load the store as soon as this component is fully constructed. 
    */
        autoLoad?: boolean;
    /**
    Buffered rendering is enabled by default. 
    */
        bufferedRenderer?: boolean;
    /**
    Adds column line styling

    */
        columnLines?: boolean;
    /**
    An array of column definition objects which define all columns that appear in this
grid. 
    */
        columns?: any;
    /**
    Configure as true to enable deferred row rendering. 
    */
        deferRowRender?: boolean;
    /**
    True to disable selection model. 
    */
        disableSelection?: boolean;
    /**
    Default text (HTML tags are accepted) to display in the
Panel body when the Store is empty. 
    */
        emptyText?: string;
    /**
    False to disable column hiding within this grid. 
    */
        enableColumnHide?: boolean;
    /**
    False to disable column dragging within this grid. 
    */
        enableColumnMove?: boolean;
    /**
    False to disable column resizing within this grid. 
    */
        enableColumnResize?: boolean;
    /**
    Configure as true to enable locking support for this grid. 
    */
        enableLocking?: boolean;
    /**
    An array of grid Features to be added to this grid. 
    */
        features?: Ext.grid.feature.Feature[]|any[]|string[];
    /**
    True to force the columns to fit into the available width. 
    */
        forceFit?: boolean;
    /**
    True to hide column headers. 
    */
        hideHeaders?: boolean;
    /**
    TableViews are buffer rendered in 5.x which means that only the visible subset of data rows
are rendered into the DOM. 
    */
        leadingBufferZone?: number;
    /**
    Any special configuration options for the locked part of the grid

    */
        lockedGridConfig?: any;
    /**
    A view configuration to be applied to the
locked side of the grid. 
    */
        lockedViewConfig?: any;
    /**
    Configure as true to have columns remember their sorted state after other columns have been clicked upon to sort. 
    */
        multiColumnSort?: boolean;
    /**
    True to enable 'MULTI' selection mode on selection model. 
    */
        multiSelect?: boolean;
    /**
    Any special configuration options for the normal part of the grid

    */
        normalGridConfig?: any;
    /**
    A view configuration to be applied to the
normal/unlocked side of the grid. 
    */
        normalViewConfig?: any;
    /**
    This configures the zone which causes new rows to be appended to the view. 
    */
        numFromEdge?: number;
    /**
    Set this to true to always leave a scrollbar sized space at the end of the grid content when
fitting content into the
    */
        reserveScrollbar?: boolean;
    /**
    Adds row line styling 
    */
        rowLines?: boolean;
    /**
    Scrollers configuration. 
    */
        scroll?: string|boolean;
    /**
    Number of pixels to scroll when scrolling the locked section with mousewheel. 
    */
        scrollDelta?: number;
    /**
    True to constrain column dragging so that a column cannot be dragged in or out of it's
current group. 
    */
        sealedColumns?: boolean;
    /**
    A selection model instance or config object, or the selection model class's alias string. 
    */
        selModel?: any;
    /**
    An xtype of selection model to use. 
    */
        selType?: string;
    /**
    The selected model. 
    */
        selection?: Ext.data.Model;
    /**
    True to enable 'SIMPLE' selection mode on selection model. 
    */
        simpleSelect?: boolean;
    /**
    False to disable column sorting via clicking the header and via the Sorting menu items. 
    */
        sortableColumns?: boolean;
    /**
    Configure as true to place a resizing splitter between the locked
and unlocked columns. 
    */
        split?: boolean;
    /**
    The data source to which the grid / tree is bound. 
    */
        store?: any;
    /**
    The xtype of the subgrid to specify. 
    */
        subGridXType?: string;
    /**
    Synchronize rowHeight between the normal and
locked grid view. 
    */
        syncRowHeight?: boolean;
    /**
    TableViews are buffer rendered in 5.x which means that only the visible subset of data rows
are rendered into the DOM. 
    */
        trailingBufferZone?: number;
    /**
     
    */
        variableRowHeight?: boolean;
    /**
    The Ext.view.Table used by the grid. 
    */
        view?: Ext.view.Table;
    /**
    A config object that will be applied to the grid's UI view. 
    */
        viewConfig?: any;
    /**
    An xtype of view to use. 
    */
        viewType?: string;
    }
    /**
    This class is the base class for both TreePanel and
GridPanel. 
    */
    export class Table extends Ext.panel.Panel {
    /**
    True to indicate that a view has been injected into the panel. 
    */
        hasView: boolean;
    /**
    If you are writing a grid plugin or a {Ext.grid.feature.Feature Feature} which creates a column-based structure which
    */
        optimizedColumnMove: boolean;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.panel.TableConfig);
    /**
    Disables interaction with, and masks this grid's column headers. 
    */
        disableColumnHeaders():void;
    /**
    Enables interaction with, and unmasks this grid's column headers after a call to {disableColumnHeaders}. 
    */
        enableColumnHeaders():void;
    /**
    Scrolls the specified record into view. 
    */
        ensureVisible(record: number|string|Ext.data.Model, options?: any):void;
    /**
    Returns an array of all columns which exist in the grid's View, visible or not. 
    */
        getColumns():Ext.grid.column.Column[];
    /**
    Gets the headercontainer for this grid / tree. 
    */
        getHeaderContainer():Ext.grid.header.Container;
    /**
    Returns the grid's selection. 
    */
        getSelection():Ext.data.Model[];
    /**
    Returns the selection model being used by this grid's view. 
    */
        getSelectionModel():Ext.selection.Model;
    /**
    Returns the store associated with this Panel. 
    */
        getStore():Ext.data.Store;
    /**
    Gets the view for this panel. 
    */
        getView():Ext.view.Table;
    /**
    Returns an array of the visible columns in the grid. 
    */
        getVisibleColumns():Ext.grid.column.Column[];
    /**
    Reconfigures the grid or tree with a new store and/or columns. 
    */
        reconfigure(store?: any, columns?: any[]):void;
    /**
    Sets the value of selection. 
    */
        setSelection(selection: Ext.data.Model):void;
    /**
    A convenience method that fires reconfigure with the store param. 
    */
        setStore(store?: Ext.data.Store):void;
    /**
    Synchronizes the row heights between the locked and non locked portion of the grid for each
row. 
    */
        syncRowHeights():void;
    }
    interface TitleConfig extends Ext.ComponentConfig {
    /**
    A numeric unicode character code to use as the icon for the panel header. 
    */
        glyph?: number|string;
    /**
    Path to image for an icon. 
    */
        icon?: string;
    /**
    alignment of the icon 
    */
        iconAlign?: any;
    /**
    CSS class for an icon. 
    */
        iconCls?: string;
    /**
    The rotation of the header's title text. 
    */
        rotation?: any;
    /**
    The title's text (can contain html tags/entities)

    */
        text?: string;
    /**
    The alignment of the title text within the available space between the
icon and the tools. 
    */
        textAlign?: any;
    }
    /**
    A basic title component for a Panel Header

    */
    export class Title extends Ext.Component {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.panel.TitleConfig);
    /**
    Returns the value of glyph. 
    */
        getGlyph():any;
    /**
    Returns the value of icon. 
    */
        getIcon():any;
    /**
    Returns the value of iconAlign. 
    */
        getIconAlign():any;
    /**
    Returns the value of iconCls. 
    */
        getIconCls():any;
    /**
    Returns the value of rotation. 
    */
        getRotation():any;
    /**
    Returns the value of text. 
    */
        getText():string;
    /**
    Returns the value of textAlign. 
    */
        getTextAlign():any;
    /**
    Sets the value of glyph. 
    */
        setGlyph(glyph: any):void;
    /**
    Sets the value of icon. 
    */
        setIcon(icon: any):void;
    /**
    Sets the value of iconAlign. 
    */
        setIconAlign(iconAlign: any):void;
    /**
    Sets the value of iconCls. 
    */
        setIconCls(iconCls: any):void;
    /**
    Sets the value of rotation. 
    */
        setRotation(rotation: any):void;
    /**
    Sets the value of text. 
    */
        setText(text: string):void;
    /**
    Sets the value of textAlign. 
    */
        setTextAlign(textAlign: any):void;
    }
    interface ToolConfig extends Ext.ComponentConfig {
    /**
    A function to execute when the tool is clicked. 
    */
        callback?: Function|string;
    /**
    A function to execute when the tool is clicked. 
    */
        handler?: Function;
    /**
    The scope to execute the callback or handler function. 
    */
        scope?: any;
    /**
    Specify as false to allow click event to propagate. 
    */
        stopEvent?: boolean;
    /**
    The owner to report to the callback method. 
    */
        toolOwner?: Ext.Component;
    /**
    The tooltip for the tool - can be a string to be used as innerHTML (html tags are accepted) or QuickTips config
object

    */
        tooltip?: any;
    /**
    The type of tooltip to use. 
    */
        tooltipType?: string;
    /**
    The type of tool to render. 
    */
        type?: string;
    }
    /**
    This class is used to display small visual icons in the header of a panel. 
    */
    export class Tool extends Ext.Component {
    /**
    true in this class to identify an object as an instantiated Tool, or subclass thereof. 
    */
        isTool: boolean;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.panel.ToolConfig);
    /**
    Sets the type of the tool. 
    */
        setType(type: string):Ext.panel.Tool;
    }
}
declare module Ext.perf {
    /**
    

    */
    export class Accumulator extends Ext.Base {
    }
    /**
    

    */
    export class Monitor {
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
}
declare module Ext.picker {
    interface ColorConfig extends Ext.ComponentConfig {
    /**
    If set to true then reselecting a color that is already selected fires the select event 
    */
        allowReselect?: boolean;
    /**
    The DOM event that will cause a color to be selected. 
    */
        clickEvent?: string;
    /**
    A function that will handle the select event of this picker. 
    */
        handler?: Function|string;
    /**
    The CSS class to apply to the color picker's items 
    */
        itemCls?: string;
    /**
    The scope (this reference) in which the handler function will be called. 
    */
        scope?: any;
    /**
    The CSS class to apply to the selected element 
    */
        selectedCls?: string;
    /**
    The initial color to highlight (should be a valid 6-digit color hex code without the # symbol). 
    */
        value?: string;
    }
    /**
    Color picker provides a simple color palette for choosing colors. 
    */
    export class Color extends Ext.Component {
    /**
    An array of 6-digit color hex code strings (without the # symbol). 
    */
        colors: string[];
    /**
    Creates new Component. 
    */
        constructor(config: Ext.picker.ColorConfig);
    /**
    Clears any selection and sets the value to null. 
    */
        clear():void;
    /**
    Get the currently selected color value. 
    */
        getValue():string;
    /**
    Selects the specified color in the picker (fires the select event) 
    */
        select(color: string, suppressEvent?: boolean):void;
    }
    interface DateConfig extends Ext.ComponentConfig {
    /**
    The text to display for the aria title 
    */
        ariaTitle?: string;
    /**
    The date format to display for the current value in the ariaTitle 
    */
        ariaTitleDateFormat?: string;
    /**
    An array of textual day names which can be overriden for localization support (defaults to Ext.Date.dayNames) 
    */
        dayNames?: string[];
    /**
    True to disable animations when showing the month picker. 
    */
        disableAnim?: boolean;
    /**
    The class to apply to disabled cells. 
    */
        disabledCellCls?: string;
    /**
    An array of 'dates' to disable, as strings. 
    */
        disabledDates?: string[];
    /**
    JavaScript regular expression used to disable a pattern of dates. 
    */
        disabledDatesRE?: RegExp;
    /**
    The tooltip text to display when the date falls on a disabled date. 
    */
        disabledDatesText?: string;
    /**
    An array of days to disable, 0-based. 
    */
        disabledDays?: number[];
    /**
    The tooltip to display when the date falls on a disabled day. 
    */
        disabledDaysText?: string;
    /**
    The default date format string which can be overriden for localization support. 
    */
        format?: string;
    /**
    Optional. 
    */
        handler?: Function;
    /**
    Specifies optional custom key event handlers for the Ext.util.KeyNav attached to this date picker. 
    */
        keyNavConfig?: any;
    /**
    The format for displaying a date in a longer format. 
    */
        longDayFormat?: string;
    /**
    Maximum allowable date (JavaScript date object) 
    */
        maxDate?: Date;
    /**
    The error text to display if the maxDate validation fails. 
    */
        maxText?: string;
    /**
    Minimum allowable date (JavaScript date object) 
    */
        minDate?: Date;
    /**
    The error text to display if the minDate validation fails. 
    */
        minText?: string;
    /**
    An array of textual month names which can be overriden for localization support (defaults to Ext.Date.monthNames) 
    */
        monthNames?: string[];
    /**
    The date format for the header month 
    */
        monthYearFormat?: string;
    /**
    The header month selector tooltip 
    */
        monthYearText?: string;
    /**
    The next month navigation button tooltip 
    */
        nextText?: string;
    /**
    The previous month navigation button tooltip 
    */
        prevText?: string;
    /**
    The scope (this reference) in which the handler function will be called. 
    */
        scope?: any;
    /**
    The class to apply to the selected cell. 
    */
        selectedCls?: string;
    /**
    False to hide the footer area containing the Today button and disable the keyboard handler for spacebar that
selects 
    */
        showToday?: boolean;
    /**
    Day index at which the week should begin, 0-based. 
    */
        startDay?: number;
    /**
    The text to display on the button that selects the current date 
    */
        todayText?: string;
    /**
    A string used to format the message for displaying in a tooltip over the button that selects the current date. 
    */
        todayTip?: string;
    }
    /**
    A date picker. 
    */
    export class Date extends Ext.Component {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.picker.DateConfig);
    /**
    Gets a single character to represent the day of the week 
    */
        getDayInitial(value: any):string;
    /**
    Gets the current selected value of the date field 
    */
        getValue():Date;
    /**
    Hides the month picker, if it's visible. 
    */
        hideMonthPicker(animate?: boolean):Ext.picker.Date;
    /**
    Sets the current value to today. 
    */
        selectToday():Ext.picker.Date;
    /**
    Replaces any existing disabled dates with new values and refreshes the DatePicker. 
    */
        setDisabledDates(disabledDates: string[]|RegExp):Ext.picker.Date;
    /**
    Replaces any existing disabled days (by index, 0-6) with new values and refreshes the DatePicker. 
    */
        setDisabledDays(disabledDays: number[]):Ext.picker.Date;
    /**
    Replaces any existing maxDate with the new value and refreshes the DatePicker. 
    */
        setMaxDate(value: Date):Ext.picker.Date;
    /**
    Replaces any existing minDate with the new value and refreshes the DatePicker. 
    */
        setMinDate(value: Date):Ext.picker.Date;
    /**
    Sets the value of the date field 
    */
        setValue(value: Date):Ext.picker.Date;
    /**
    Show the month picker 
    */
        showMonthPicker(animate?: boolean):Ext.picker.Date;
    /**
    Show the next month. 
    */
        showNextMonth(e: any):Ext.picker.Date;
    /**
    Show the next year. 
    */
        showNextYear():Ext.picker.Date;
    /**
    Show the previous month. 
    */
        showPrevMonth(e: any):Ext.picker.Date;
    /**
    Show the previous year. 
    */
        showPrevYear():Ext.picker.Date;
    }
    interface MonthConfig extends Ext.ComponentConfig {
    /**
    The text to display on the cancel button. 
    */
        cancelText?: string;
    /**
    The text to display on the ok button. 
    */
        okText?: string;
    /**
    The class to be added to selected items in the picker. 
    */
        selectedCls?: string;
    /**
    True to show ok and cancel buttons below the picker. 
    */
        showButtons?: boolean;
    /**
    The default value to set. 
    */
        value?: Date|number[];
    }
    /**
    A month / year picker component. 
    */
    export class Month extends Ext.Component {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.picker.MonthConfig);
    /**
    Modify the year display by passing an offset. 
    */
        adjustYear(offset?: number):void;
    /**
    Gets the selected value. 
    */
        getValue():number[];
    /**
    Checks whether the picker has a selection 
    */
        hasSelection():boolean;
    /**
    Set the value for the picker. 
    */
        setValue(value: Date|number[]):Ext.picker.Month;
    }
    interface TimeConfig extends Ext.view.BoundListConfig {
    /**
    The default time format string which can be overriden for localization support. 
    */
        format?: string;
    /**
    The number of minutes between each time value in the list. 
    */
        increment?: number;
    /**
    The maximum time to be shown in the list of times. 
    */
        maxValue?: Date;
    /**
    The minimum time to be shown in the list of times. 
    */
        minValue?: Date;
    }
    /**
    A time picker which provides a list of times from which to choose. 
    */
    export class Time extends Ext.view.BoundList {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.picker.TimeConfig);
    /**
    Set the maxValue and update the list of available times. 
    */
        setMaxValue(value: Date):void;
    /**
    Set the minValue and update the list of available times. 
    */
        setMinValue(value: Date):void;
    /**
    Update the list of available times in the list to be constrained within the minValue
and maxValue. 
    */
        updateList():void;
    }
}
declare module Ext.plugin {
    interface AbstractConfig {
    /**
    A name for the plugin that can be set at creation time to then retrieve the plugin
through getPlugin method. 
    */
        pluginId?: string;
    }
    /**
    The AbstractPlugin class is the base class from which user-implemented plugins should inherit. 
    */
    export class Abstract extends Ext.Base {
    /**
    true in this class to identify an object as an instantiated Plugin, or subclass thereof. 
    */
        isPlugin: boolean;
    /**
    Instantiates the plugin. 
    */
        constructor(config?: Ext.plugin.AbstractConfig);
    /**
    Creates clone of the plugin. 
    */
        clonePlugin(overrideCfg?: any):void;
    /**
    Returns the component to which this plugin is attached. 
    */
        getCmp():Ext.Component;
    /**
    The init method is invoked after initComponent method has been run for the client Component. 
    */
        init(client: Ext.Component):void;
    /**
    Sets the component to which this plugin is attached. 
    */
        setCmp(cmp: Ext.Component):void;
    }
    interface AbstractClipboardConfig extends Ext.plugin.AbstractConfig {
    /**
    This object is keyed by the names of the data formats supported by this plugin. 
    */
        formats?: any;
    /**
    The data format(s) to copy to the private, memory clipboard. 
    */
        memory?: string|string[];
    /**
    The format or formats in order of preference when pasting data. 
    */
        source?: string|string[];
    /**
    The data format to set in the system clipboard. 
    */
        system?: string;
    }
    /**
    This base class manages clipboard data transfer for a component. 
    */
    export class AbstractClipboard extends Ext.plugin.Abstract {
    /**
    Instantiates the plugin. 
    */
        constructor(config?: Ext.plugin.AbstractClipboardConfig);
    /**
    Returns the value of formats. 
    */
        getFormats():any;
    /**
    Returns the value of memory. 
    */
        getMemory():string|string[];
    /**
    Returns the value of source. 
    */
        getSource():string|string[];
    /**
    Returns the value of system. 
    */
        getSystem():string;
    /**
    Returns the element target to listen to copy/paste. 
    */
        getTarget(comp: Ext.Component):Ext.dom.Element;
    /**
    This method returns the selected data in text format. 
    */
        getTextData(format: string, erase: boolean):string;
    /**
    This method pastes the given text data. 
    */
        putTextData(data: any, format: string):void;
    /**
    Sets the value of formats. 
    */
        setFormats(formats: any):void;
    /**
    Sets the value of memory. 
    */
        setMemory(memory: string|string[]):void;
    /**
    Sets the value of source. 
    */
        setSource(source: string|string[]):void;
    /**
    Sets the value of system. 
    */
        setSystem(system: string):void;
    }
    interface LazyItemsConfig extends Ext.plugin.AbstractConfig {
    }
    /**
    This plugin defers the execution cost of the instantiation and initialization of child components of unrendered items. 
    */
    export class LazyItems extends Ext.plugin.Abstract {
    /**
    Instantiates the plugin. 
    */
        constructor(config?: Ext.plugin.LazyItemsConfig);
    }
    /**
    Creates plugin instances. 
    */
    export class Manager {
    /**
    Creates a new Plugin from the specified config object using the config object's ptype to determine the class to
insta
    */
        static create(config: any, defaultType?: Function):Ext.Component;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface ResponsiveConfig extends Ext.mixin.ResponsiveConfig {
    }
    /**
    This plugin can be added to component instances to process a responsiveConfig. 
    */
    export class Responsive extends Ext.mixin.Responsive {
    /**
     
    */
        constructor(config: Ext.plugin.ResponsiveConfig);
    }
    interface ViewportConfig extends Ext.plugin.ResponsiveConfig {
    }
    /**
    This plugin can be applied to any Component (although almost always to a Container)
to make it fill the browser viewp
    */
    export class Viewport extends Ext.plugin.Responsive {
    /**
     
    */
        constructor(config: Ext.plugin.ViewportConfig);
    }
}
declare module Ext.resizer {
    interface BorderSplitterConfig extends Ext.resizer.SplitterConfig {
    }
    /**
    Private utility class for Ext.layout.container.Border.

    */
    export class BorderSplitter extends Ext.resizer.Splitter {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.resizer.BorderSplitterConfig);
    }
    interface BorderSplitterTrackerConfig extends Ext.resizer.SplitterTrackerConfig {
    }
    /**
    Private utility class for Ext.BorderSplitter.

    */
    export class BorderSplitterTracker extends Ext.resizer.SplitterTracker {
    }
    interface HandleConfig extends Ext.ComponentConfig {
    }
    /**
    Provides a handle for 9-point resizing of Elements or Components.

    */
    export class Handle extends Ext.Component {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.resizer.HandleConfig);
    }
    interface ResizeTrackerConfig extends Ext.dd.DragTrackerConfig {
    }
    /**
    Private utility class for Ext.resizer.Resizer.

    */
    export class ResizeTracker extends Ext.dd.DragTracker {
    /**
     
    */
        constructor(config: Ext.resizer.ResizeTrackerConfig);
    /**
    Create a proxy for this resizer 
    */
        createProxy(target: Ext.Component|Ext.dom.Element):Ext.dom.Element;
    }
    interface ResizerConfig {
    /**
    An element, or a Region into which the resize operation must be constrained.

    */
        constrainTo?: Ext.dom.Element|Ext.util.Region;
    /**
    Specify as true to update the target (Element or Component) dynamically during
dragging. 
    */
        dynamic?: boolean;
    /**
    String consisting of the resize handles to display. 
    */
        handles?: string;
    /**
    Optional. 
    */
        height?: number;
    /**
    The increment to snap the height resize in pixels. 
    */
        heightIncrement?: number;
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    /**
    The maximum height for the element 
    */
        maxHeight?: number;
    /**
    The maximum width for the element 
    */
        maxWidth?: number;
    /**
    The minimum height for the element 
    */
        minHeight?: number;
    /**
    The minimum width for the element 
    */
        minWidth?: number;
    /**
    True to ensure that the resize handles are always visible, false indicates resizing by cursor changes only 
    */
        pinned?: boolean;
    /**
    True to preserve the original ratio between height and width during resize 
    */
        preserveRatio?: boolean;
    /**
    The Element or Component to resize.

    */
        target?: Ext.dom.Element|Ext.Component;
    /**
    True for transparent handles. 
    */
        transparent?: boolean;
    /**
    Optional. 
    */
        width?: number;
    /**
    The increment to snap the width resize in pixels. 
    */
        widthIncrement?: number;
    }
    /**
    Applies drag handles to an element or component to make it resizable. 
    */
    export class Resizer extends Ext.Base {
    /**
    Outer element for resizing behavior.

    */
        el: Ext.dom.Element;
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
    Reference to the original resize target if the element of the original resize target was a
Field, or an IMG or a TEXT
    */
        originalTarget: Ext.dom.Element|Ext.Component;
    /**
    

    */
        resizeTracker: Ext.resizer.ResizeTracker;
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Returns the element that was configured with the el or target config property. 
    */
        getEl():Ext.dom.Element;
    /**
    Returns the element or component that was configured with the target config property. 
    */
        getTarget():Ext.dom.Element|Ext.Component;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Perform a manual resize and fires the 'resize' event. 
    */
        resizeTo(width: number, height: number):void;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    }
    interface SplitterConfig extends Ext.ComponentConfig {
    /**
    True to enable dblclick to toggle expand and collapse on the collapseTarget Panel. 
    */
        collapseOnDblClick?: boolean;
    /**
    A string describing the relative position of the immediate sibling Panel to collapse. 
    */
        collapseTarget?: string|Ext.panel.Panel;
    /**
    A class to add to the splitter when it is collapsed. 
    */
        collapsedCls?: string;
    /**
    True to show a mini-collapse tool in the Splitter to toggle expand and collapse on the collapseTarget Panel. 
    */
        collapsible?: boolean;
    /**
    Provides a default maximum width or height for the two components
that the splitter is between. 
    */
        defaultSplitMax?: number;
    /**
    Provides a default minimum width or height for the two components
that the splitter is between. 
    */
        defaultSplitMin?: number;
    /**
    Set to false to prevent this Splitter's mini-collapse tool from managing the collapse
state of the collapseTarget.

    */
        performCollapse?: boolean;
    /**
    The size of the splitter. 
    */
        size?: number;
    /**
    Any configuration options to be passed to the underlying Ext.resizer.SplitterTracker.

    */
        tracker?: any;
    }
    /**
    This class functions between siblings of a VBox or HBox
layout to resize both immediate siblings. 
    */
    export class Splitter extends Ext.Component {
    /**
    Orientation of this Splitter. 
    */
        orientation: string;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.resizer.SplitterConfig);
    /**
    Returns the config object (with an xclass property) for the splitter tracker. 
    */
        getTrackerConfig():void;
    }
    interface SplitterTrackerConfig extends Ext.dd.DragTrackerConfig {
    }
    /**
    Private utility class for Ext.Splitter.

    */
    export class SplitterTracker extends Ext.dd.DragTracker {
    }
}
declare module Ext.scroll {
    interface DomScrollerConfig extends Ext.scroll.ScrollerConfig {
    }
    /**
    

    */
    export class DomScroller extends Ext.scroll.Scroller {
    /**
     
    */
        constructor(config: Ext.scroll.DomScrollerConfig);
    }
    interface IndicatorConfig extends Ext.WidgetConfig {
    /**
    Number of milliseconds to delay hiding Indicators when scrolling ends. 
    */
        hideDelay?: number;
    /**
    The minimum length for the indicator. 
    */
        minLength?: number;
    }
    /**
    Provides a visual indicator of scroll position while scrolling using a TouchScroller. 
    */
    export class Indicator extends Ext.Widget {
    /**
     
    */
        constructor(config: Ext.scroll.IndicatorConfig);
    /**
    Returns the value of hideDelay. 
    */
        getHideDelay():number;
    /**
    Returns the value of minLength. 
    */
        getMinLength():number;
    /**
    Hides this scroll indicator 
    */
        hide():void;
    /**
    Sets the value of hideDelay. 
    */
        setHideDelay(hideDelay: number):void;
    /**
    Sets the value of minLength. 
    */
        setMinLength(minLength: number):void;
    /**
    Sets the value of this scroll indicator. 
    */
        setValue(value: number):void;
    /**
    Shows this scroll indicator 
    */
        show():void;
    }
    interface ScrollerConfig extends Ext.EventedConfig {
    /**
     
    */
        direction?: any;
    /**
    true to lock the direction of the scroller when the user starts scrolling. 
    */
        directionLock?: boolean;
    /**
    true to disable this scroller. 
    */
        disabled?: boolean;
    /**
    The element to make scrollable.

    */
        element?: string|HTMLElement|Ext.dom.Element;
    /**
    false to hide scroll indicators while scrolling, true to show scroll indicators,
or a config object for Ext.scroll.In
    */
        indicators?: any;
    /**
    A Ext.fx.easing.BoundMomentum config object for configuring the momentum
of the Scroller. 
    */
        momentumEasing?: any;
    /**
    true to enable scrolling of "right-to-left" content. 
    */
        rtl?: boolean;
    /**
    true or 'auto' to enable horizontal auto-scrolling. 
    */
        x?: boolean|string;
    /**
    true or 'auto' to enable vertical auto-scrolling. 
    */
        y?: boolean|string;
    }
    /**
    Ext.scroll.Scroller allows any element to have scrollable content, both on desktop and
touch-screen devices, and defi
    */
    export class Scroller extends Ext.Evented {
    /**
    If this property is specified by the target class of this mixin its properties are
used to configure the created Ext.
    */
        factoryConfig: any;
    /**
     
    */
        constructor(config: Ext.scroll.ScrollerConfig);
    /**
    Adds a "partner" scroller. 
    */
        addPartner(partner: Ext.scroll.Scroller, axis?: string):void;
    /**
    Returns the value of direction. 
    */
        getDirection():any;
    /**
    Returns the value of directionLock. 
    */
        getDirectionLock():boolean;
    /**
    Returns the value of disabled. 
    */
        getDisabled():boolean;
    /**
    Returns the value of element. 
    */
        getElement():string|HTMLElement|Ext.dom.Element;
    /**
    Returns the value of indicators. 
    */
        getIndicators():any;
    /**
    Returns the maximum scroll position for this scroller 
    */
        getMaxPosition():any;
    /**
    Returns the maximum scroll position for this scroller for scrolling that is initiated
by the user via mouse or touch. 
    */
        getMaxUserPosition():any;
    /**
    Returns the value of momentumEasing. 
    */
        getMomentumEasing():any;
    /**
    Returns the current scroll position 
    */
        getPosition():any;
    /**
    Returns this scroller. 
    */
        getScroller():Ext.scroll.Scroller;
    /**
    Returns the size of the scrollable content 
    */
        getSize():any;
    /**
    Returns the value of x. 
    */
        getX():boolean|string;
    /**
    Returns the value of y. 
    */
        getY():boolean|string;
    /**
    Determines if the passed element is within the visible x and y scroll viewport. 
    */
        isInView(el: string|HTMLElement|Ext.dom.Element):any;
    /**
    Refreshes the scroller size and maxPosition. 
    */
        refresh(immediate: boolean):Ext.scroll.Scroller;
    /**
    Scrolls by the passed delta values, optionally animating. 
    */
        scrollBy(deltaX: any, deltaY: any, animate: any):void;
    /**
    Scrolls to the given position. 
    */
        scrollTo(x: number, y: number, animation?: any):Ext.scroll.Scroller;
    /**
    Sets the value of direction. 
    */
        setDirection(direction: any):void;
    /**
    Sets the value of directionLock. 
    */
        setDirectionLock(directionLock: boolean):void;
    /**
    Sets the value of disabled. 
    */
        setDisabled(disabled: boolean):void;
    /**
    Sets the value of element. 
    */
        setElement(element: string|HTMLElement|Ext.dom.Element):void;
    /**
    Sets the value of indicators. 
    */
        setIndicators(indicators: any):void;
    /**
    Sets the value of momentumEasing. 
    */
        setMomentumEasing(momentumEasing: any):void;
    /**
    Sets the value of x. 
    */
        setX(x: boolean|string):void;
    /**
    Sets the value of y. 
    */
        setY(y: boolean|string):void;
    }
    interface TouchScrollerConfig extends Ext.scroll.ScrollerConfig {
    /**
    The size of each slot to snap to in 'px', can be either an object with x and y values, i.e:

 {
     x: 50,
     y: 1
    */
        slotSnapSize?: any;
    }
    /**
    Momentum scrolling is one of the most important parts of the user experience on touch-screen
devices. 
    */
    export class TouchScroller extends Ext.scroll.Scroller {
    /**
     
    */
        constructor(config: Ext.scroll.TouchScrollerConfig);
    /**
    Returns the value of slotSnapSize. 
    */
        getSlotSnapSize():any;
    /**
    Sets the value of size. 
    */
        setSize(size: any):void;
    /**
    Sets the value of slotSnapSize. 
    */
        setSlotSnapSize(slotSnapSize: any):void;
    }
}
declare module Ext.selection {
    interface CellModelConfig extends Ext.selection.DataViewModelConfig {
    /**
    Set this configuration to true to prevent wrapping around of selection as
a user navigates to the first or last column. 
    */
        preventWrap?: boolean;
    }
    /**
    A selection model for grid panels which allows selection of a single cell at a time. 
    */
    export class CellModel extends Ext.selection.DataViewModel {
    /**
     
    */
        deselectOnContainerClick: boolean;
    /**
    Returns the current position in the format {row: row, column: column} 
    */
        getCurrentPosition():void;
    /**
    Returns the current position in the format {row: row, column: column} 
    */
        getPosition():Ext.grid.CellContext;
    /**
    Sets the current position. 
    */
        setCurrentPosition(position: any, suppressEvent: boolean):void;
    /**
    Sets the current position. 
    */
        setPosition(position: any, suppressEvent: boolean):void;
    }
    interface CheckboxModelConfig extends Ext.selection.RowModelConfig {
    /**
    True if rows can only be selected by clicking on the checkbox column, not by clicking
on the row itself. 
    */
        checkOnly?: boolean;
    /**
    The selector for determining whether the checkbox element is clicked. 
    */
        checkSelector?: string;
    /**
    The index at which to insert the checkbox column. 
    */
        injectCheckbox?: number|string;
    /**
    Configure as false to not display the header checkbox at the top of the column. 
    */
        showHeaderCheckbox?: boolean;
    }
    /**
    A selection model that renders a column of checkboxes that can be toggled to
select or deselect rows. 
    */
    export class CheckboxModel extends Ext.selection.RowModel {
    /**
     
    */
        constructor();
    /**
    Retrieve a configuration to be used in a HeaderContainer. 
    */
        getHeaderConfig():void;
    /**
    Generates the HTML to be rendered in the injected checkbox column for each row. 
    */
        renderer(value: any, metaData: any, record: any, rowIndex: any, colIndex: any, store: any, view: any):void;
    }
    interface DataViewModelConfig extends Ext.selection.ModelConfig {
    /**
     
    */
        enableKeyNav?: boolean;
    }
    /**
    The DataViewModel selection model implements item-based selection for Ext.view.View. 
    */
    export class DataViewModel extends Ext.selection.Model {
    }
    interface ModelConfig extends Ext.mixin.ObservableConfig {
    /**
    Allow users to deselect a record in a DataView, List or Grid. 
    */
        allowDeselect?: boolean;
    /**
    True to ignore selections that are made when using the right mouse button if there are
records that are already selec
    */
        ignoreRightMouseSelection?: boolean;
    /**
    Mode of selection. 
    */
        mode?: any;
    /**
    Remove records from the selection when they are removed from the store. 
    */
        pruneRemoved?: boolean;
    /**
    true to toggle the selection state of an item when clicked. 
    */
        toggleOnClick?: boolean;
    }
    /**
    Tracks what records are currently selected in a data-bound component. 
    */
    export class Model extends Ext.mixin.Observable {
    /**
    If this property is specified by the target class of this mixin its properties are
used to configure the created Ext.
    */
        factoryConfig: any;
    /**
    true in this class to identify an object as an instantiated selection model, or subclass thereof. 
    */
        isSelectionModel: boolean;
    /**
    Allows multiple views to be controlled by one selection model. 
    */
        beforeViewRender(view: Ext.view.View):void;
    /**
    Binds a store to this instance. 
    */
        bindStore(store?: Ext.data.AbstractStore|string):void;
    /**
    Binds listeners for this component to the store. 
    */
        bindStoreListeners(store: Ext.data.AbstractStore):void;
    /**
    Deselects a record instance by record instance or index. 
    */
        deselect(records: Ext.data.Model[]|number, suppressEvent?: boolean):void;
    /**
    Deselects all records in the view. 
    */
        deselectAll(suppressEvent?: boolean):void;
    /**
    Deselects a range of rows if the selection model is not locked. 
    */
        deselectRange(startRow: Ext.data.Model|number, endRow: Ext.data.Model|number):void;
    /**
    Returns the count of selected records. 
    */
        getCount():number;
    /**
    Returns an array of the currently selected records. 
    */
        getSelection():Ext.data.Model[];
    /**
    Returns the current selectionMode. 
    */
        getSelectionMode():string;
    /**
    Gets the listeners to bind to a new store. 
    */
        getStoreListeners():any;
    /**
    Returns true if there are any a selected records. 
    */
        hasSelection():boolean;
    /**
    Returns true if the selections are locked. 
    */
        isLocked():boolean;
    /**
    Returns true if the specified row is selected. 
    */
        isRangeSelected(from: Ext.data.Model|number, to: Ext.data.Model|number):boolean;
    /**
    Returns true if the specified row is selected. 
    */
        isSelected(record: Ext.data.Model|number):boolean;
    /**
    Template method, it is called when a new store is bound
to the current instance. 
    */
        onBindStore(store: Ext.data.AbstractStore, initial: boolean):void;
    /**
    Called by the owning grid's header container
when a column header is activated by the UI (clicked, or receives a SPAC
    */
        onHeaderClick():void;
    /**
    Template method, it is called when an existing store is unbound
from the current instance. 
    */
        onUnbindStore(store: Ext.data.AbstractStore, initial: boolean):void;
    /**
    Selects a record instance by record instance or index. 
    */
        select(records: Ext.data.Model[]|number, keepExisting?: boolean, suppressEvent?: boolean):void;
    /**
    Selects all records in the view. 
    */
        selectAll(suppressEvent: boolean):void;
    /**
    Selects a range of rows if the selection model is not locked. 
    */
        selectRange(startRow: Ext.data.Model|number, endRow: Ext.data.Model|number, keepExisting?: boolean):void;
    /**
    Locks the current selection and disables any changes from happening to the selection. 
    */
        setLocked(locked: boolean):void;
    /**
    Sets the current selectionMode. 
    */
        setSelectionMode(selMode: string):void;
    /**
    Unbinds listeners from this component to the store. 
    */
        unbindStoreListeners(store: Ext.data.AbstractStore):void;
    }
    interface RowModelConfig extends Ext.selection.DataViewModelConfig {
    }
    /**
    RowModel Selection Model implements row based navigation for
grid panels via user input. 
    */
    export class RowModel extends Ext.selection.DataViewModel {
    /**
     
    */
        deselectOnContainerClick: boolean;
    /**
    Returns position of the first selected cell in the selection in the format {row: row, column: column} 
    */
        getCurrentPosition():void;
    /**
    Selects the record immediately following the currently selected record. 
    */
        selectNext(keepExisting?: boolean, suppressEvent?: boolean):boolean;
    /**
    Selects the record that precedes the currently selected record. 
    */
        selectPrevious(keepExisting?: boolean, suppressEvent?: boolean):boolean;
    }
    interface TreeModelConfig extends Ext.selection.RowModelConfig {
    /**
    true to select the row when clicking on the icon to collapse or expand
a tree node. 
    */
        selectOnExpanderClick?: boolean;
    }
    /**
    This selection model is created by default for Ext.tree.Panel. 
    */
    export class TreeModel extends Ext.selection.RowModel {
    /**
     
    */
        constructor(config: Ext.selection.TreeModelConfig);
    }
}
declare module Ext.slider {
    interface MultiConfig extends Ext.form.field.BaseConfig {
    /**
    Determines whether or not clicking on the Slider axis will change the slider. 
    */
        clickToChange?: boolean;
    /**
    True to disallow thumbs from overlapping one another. 
    */
        constrainThumbs?: boolean;
    /**
    The number of decimal places to which to round the Slider's value. 
    */
        decimalPrecision?: number|boolean;
    /**
    How many units to change the slider when adjusting by drag and drop. 
    */
        increment?: number;
    /**
    How many units to change the Slider when adjusting with keyboard navigation. 
    */
        keyIncrement?: number;
    /**
    The maximum value for the Slider. 
    */
        maxValue?: number;
    /**
    The minimum value for the Slider. 
    */
        minValue?: number;
    /**
    A function used to display custom text for the slider tip. 
    */
        tipText?: Function;
    /**
    True to use an Ext.slider.Tip to display tips for the value. 
    */
        useTips?: any;
    /**
    Array of Number values with which to initalize the slider. 
    */
        values?: number[];
    /**
    Orient the Slider vertically rather than horizontally. 
    */
        vertical?: boolean;
    /**
    Set to true to calculate snap points based on increments from zero as opposed to
from this Slider's minValue. 
    */
        zeroBasedSnapping?: boolean;
    }
    /**
    Slider which supports vertical or horizontal orientation, keyboard adjustments, configurable snapping, axis clicking

    */
    export class Multi extends Ext.form.field.Base {
    /**
    True while the thumb is in a drag operation 
    */
        dragging: boolean;
    /**
    Array containing references to each thumb 
    */
        thumbs: any[];
    /**
    Creates new Component. 
    */
        constructor(config: Ext.slider.MultiConfig);
    /**
    Creates a new thumb and adds it to the slider 
    */
        addThumb(value?: number):Ext.slider.Thumb;
    /**
    Returns an array of values - one for the location of each thumb 
    */
        getValues():number[];
    /**
    Sets the maximum value for the slider instance. 
    */
        setMaxValue(val: number):void;
    /**
    Sets the minimum value for the slider instance. 
    */
        setMinValue(val: number):void;
    /**
    Synchronizes thumbs position to the proper proportion of the total component width based on the current slider
value. 
    */
        syncThumbs():void;
    }
    interface SingleConfig extends Ext.slider.MultiConfig {
    /**
    This controls when the value of the slider is published to the ViewModel. 
    */
        publishOnComplete?: boolean;
    }
    /**
    Slider which supports vertical or horizontal orientation, keyboard adjustments, configurable snapping, axis clicking

    */
    export class Single extends Ext.slider.Multi {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.slider.SingleConfig);
    }
    interface ThumbConfig {
    /**
    True to constrain the thumb so that it cannot overlap its siblings 
    */
        constrain?: boolean;
    /**
    The Slider to render to.

    */
        slider?: Ext.slider.Multi;
    }
    /**
    Represents a single thumb element on a Slider. 
    */
    export class Thumb extends Ext.Base {
    /**
    The slider this thumb is contained within

    */
        slider: Ext.slider.Multi|Ext.slider.Multi;
    /**
    Creates new slider thumb. 
    */
        constructor(config?: Ext.slider.ThumbConfig);
    /**
    Disables the thumb if it is currently enabled 
    */
        disable():void;
    /**
    Enables the thumb if it is currently disabled 
    */
        enable():void;
    /**
    Sets up an Ext.dd.DragTracker for this thumb 
    */
        initEvents():void;
    /**
    Renders the thumb into a slider 
    */
        render():void;
    }
    interface TipConfig extends Ext.tip.TipConfig {
    /**
    Alignment configuration for the tip to the slider. 
    */
        align?: string;
    /**
    Offsets for aligning the tip to the slider. 
    */
        offsets?: any[];
    /**
    Sets the position for where the tip will be displayed related to the thumb. 
    */
        position?: string;
    }
    /**
    Simple plugin for using an Ext.tip.Tip with a slider to show the slider value. 
    */
    export class Tip extends Ext.tip.Tip {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.slider.TipConfig);
    /**
    Used to create the text that appears in the Tip's body. 
    */
        getText(thumb: Ext.slider.Thumb):string;
    }
    interface WidgetConfig extends Ext.WidgetConfig {
    /**
    Determines whether or not clicking on the Slider axis will change the slider. 
    */
        clickToChange?: boolean;
    /**
    The maximum value for any slider thumb. 
    */
        maxValue?: number;
    /**
    The minimum value for any slider thumb. 
    */
        minValue?: number;
    /**
    This controls when the value of the slider is published to the ViewModel. 
    */
        publishOnComplete?: boolean;
    /**
    One more values for the position of the slider's thumb(s). 
    */
        value?: number|number[];
    /**
    Orients the slider vertically rather than horizontally. 
    */
        vertical?: boolean;
    }
    /**
    A Widget-based implementation of a slider.

    */
    export class Widget extends Ext.Widget {
    /**
     
    */
        constructor(config: Ext.slider.WidgetConfig);
    /**
    Returns the value of clickToChange. 
    */
        getClickToChange():boolean;
    /**
    Returns the value of maxValue. 
    */
        getMaxValue():number;
    /**
    Returns the value of minValue. 
    */
        getMinValue():number;
    /**
    Returns the value of publishOnComplete. 
    */
        getPublishOnComplete():boolean;
    /**
    Returns the value of ui. 
    */
        getUi():string;
    /**
    Returns the current value of the slider 
    */
        getValue(index: number):number|number[];
    /**
    Returns an array of values - one for the location of each thumb 
    */
        getValues():number[];
    /**
    Returns the value of vertical. 
    */
        getVertical():boolean;
    /**
    Sets the value of clickToChange. 
    */
        setClickToChange(clickToChange: boolean):void;
    /**
    Sets the value of maxValue. 
    */
        setMaxValue(maxValue: number):void;
    /**
    Sets the value of minValue. 
    */
        setMinValue(minValue: number):void;
    /**
    Sets the value of publishOnComplete. 
    */
        setPublishOnComplete(publishOnComplete: boolean):void;
    /**
    Programmatically sets the value of the Slider. 
    */
        setThumbValue(index: number|number[], value: number, animate?: boolean):Ext.slider.Multi;
    /**
    Sets the value of ui. 
    */
        setUi(ui: string):void;
    /**
    Sets the value of value. 
    */
        setValue(value: number|number[]):void;
    /**
    Sets the value of vertical. 
    */
        setVertical(vertical: boolean):void;
    }
}
declare module Ext.sparkline {
    interface BarConfig extends Ext.sparkline.BarBaseConfig {
    /**
    The bar color for positive values. 
    */
        barColor?: string;
    /**
    The pixel spacing between bars. 
    */
        barSpacing?: number;
    /**
    The pixel width of bars. 
    */
        barWidth?: number;
    /**
    If true then the y values supplied to plot will be clipped to fall
between chartRangeMin and chartRangeMax - By defau
    */
        chartRangeClip?: boolean;
    /**
    The maximum value to use for the range of Y values of the chart - Defaults to the minimum value supplied.

    */
        chartRangeMax?: number;
    /**
    The minimum value to use for the range of Y values of the chart - Defaults to the minimum value supplied.

    */
        chartRangeMin?: number;
    /**
    An object which uses range specifiers as keys to
indicate bar color values for a range of values. 
    */
        colorMap?: any;
    /**
    The bar color for negative values. 
    */
        negBarColor?: string;
    /**
    The bar color for null values. 
    */
        nullColor?: string;
    /**
    An array of colours to use for stacked bar charts. 
    */
        stackedBarColor?: string[];
    /**
    Centers the Y axis at zero by default. 
    */
        zeroAxis?: boolean;
    /**
    The bar color for zero values.

    */
        zeroColor?: string;
    }
    /**
    Plots a bar chart of the values in the passed values array. 
    */
    export class Bar extends Ext.sparkline.BarBase {
    /**
     
    */
        constructor(config: Ext.sparkline.BarConfig);
    /**
    Returns the value of barColor. 
    */
        getBarColor():string;
    /**
    Returns the value of barSpacing. 
    */
        getBarSpacing():number;
    /**
    Returns the value of barWidth. 
    */
        getBarWidth():number;
    /**
    Returns the value of chartRangeClip. 
    */
        getChartRangeClip():boolean;
    /**
    Returns the value of chartRangeMax. 
    */
        getChartRangeMax():number;
    /**
    Returns the value of chartRangeMin. 
    */
        getChartRangeMin():number;
    /**
    Returns the value of colorMap. 
    */
        getColorMap():any;
    /**
    Returns the value of negBarColor. 
    */
        getNegBarColor():string;
    /**
    Returns the value of nullColor. 
    */
        getNullColor():string;
    /**
    Returns the value of stackedBarColor. 
    */
        getStackedBarColor():string[];
    /**
    Returns the value of zeroAxis. 
    */
        getZeroAxis():boolean;
    /**
    Returns the value of zeroColor. 
    */
        getZeroColor():string;
    /**
    Sets the value of barColor. 
    */
        setBarColor(barColor: string):void;
    /**
    Sets the value of barSpacing. 
    */
        setBarSpacing(barSpacing: number):void;
    /**
    Sets the value of barWidth. 
    */
        setBarWidth(barWidth: number):void;
    /**
    Sets the value of chartRangeClip. 
    */
        setChartRangeClip(chartRangeClip: boolean):void;
    /**
    Sets the value of chartRangeMax. 
    */
        setChartRangeMax(chartRangeMax: number):void;
    /**
    Sets the value of chartRangeMin. 
    */
        setChartRangeMin(chartRangeMin: number):void;
    /**
    Sets the value of colorMap. 
    */
        setColorMap(colorMap: any):void;
    /**
    Sets the value of negBarColor. 
    */
        setNegBarColor(negBarColor: string):void;
    /**
    Sets the value of nullColor. 
    */
        setNullColor(nullColor: string):void;
    /**
    Sets the value of stackedBarColor. 
    */
        setStackedBarColor(stackedBarColor: string[]):void;
    /**
    Sets the value of zeroAxis. 
    */
        setZeroAxis(zeroAxis: boolean):void;
    /**
    Sets the value of zeroColor. 
    */
        setZeroColor(zeroColor: string):void;
    }
    interface BarBaseConfig extends Ext.sparkline.BaseConfig {
    }
    /**
    Base class for bar highlighting

    */
    export class BarBase extends Ext.sparkline.Base {
    /**
     
    */
        constructor(config: Ext.sparkline.BarBaseConfig);
    }
    interface BaseConfig extends Ext.WidgetConfig {
    /**
    Set to true to disable mouseover tooltips. 
    */
        disableTooltips?: boolean;
    /**
    The hex value for fill color in graphs which fill areas (Line). 
    */
        fillColor?: string;
    /**
    The hex value for the highlight color to use when mouseing over a graph segment. 
    */
        highlightColor?: string;
    /**
    How much to lighten the highlight color by when mouseing over a graph segment. 
    */
        highlightLighten?: number;
    /**
    The hex value for line colors in graphs which display lines (Box, Discrete and {@link Ext.sparkline.Line Line). 
    */
        lineColor?: string;
    /**
    An XTemplate used to display the value or values in a tooltip when hovering over a Sparkline. 
    */
        tipTpl?: string|Ext.XTemplate;
    /**
    A string to prepend to each field displayed in a tooltip. 
    */
        tooltipPrefix?: string;
    /**
    Null values will not have a tooltip displayed. 
    */
        tooltipSkipNull?: boolean;
    /**
    A string to append to each field displayed in a tooltip. 
    */
        tooltipSuffix?: string;
    /**
    An array of numbers which define the chart.

    */
        values?: number[];
    }
    /**
    The base class for ExtJS SparkLines. 
    */
    export class Base extends Ext.Widget {
    /**
     
    */
        constructor(config: Ext.sparkline.BaseConfig);
    /**
    Returns the value of baseCls. 
    */
        getBaseCls():string;
    /**
    Returns the value of defaultPixelsPerValue. 
    */
        getDefaultPixelsPerValue():number;
    /**
    Returns the value of disableInteraction. 
    */
        getDisableInteraction():boolean;
    /**
    Returns the value of disableTooltips. 
    */
        getDisableTooltips():boolean;
    /**
    Returns the value of enableHighlight. 
    */
        getEnableHighlight():boolean;
    /**
    Returns the value of enableTagOptions. 
    */
        getEnableTagOptions():boolean;
    /**
    Returns the value of fillColor. 
    */
        getFillColor():string;
    /**
    Returns the value of highlightColor. 
    */
        getHighlightColor():string;
    /**
    Returns the value of highlightLighten. 
    */
        getHighlightLighten():number;
    /**
    Returns the value of lineColor. 
    */
        getLineColor():string;
    /**
    Return a region id for a given x/y co-ordinate 
    */
        getRegion():void;
    /**
    Fetch the HTML to display as a tooltip 
    */
        getRegionTooltip(region: any):void;
    /**
    Returns the value of tagValuesAttribute. 
    */
        getTagValuesAttribute():string;
    /**
    Returns the value of tipTpl. 
    */
        getTipTpl():string|Ext.XTemplate;
    /**
    Returns the value of tooltipPrefix. 
    */
        getTooltipPrefix():string;
    /**
    Returns the value of tooltipSkipNull. 
    */
        getTooltipSkipNull():boolean;
    /**
    Returns the value of tooltipSuffix. 
    */
        getTooltipSuffix():string;
    /**
    Returns the value of values. 
    */
        getValues():number[];
    /**
    Render the chart to the canvas 
    */
        renderGraph():void;
    /**
    Sets the value of baseCls. 
    */
        setBaseCls(baseCls: string):void;
    /**
    Sets the value of defaultPixelsPerValue. 
    */
        setDefaultPixelsPerValue(defaultPixelsPerValue: number):void;
    /**
    Sets the value of disableInteraction. 
    */
        setDisableInteraction(disableInteraction: boolean):void;
    /**
    Sets the value of disableTooltips. 
    */
        setDisableTooltips(disableTooltips: boolean):void;
    /**
    Sets the value of enableHighlight. 
    */
        setEnableHighlight(enableHighlight: boolean):void;
    /**
    Sets the value of enableTagOptions. 
    */
        setEnableTagOptions(enableTagOptions: boolean):void;
    /**
    Sets the value of fillColor. 
    */
        setFillColor(fillColor: string):void;
    /**
    Sets the value of highlightColor. 
    */
        setHighlightColor(highlightColor: string):void;
    /**
    Sets the value of highlightLighten. 
    */
        setHighlightLighten(highlightLighten: number):void;
    /**
    Sets the value of lineColor. 
    */
        setLineColor(lineColor: string):void;
    /**
    Sets the value of tagValuesAttribute. 
    */
        setTagValuesAttribute(tagValuesAttribute: string):void;
    /**
    Sets the value of tipTpl. 
    */
        setTipTpl(tipTpl: string|Ext.XTemplate):void;
    /**
    Sets the value of tooltipPrefix. 
    */
        setTooltipPrefix(tooltipPrefix: string):void;
    /**
    Sets the value of tooltipSkipNull. 
    */
        setTooltipSkipNull(tooltipSkipNull: boolean):void;
    /**
    Sets the value of tooltipSuffix. 
    */
        setTooltipSuffix(tooltipSuffix: string):void;
    /**
    Sets the value of values. 
    */
        setValues(values: number[]):void;
    }
    interface BoxConfig extends Ext.sparkline.BaseConfig {
    /**
    The color of the box fill. 
    */
        boxFillColor?: string;
    /**
    The color of the box outline. 
    */
        boxLineColor?: string;
    /**
    The maximum value to use for the range of Y values of the chart - Defaults to the minimum value supplied.

    */
        chartRangeMax?: number;
    /**
    The minimum value to use for the range of Y values of the chart - Defaults to the minimum value supplied.

    */
        chartRangeMin?: number;
    /**
    The color of the median line. 
    */
        medianColor?: string;
    /**
    The fill color of the outlier circles. 
    */
        outlierFillColor?: string;
    /**
    The inter-quartile range multipler used to calculate values that qualify as an outlier. 
    */
        outlierIQR?: number;
    /**
    The color of the outlier circles' outline. 
    */
        outlierLineColor?: string;
    /**
    By default the points are calciulated from the input values array. 
    */
        raw?: boolean;
    /**
    Configure as false to not show outlier circles. 
    */
        showOutliers?: boolean;
    /**
    The radius of the outlier circles. 
    */
        spotRadius?: number;
    /**
    If set, a crosshair will be drawn at the specified value point.

    */
        target?: number;
    /**
    The color of the crosshair drawn at the pointe specified by target. 
    */
        targetColor?: number;
    /**
    The color of the whiskers. 
    */
        whiskerColor?: string;
    }
    /**
    Generates a box plot graph from the provided values array. 
    */
    export class Box extends Ext.sparkline.Base {
    /**
     
    */
        constructor(config: Ext.sparkline.BoxConfig);
    /**
    Returns the value of boxFillColor. 
    */
        getBoxFillColor():string;
    /**
    Returns the value of boxLineColor. 
    */
        getBoxLineColor():string;
    /**
    Returns the value of chartRangeMax. 
    */
        getChartRangeMax():number;
    /**
    Returns the value of chartRangeMin. 
    */
        getChartRangeMin():number;
    /**
    Returns the value of medianColor. 
    */
        getMedianColor():string;
    /**
    Returns the value of outlierFillColor. 
    */
        getOutlierFillColor():string;
    /**
    Returns the value of outlierIQR. 
    */
        getOutlierIQR():number;
    /**
    Returns the value of outlierLineColor. 
    */
        getOutlierLineColor():string;
    /**
    Returns the value of raw. 
    */
        getRaw():boolean;
    /**
    Returns the value of showOutliers. 
    */
        getShowOutliers():boolean;
    /**
    Returns the value of spotRadius. 
    */
        getSpotRadius():number;
    /**
    Returns the value of target. 
    */
        getTarget():number;
    /**
    Returns the value of targetColor. 
    */
        getTargetColor():number;
    /**
    Returns the value of tooltipFormatFieldlistKey. 
    */
        getTooltipFormatFieldlistKey():string;
    /**
    Returns the value of whiskerColor. 
    */
        getWhiskerColor():string;
    /**
    Sets the value of boxFillColor. 
    */
        setBoxFillColor(boxFillColor: string):void;
    /**
    Sets the value of boxLineColor. 
    */
        setBoxLineColor(boxLineColor: string):void;
    /**
    Sets the value of chartRangeMax. 
    */
        setChartRangeMax(chartRangeMax: number):void;
    /**
    Sets the value of chartRangeMin. 
    */
        setChartRangeMin(chartRangeMin: number):void;
    /**
    Sets the value of medianColor. 
    */
        setMedianColor(medianColor: string):void;
    /**
    Sets the value of outlierFillColor. 
    */
        setOutlierFillColor(outlierFillColor: string):void;
    /**
    Sets the value of outlierIQR. 
    */
        setOutlierIQR(outlierIQR: number):void;
    /**
    Sets the value of outlierLineColor. 
    */
        setOutlierLineColor(outlierLineColor: string):void;
    /**
    Sets the value of raw. 
    */
        setRaw(raw: boolean):void;
    /**
    Sets the value of showOutliers. 
    */
        setShowOutliers(showOutliers: boolean):void;
    /**
    Sets the value of spotRadius. 
    */
        setSpotRadius(spotRadius: number):void;
    /**
    Sets the value of target. 
    */
        setTarget(target: number):void;
    /**
    Sets the value of targetColor. 
    */
        setTargetColor(targetColor: number):void;
    /**
    Sets the value of tooltipFormatFieldlistKey. 
    */
        setTooltipFormatFieldlistKey(tooltipFormatFieldlistKey: string):void;
    /**
    Sets the value of whiskerColor. 
    */
        setWhiskerColor(whiskerColor: string):void;
    }
    interface BulletConfig extends Ext.sparkline.BaseConfig {
    /**
    Set this to a number to change the base start number.

    */
        base?: number;
    /**
    The color of the performance measure horizontal bar. 
    */
        performanceColor?: string;
    /**
    An array of colors to use for each qualitative range background color. 
    */
        rangeColors?: string[];
    /**
    The colour of the vertical target marker. 
    */
        targetColor?: string;
    /**
    Width of the target bar in pixels. 
    */
        targetWidth?: number;
    }
    /**
    Plots a bullet graph based upon the input values array. 
    */
    export class Bullet extends Ext.sparkline.Base {
    /**
     
    */
        constructor(config: Ext.sparkline.BulletConfig);
    /**
    Returns the value of base. 
    */
        getBase():number;
    /**
    Returns the value of performanceColor. 
    */
        getPerformanceColor():string;
    /**
    Returns the value of rangeColors. 
    */
        getRangeColors():string[];
    /**
    Returns the value of targetColor. 
    */
        getTargetColor():string;
    /**
    Returns the value of targetWidth. 
    */
        getTargetWidth():number;
    /**
    Sets the value of base. 
    */
        setBase(base: number):void;
    /**
    Sets the value of performanceColor. 
    */
        setPerformanceColor(performanceColor: string):void;
    /**
    Sets the value of rangeColors. 
    */
        setRangeColors(rangeColors: string[]):void;
    /**
    Sets the value of targetColor. 
    */
        setTargetColor(targetColor: string):void;
    /**
    Sets the value of targetWidth. 
    */
        setTargetWidth(targetWidth: number):void;
    }
    /**
    

    */
    export class CanvasBase extends Ext.Base {
    /**
     
    */
        constructor(ownerSparkLine: any);
    }
    /**
    

    */
    export class CanvasCanvas extends Ext.sparkline.CanvasBase {
    /**
     
    */
        constructor(ownerSparkLine: any);
    }
    interface DiscreteConfig extends Ext.sparkline.BarBaseConfig {
    /**
    If true then the y values supplied to plot will be clipped to fall
between chartRangeMin and chartRangeMax - By defau
    */
        chartRangeClip?: boolean;
    /**
    The maximum value to use for the range of Y values of the chart - Defaults to the maximum value supplied.

    */
        chartRangeMax?: number;
    /**
    The minimum value to use for the range of Y values of the chart - Defaults to the minimum value supplied.

    */
        chartRangeMin?: number;
    /**
    Height of each line in pixels - Defaults to 30% of the graph height. 
    */
        lineHeight?: number;
    /**
    Colour to use in combination with thresholdValue

    */
        thresholdColor?: string;
    /**
    Values less than this value will be drawn using thresholdColor instead of lineColor 
    */
        thresholdValue?: number;
    }
    /**
    Plots a series of thin vertical lines based upon the input values array. 
    */
    export class Discrete extends Ext.sparkline.BarBase {
    /**
     
    */
        constructor(config: Ext.sparkline.DiscreteConfig);
    /**
    Returns the value of chartRangeClip. 
    */
        getChartRangeClip():boolean;
    /**
    Returns the value of chartRangeMax. 
    */
        getChartRangeMax():number;
    /**
    Returns the value of chartRangeMin. 
    */
        getChartRangeMin():number;
    /**
    Returns the value of lineHeight. 
    */
        getLineHeight():number;
    /**
    Returns the value of thresholdColor. 
    */
        getThresholdColor():string;
    /**
    Returns the value of thresholdValue. 
    */
        getThresholdValue():number;
    /**
    Sets the value of chartRangeClip. 
    */
        setChartRangeClip(chartRangeClip: boolean):void;
    /**
    Sets the value of chartRangeMax. 
    */
        setChartRangeMax(chartRangeMax: number):void;
    /**
    Sets the value of chartRangeMin. 
    */
        setChartRangeMin(chartRangeMin: number):void;
    /**
    Sets the value of lineHeight. 
    */
        setLineHeight(lineHeight: number):void;
    /**
    Sets the value of thresholdColor. 
    */
        setThresholdColor(thresholdColor: string):void;
    /**
    Sets the value of thresholdValue. 
    */
        setThresholdValue(thresholdValue: number):void;
    }
    interface LineConfig extends Ext.sparkline.BaseConfig {
    /**
    The maximum value to use for the range of Y values of the chart - Defaults to the minimum value supplied.

    */
        chartRangeMax?: number;
    /**
    The maximum value to use for the X value of the chart.

    */
        chartRangeMaxX?: number;
    /**
    The minimum value to use for the range of Y values of the chart - Defaults to the minimum value supplied.

    */
        chartRangeMin?: number;
    /**
    The minimum value to use for the X value of the chart.

    */
        chartRangeMinX?: number;
    /**
    Configure as true to draw the normal range overlaying the chart. 
    */
        drawNormalOnTop?: boolean;
    /**
    The colour of value line shown when the graph is mouseovered. 
    */
        highlightLineColor?: string;
    /**
    The colour of value marker spots when mouseovered. 
    */
        highlightSpotColor?: string;
    /**
    The pixel width of the line plotted. 
    */
        lineWidth?: number;
    /**
    The colour of the maximum value marker. 
    */
        maxSpotColor?: string;
    /**
    The colour of the mimimum value marker. 
    */
        minSpotColor?: string;
    /**
    See normalRangeMin and normalRangeMax The color of the undererlayed "normal range bar". 
    */
        normalRangeColor?: string;
    /**
    See normalRangeMin The maximum value to overlay a "normal range bar" over the graph using the normalRangeColor.

    */
        normalRangeMax?: number;
    /**
    See normalRangeMax The minimum value to overlay a "normal range bar" over the graph using the normalRangeColor.

    */
        normalRangeMin?: number;
    /**
    The colour of the final value marker. 
    */
        spotColor?: string;
    /**
    The pixel radius of min, max and final value dots. 
    */
        spotRadius?: number;
    /**
    An object which uses range specifiers as keys to indicate spot color values
for range of values. 
    */
        valueSpots?: any;
    }
    /**
    Plots a line graph based upon the input values array. 
    */
    export class Line extends Ext.sparkline.Base {
    /**
     
    */
        constructor(config: Ext.sparkline.LineConfig);
    /**
    Returns the value of chartRangeMax. 
    */
        getChartRangeMax():number;
    /**
    Returns the value of chartRangeMaxX. 
    */
        getChartRangeMaxX():number;
    /**
    Returns the value of chartRangeMin. 
    */
        getChartRangeMin():number;
    /**
    Returns the value of chartRangeMinX. 
    */
        getChartRangeMinX():number;
    /**
    Returns the value of drawNormalOnTop. 
    */
        getDrawNormalOnTop():boolean;
    /**
    Returns the value of highlightLineColor. 
    */
        getHighlightLineColor():string;
    /**
    Returns the value of highlightSpotColor. 
    */
        getHighlightSpotColor():string;
    /**
    Returns the value of lineWidth. 
    */
        getLineWidth():number;
    /**
    Returns the value of maxSpotColor. 
    */
        getMaxSpotColor():string;
    /**
    Returns the value of minSpotColor. 
    */
        getMinSpotColor():string;
    /**
    Returns the value of normalRangeColor. 
    */
        getNormalRangeColor():string;
    /**
    Returns the value of normalRangeMax. 
    */
        getNormalRangeMax():number;
    /**
    Returns the value of normalRangeMin. 
    */
        getNormalRangeMin():number;
    /**
    Returns the value of spotColor. 
    */
        getSpotColor():string;
    /**
    Returns the value of spotRadius. 
    */
        getSpotRadius():number;
    /**
    Returns the value of valueSpots. 
    */
        getValueSpots():any;
    /**
    Sets the value of chartRangeMax. 
    */
        setChartRangeMax(chartRangeMax: number):void;
    /**
    Sets the value of chartRangeMaxX. 
    */
        setChartRangeMaxX(chartRangeMaxX: number):void;
    /**
    Sets the value of chartRangeMin. 
    */
        setChartRangeMin(chartRangeMin: number):void;
    /**
    Sets the value of chartRangeMinX. 
    */
        setChartRangeMinX(chartRangeMinX: number):void;
    /**
    Sets the value of drawNormalOnTop. 
    */
        setDrawNormalOnTop(drawNormalOnTop: boolean):void;
    /**
    Sets the value of highlightLineColor. 
    */
        setHighlightLineColor(highlightLineColor: string):void;
    /**
    Sets the value of highlightSpotColor. 
    */
        setHighlightSpotColor(highlightSpotColor: string):void;
    /**
    Sets the value of lineWidth. 
    */
        setLineWidth(lineWidth: number):void;
    /**
    Sets the value of maxSpotColor. 
    */
        setMaxSpotColor(maxSpotColor: string):void;
    /**
    Sets the value of minSpotColor. 
    */
        setMinSpotColor(minSpotColor: string):void;
    /**
    Sets the value of normalRangeColor. 
    */
        setNormalRangeColor(normalRangeColor: string):void;
    /**
    Sets the value of normalRangeMax. 
    */
        setNormalRangeMax(normalRangeMax: number):void;
    /**
    Sets the value of normalRangeMin. 
    */
        setNormalRangeMin(normalRangeMin: number):void;
    /**
    Sets the value of spotColor. 
    */
        setSpotColor(spotColor: string):void;
    /**
    Sets the value of spotRadius. 
    */
        setSpotRadius(spotRadius: number):void;
    /**
    Sets the value of valueSpots. 
    */
        setValueSpots(valueSpots: any):void;
    }
    interface PieConfig extends Ext.sparkline.BaseConfig {
    /**
    Border color of line round slices. 
    */
        borderColor?: string;
    /**
    Border width in pixels of line round slices. 
    */
        borderWidth?: number;
    /**
    Angle in degrees to offset the first slice. 
    */
        offset?: number;
    /**
    An array of CSS colro values to apply to the chart slices. 
    */
        sliceColors?: string[];
    }
    /**
    Plots a pie chart based upon the input {values} array. 
    */
    export class Pie extends Ext.sparkline.Base {
    /**
     
    */
        constructor(config: Ext.sparkline.PieConfig);
    /**
    Returns the value of borderColor. 
    */
        getBorderColor():string;
    /**
    Returns the value of borderWidth. 
    */
        getBorderWidth():number;
    /**
    Returns the value of offset. 
    */
        getOffset():number;
    /**
    Returns the value of sliceColors. 
    */
        getSliceColors():string[];
    /**
    Sets the value of borderColor. 
    */
        setBorderColor(borderColor: string):void;
    /**
    Sets the value of borderWidth. 
    */
        setBorderWidth(borderWidth: number):void;
    /**
    Sets the value of offset. 
    */
        setOffset(offset: number):void;
    /**
    Sets the value of sliceColors. 
    */
        setSliceColors(sliceColors: string[]):void;
    }
    /**
    Base class for Range Map

    */
    export class RangeMap extends Ext.Base {
    /**
     
    */
        constructor(map: any);
    }
    /**
    

    */
    export class Shape extends Ext.Base {
    /**
     
    */
        constructor(target: any, id: any, type: any, args: any);
    }
    interface TriStateConfig extends Ext.sparkline.BarBaseConfig {
    /**
    The pixel spacing between each bar. 
    */
        barSpacing?: number;
    /**
    The pixel width of each bar. 
    */
        barWidth?: number;
    /**
    An object which uses range specifiers as keys to
indicate bar color values for a range of values. 
    */
        colorMap?: any;
    /**
    The color for negative value bars. 
    */
        negBarColor?: string;
    /**
    The color for positive value bars. 
    */
        posBarColor?: string;
    /**
    The color for zero value bars. 
    */
        zeroBarColor?: string;
    }
    /**
    Plots bars based upon "win"/"draw" or "lose" status of the input values array. 
    */
    export class TriState extends Ext.sparkline.BarBase {
    /**
     
    */
        constructor(config: Ext.sparkline.TriStateConfig);
    /**
    Returns the value of barSpacing. 
    */
        getBarSpacing():number;
    /**
    Returns the value of colorMap. 
    */
        getColorMap():any;
    /**
    Returns the value of negBarColor. 
    */
        getNegBarColor():string;
    /**
    Returns the value of posBarColor. 
    */
        getPosBarColor():string;
    /**
    Returns the value of zeroBarColor. 
    */
        getZeroBarColor():string;
    /**
    Sets the value of barSpacing. 
    */
        setBarSpacing(barSpacing: number):void;
    /**
    Sets the value of barWidth. 
    */
        setBarWidth(barWidth: number):void;
    /**
    Sets the value of colorMap. 
    */
        setColorMap(colorMap: any):void;
    /**
    Sets the value of negBarColor. 
    */
        setNegBarColor(negBarColor: string):void;
    /**
    Sets the value of posBarColor. 
    */
        setPosBarColor(posBarColor: string):void;
    /**
    Sets the value of zeroBarColor. 
    */
        setZeroBarColor(zeroBarColor: string):void;
    }
    /**
    

    */
    export class VmlCanvas extends Ext.sparkline.CanvasBase {
    /**
     
    */
        constructor(ownerSparkLine: any);
    }
}
declare module Ext.state {
    interface CookieProviderConfig extends Ext.state.ProviderConfig {
    /**
    The domain to save the cookie for. 
    */
        domain?: string;
    /**
    The cookie expiration date. 
    */
        expires?: Date;
    /**
    The path for which the cookie is active. 
    */
        path?: string;
    /**
    True if the site is using SSL 
    */
        secure?: boolean;
    }
    /**
    A Provider implementation which saves and retrieves state via cookies. 
    */
    export class CookieProvider extends Ext.state.Provider {
    /**
    Creates a new CookieProvider. 
    */
        constructor(config?: Ext.state.CookieProviderConfig);
    }
    interface LocalStorageProviderConfig extends Ext.state.ProviderConfig {
    }
    /**
    A Provider implementation which saves and retrieves state via the HTML5 localStorage API
or IE userData storage. 
    */
    export class LocalStorageProvider extends Ext.state.Provider {
    /**
     
    */
        constructor();
    }
    /**
    This is the global state manager. 
    */
    export class Manager {
    /**
    Clears a value from the state 
    */
        static clear(key: string):void;
    /**
    Returns the current value for a key 
    */
        static get(key: string, defaultValue: any):any;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Gets the currently configured state provider 
    */
        static getProvider():Ext.state.Provider;
    /**
    Sets the value for a key 
    */
        static set(key: string, value: any):void;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Configures the default state provider for your application 
    */
        static setProvider(stateProvider: Ext.state.Provider):void;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface ProviderConfig {
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    /**
    A string to prefix to items stored in the underlying state store. 
    */
        prefix?: string;
    }
    /**
    Abstract base class for state provider implementations. 
    */
    export class Provider extends Ext.Base {
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Clears a value from the state 
    */
        clear(name: string):void;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Decodes a string previously encoded with encodeValue. 
    */
        decodeValue(value: string):any;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Encodes a value including type information. 
    */
        encodeValue(value: any):string;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Returns the current value for a key 
    */
        get(name: string, defaultValue: any):any;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    Sets the value for a key 
    */
        set(name: string, value: any):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    }
    interface StatefulConfig {
    /**
    A buffer to be applied if many state events are fired within a short period. 
    */
        saveDelay?: number;
    /**
    An array of events that, when fired, should trigger this object to
save its state. 
    */
        stateEvents?: string[];
    /**
    The unique id for this object to use for state management purposes. 
    */
        stateId?: string;
    /**
    A flag which causes the object to attempt to restore the state of
internal properties from a saved state on startup. 
    */
        stateful?: boolean;
    }
    /**
    A mixin for being able to save the state of an object to an underlying
Ext.state.Provider.

    */
    export class Stateful extends Ext.Base {
    /**
    Add events that will trigger the state to be saved. 
    */
        addStateEvents(events: string|string[]):void;
    /**
    Applies the state to the object. 
    */
        applyState(state: any):void;
    /**
    Gets the current state of the object. 
    */
        getState():any;
    /**
    Conditionally saves a single property from this object to the given state object. 
    */
        savePropToState(propName: string, state: any, stateName?: string):boolean;
    /**
    Gathers additional named properties of the instance and adds their current values
to the passed state object. 
    */
        savePropsToState(propNames: string|string[], state: any):any;
    /**
    Saves the state of the object to the persistence store. 
    */
        saveState():void;
    }
}
declare module Ext.tab {
    interface BarConfig extends Ext.panel.BarConfig {
    /**
    true to follow WAI-ARIA requirement and activate tab when it is navigated to
with arrow keys, or false to disable tha
    */
        activateOnFocus?: boolean;
    /**
    DOM tabIndex attribute to set on the
active Focusable child of this container when using the "Roaming tabindex"
techn
    */
        activeChildTabIndex?: number;
    /**
    Enable or disable
navigation with arrow keys for this FocusableContainer. 
    */
        enableFocusableContainer?: boolean;
    /**
    true to ensure the active tab is scrolled into view when the tab changes, the text, the
icon or the glyph. 
    */
        ensureActiveVisibleOnChange?: boolean;
    /**
    DOM tabIndex attribute to set on
inactive Focusable children of this container when using the "Roaming tabindex"
tech
    */
        inactiveChildTabIndex?: number;
    /**
    The maximum width for a tab in this tab Bar. 
    */
        maxTabWidth?: number;
    /**
    The minimum width for a tab in this tab Bar. 
    */
        minTabWidth?: number;
    /**
    True to not show the full background on the tabbar 
    */
        plain?: boolean;
    /**
    The rotation of the tabs. 
    */
        tabRotation?: any;
    /**
    true to stretch all tabs to the height of the tallest tab when the tabBar
is docked horizontally, or the width of the
    */
        tabStretchMax?: boolean;
    }
    /**
    TabBar is used internally by a TabPanel and typically should not
need to be created manually.

    */
    export class Bar extends Ext.panel.Bar {
    /**
    true in this class to identify an object as an instantiated Tab Bar, or subclass thereof. 
    */
        isTabBar: boolean;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.tab.BarConfig);
    /**
    Ensure the passed tab is visible if using overflow scrolling 
    */
        ensureTabVisible(tab?: Ext.tab.Tab|Ext.Component|number):void;
    /**
    Returns the value of activateOnFocus. 
    */
        getActivateOnFocus():boolean;
    /**
    Returns the value of tabRotation. 
    */
        getTabRotation():any;
    /**
    Returns the value of tabStretchMax. 
    */
        getTabStretchMax():boolean;
    /**
    Sets the value of activateOnFocus. 
    */
        setActivateOnFocus(activateOnFocus: boolean):void;
    /**
    Sets the value of tabRotation. 
    */
        setTabRotation(tabRotation: any):void;
    /**
    Sets the value of tabStretchMax. 
    */
        setTabStretchMax(tabStretchMax: boolean):void;
    }
    interface PanelConfig extends Ext.panel.PanelConfig {
    /**
    The tab to activate initially. 
    */
        activeTab?: string|number|Ext.Component;
    /**
    True by default to defer the rendering of child items to the browsers DOM
until a tab is activated. 
    */
        deferredRender?: boolean;
    /**
    The class added to each child item of this TabPanel. 
    */
        itemCls?: string;
    /**
    The maximum width for each tab.

    */
        maxTabWidth?: number;
    /**
    The minimum width for a tab in the tabBar.

    */
        minTabWidth?: number;
    /**
    True to not show the full background on the TabBar. 
    */
        plain?: boolean;
    /**
    True to instruct each Panel added to the TabContainer to not render its header element. 
    */
        removePanelHeader?: boolean;
    /**
    Optional configuration object for the internal Ext.tab.Bar. 
    */
        tabBar?: any;
    /**
    If specified, the tabBar will be rendered as an item of the TabPanel's
Header and the specified tabBarHeaderPosition 
    */
        tabBarHeaderPosition?: number;
    /**
    The position where the tab strip should be rendered. 
    */
        tabPosition?: any;
    /**
    The rotation of the tabs. 
    */
        tabRotation?: any;
    /**
    true to stretch all tabs to the height of the tallest tab when the tabBar
is docked horizontally, or the width of the
    */
        tabStretchMax?: boolean;
    }
    /**
    A basic tab container. 
    */
    export class Panel extends Ext.panel.Panel {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.tab.PanelConfig);
    /**
    Returns the item that is currently active inside this TabPanel. 
    */
        getActiveTab():Ext.Component;
    /**
    Returns the Ext.tab.Bar associated with this tabPanel. 
    */
        getTabBar():Ext.tab.Bar;
    /**
    Returns the value of tabPosition. 
    */
        getTabPosition():any;
    /**
    Returns the value of tabRotation. 
    */
        getTabRotation():any;
    /**
    Returns the value of tabStretchMax. 
    */
        getTabStretchMax():boolean;
    /**
    Makes the given card active. 
    */
        setActiveTab(card: string|number|Ext.Component):Ext.Component;
    /**
    Sets the value of tabBar. 
    */
        setTabBar(tabBar: any):void;
    /**
    Sets the value of tabPosition. 
    */
        setTabPosition(tabPosition: any):void;
    /**
    Sets the value of tabRotation. 
    */
        setTabRotation(tabRotation: any):void;
    /**
    Sets the value of tabStretchMax. 
    */
        setTabStretchMax(tabStretchMax: boolean):void;
    }
    interface TabConfig extends Ext.button.ButtonConfig {
    /**
    True to make the Tab start closable (the close icon will be visible). 
    */
        closable?: boolean;
    /**
    The accessible text label for the close button link; only used when closable = true. 
    */
        closeText?: string;
    /**
    The rotation of the tab. 
    */
        rotation?: any;
    /**
    The tab's position. 
    */
        tabPosition?: any;
    }
    /**
    Represents a single Tab in a TabPanel. 
    */
    export class Tab extends Ext.button.Button {
    /**
    Indicates that this tab is currently active. 
    */
        active: boolean;
    /**
    True if the tab is currently closable

    */
        closable: boolean|boolean;
    /**
    true in this class to identify an object as an instantiated Tab, or subclass thereof. 
    */
        isTab: boolean;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.tab.TabConfig);
    /**
    Returns the value of rotation. 
    */
        getRotation():any;
    /**
    Returns the value of tabPosition. 
    */
        getTabPosition():any;
    /**
    Sets this tab's attached card. 
    */
        setCard(card: Ext.Component):void;
    /**
    Sets the tab as either closable or not. 
    */
        setClosable(closable: boolean):void;
    /**
    Sets the value of rotation. 
    */
        setRotation(rotation: any):void;
    /**
    Sets the value of tabPosition. 
    */
        setTabPosition(tabPosition: any):void;
    }
}
declare module Ext.tip {
    interface QuickTipConfig extends Ext.tip.ToolTipConfig {
    /**
    true to automatically use the element's DOM title value if available. 
    */
        interceptTitles?: boolean;
    /**
    An HTML fragment, or a DomHelper specification to use as the layout element content. 
    */
        text?: any;
    }
    /**
    A specialized tooltip class for tooltips that can be specified in markup and automatically managed
by the global Ext.
    */
    export class QuickTip extends Ext.tip.ToolTip {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.tip.QuickTipConfig);
    /**
    Hides a visible tip or cancels an impending show for a particular element. 
    */
        cancelShow(el: string|HTMLElement|Ext.dom.Element):void;
    /**
    Configures a new quick tip instance and assigns it to a target element. 
    */
        register(config: any):void;
    /**
    Removes this quick tip from its element and destroys it. 
    */
        unregister(el: string|HTMLElement|Ext.dom.Element):void;
    }
    /**
    Provides attractive and customizable tooltips for any element. 
    */
    export class QuickTipManager {
    /**
    Destroys the QuickTips instance. 
    */
        static destroy():void;
    /**
    Disables quick tips globally. 
    */
        static disable():void;
    /**
    Enables quick tips globally. 
    */
        static enable():void;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Gets the single QuickTip instance used to show tips
from all registered elements. 
    */
        static getQuickTip():Ext.tip.QuickTip;
    /**
    Initializes the global QuickTips instance and prepare any quick tips. 
    */
        static init(autoRender?: boolean, config?: any):void;
    /**
    Returns true if quick tips are enabled, else false. 
    */
        static isEnabled():boolean;
    /**
    Configures a new quick tip instance and assigns it to a target element. 
    */
        static register(config: any):void;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Alias of register. 
    */
        static tips():void;
    /**
    Removes any registered quick tip from the target element and destroys it. 
    */
        static unregister(el: string|HTMLElement|Ext.dom.Element):void;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface TipConfig extends Ext.panel.PanelConfig {
    /**
    If true, then the tooltip will be automatically constrained to stay within
the browser viewport. 
    */
        constrainPosition?: boolean;
    }
    /**
    This is the base class for Ext.tip.QuickTip and Ext.tip.ToolTip that provides the basic layout and
positioning that a
    */
    export class Tip extends Ext.panel.Panel {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.tip.TipConfig);
    }
    interface ToolTipConfig extends Ext.tip.TipConfig {
    /**
    A numeric pixel value used to offset the default position of the anchor arrow. 
    */
        anchorOffset?: number;
    /**
    True to anchor the tooltip to the target element, false to anchor it relative to the mouse coordinates. 
    */
        anchorToTarget?: boolean;
    /**
    True to automatically hide the tooltip after the
mouse exits the target element or after the dismissDelay
has expired
    */
        autoHide?: boolean;
    /**
    A DomQuery simple selector which allows selection of individual elements within the
target element to trigger showing
    */
        delegate?: string;
    /**
    Delay in milliseconds before the tooltip automatically hides. 
    */
        dismissDelay?: number;
    /**
    The number of milliseconds for the fadeOut animation. 
    */
        fadeOutDuration?: number;
    /**
    The method to use to hide the tooltip. 
    */
        hideAction?: string;
    /**
    Delay in milliseconds after the mouse exits the target element but before the tooltip actually hides. 
    */
        hideDelay?: number;
    /**
    An XY offset from the mouse position where the tooltip should be shown. 
    */
        mouseOffset?: number[];
    /**
    Delay in milliseconds before the tooltip displays after the mouse enters the target element. 
    */
        showDelay?: number;
    /**
    The target element or string id to monitor for mouseover events to trigger
showing this ToolTip.

    */
        target?: HTMLElement|Ext.dom.Element|string;
    /**
    True to have the tooltip follow the mouse as it moves over the target element. 
    */
        trackMouse?: boolean;
    }
    /**
    ToolTip is a Ext.tip.Tip implementation that handles the common case of displaying a
tooltip when hovering over a cer
    */
    export class ToolTip extends Ext.tip.Tip {
    /**
    When a ToolTip is configured with the delegate
option to cause selected child elements of the target
Element to each 
    */
        triggerElement: HTMLElement;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.tip.ToolTipConfig);
    /**
    Binds this ToolTip to the specified element. 
    */
        setTarget(target: string|HTMLElement|Ext.dom.Element):void;
    }
}
declare module Ext.toolbar {
    interface BreadcrumbConfig extends Ext.container.ContainerConfig {
    /**
    DOM tabIndex attribute to set on the
active Focusable child of this container when using the "Roaming tabindex"
techn
    */
        activeChildTabIndex?: number;
    /**
    Button UI to use for breadcrumb items. 
    */
        buttonUI?: string;
    /**
    The name of the field in the data model to display in the navigation items of
this breadcrumb toolbar 
    */
        displayField?: string;
    /**
    Enable or disable
navigation with arrow keys for this FocusableContainer. 
    */
        enableFocusableContainer?: boolean;
    /**
    DOM tabIndex attribute to set on
inactive Focusable children of this container when using the "Roaming tabindex"
tech
    */
        inactiveChildTabIndex?: number;
    /**
    The overflowHandler for this Breadcrumb:


null - hidden overflow
'scroller' to render left/right scroller buttons on
    */
        overflowHandler?: string;
    /**
    The selected node, or "root" to select the root node 
    */
        selection?: Ext.data.TreeModel|string;
    /**
    Controls whether or not icons of tree nodes are displayed in the breadcrumb
buttons. 
    */
        showIcons?: boolean;
    /**
    Controls whether or not icons of tree nodes are displayed in the breadcrumb
menu items. 
    */
        showMenuIcons?: boolean;
    /**
    The TreeStore that this breadcrumb toolbar should use as its data source

    */
        store?: Ext.data.TreeStore;
    /**
    false to use regular Buttons instead of Split Buttons. 
    */
        useSplitButtons?: boolean;
    }
    /**
    A toolbar that displays hierarchical data from a TreeStore
as a trail of breadcrumb buttons. 
    */
    export class Breadcrumb extends Ext.container.Container {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.toolbar.BreadcrumbConfig);
    /**
    Returns the value of buttonUI. 
    */
        getButtonUI():string;
    /**
    Returns the value of displayField. 
    */
        getDisplayField():string;
    /**
    Returns the value of overflowHandler. 
    */
        getOverflowHandler():string;
    /**
    Returns the currently selected node. 
    */
        getSelection():Ext.data.TreeModel;
    /**
    Returns the value of showIcons. 
    */
        getShowIcons():boolean;
    /**
    Returns the value of showMenuIcons. 
    */
        getShowMenuIcons():boolean;
    /**
    Returns the value of store. 
    */
        getStore():Ext.data.TreeStore;
    /**
    Returns the value of useSplitButtons. 
    */
        getUseSplitButtons():boolean;
    /**
    Sets the value of buttonUI. 
    */
        setButtonUI(buttonUI: string):void;
    /**
    Sets the value of displayField. 
    */
        setDisplayField(displayField: string):void;
    /**
    Sets the value of overflowHandler. 
    */
        setOverflowHandler(overflowHandler: string):void;
    /**
    Selects the passed node in the breadcrumb component. 
    */
        setSelection(node: Ext.data.TreeModel):Ext.toolbar.Breadcrumb;
    /**
    Sets the value of showIcons. 
    */
        setShowIcons(showIcons: boolean):void;
    /**
    Sets the value of showMenuIcons. 
    */
        setShowMenuIcons(showMenuIcons: boolean):void;
    /**
    Sets the value of store. 
    */
        setStore(store: Ext.data.TreeStore):void;
    /**
    Sets the value of useSplitButtons. 
    */
        setUseSplitButtons(useSplitButtons: boolean):void;
    }
    interface FillConfig extends Ext.ComponentConfig {
    }
    /**
    A non-rendering placeholder item which instructs the Toolbar's Layout to begin using
the right-justified button conta
    */
    export class Fill extends Ext.Component {
    /**
    true in this class to identify an object as an instantiated Fill, or subclass thereof. 
    */
        isFill: boolean;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.toolbar.FillConfig);
    }
    interface ItemConfig extends Ext.ComponentConfig {
    /**
    Text to be used for the menu if the item is overflowed.

    */
        overflowText?: string;
    }
    /**
    The base class that other non-interacting Toolbar Item classes should extend in order to
get some basic common toolba
    */
    export class Item extends Ext.Component {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.toolbar.ItemConfig);
    }
    interface PagingConfig extends Ext.toolbar.ToolbarConfig {
    /**
    Customizable piece of the default paging text. 
    */
        afterPageText?: string;
    /**
    The text displayed before the input item. 
    */
        beforePageText?: string;
    /**
    true to display the displayMsg 
    */
        displayInfo?: boolean;
    /**
    The paging status message to display. 
    */
        displayMsg?: string;
    /**
    The message to display when no records are found. 
    */
        emptyMsg?: string;
    /**
    The quicktip text displayed for the first page button. 
    */
        firstText?: string;
    /**
    The width in pixels of the input field used to display and change the current page number. 
    */
        inputItemWidth?: number;
    /**
    The quicktip text displayed for the last page button. 
    */
        lastText?: string;
    /**
    The quicktip text displayed for the next page button. 
    */
        nextText?: string;
    /**
    true to insert any configured items before the paging buttons. 
    */
        prependButtons?: boolean;
    /**
    The quicktip text displayed for the previous page button. 
    */
        prevText?: string;
    /**
    The quicktip text displayed for the Refresh button. 
    */
        refreshText?: string;
    /**
    The data source to which the paging toolbar is bound (must be the same store instance
used in the grid / tree). 
    */
        store?: Ext.data.Store|string;
    }
    /**
    As the number of records increases, the time required for the browser to render them increases. 
    */
    export class Paging extends Ext.toolbar.Toolbar {
    /**
    Creates a new Toolbar 
    */
        constructor(config: Ext.toolbar.PagingConfig);
    /**
    Binds a store to this instance. 
    */
        bindStore(store?: Ext.data.AbstractStore|string):void;
    /**
    Binds listeners for this component to the store. 
    */
        bindStoreListeners(store: Ext.data.AbstractStore):void;
    /**
    Refresh the current page, has the same effect as clicking the 'refresh' button. 
    */
        doRefresh():boolean;
    /**
    Gets the current store instance. 
    */
        getStore():Ext.data.AbstractStore;
    /**
    Gets the listeners to bind to a new store. 
    */
        getStoreListeners():any;
    /**
    Move to the first page, has the same effect as clicking the 'first' button. 
    */
        moveFirst():boolean;
    /**
    Move to the last page, has the same effect as clicking the 'last' button. 
    */
        moveLast():boolean;
    /**
    Move to the next page, has the same effect as clicking the 'next' button. 
    */
        moveNext():boolean;
    /**
    Move to the previous page, has the same effect as clicking the 'previous' button. 
    */
        movePrevious():boolean;
    /**
    Template method, it is called when a new store is bound
to the current instance. 
    */
        onBindStore():void;
    /**
    Template method, it is called when an existing store is unbound
from the current instance. 
    */
        onUnbindStore(store: Ext.data.AbstractStore, initial: boolean):void;
    /**
    Sets the store to the specified store. 
    */
        setStore(store: any):void;
    /**
    Unbinds listeners from this component to the store. 
    */
        unbindStoreListeners(store: Ext.data.AbstractStore):void;
    }
    interface SeparatorConfig extends Ext.toolbar.ItemConfig {
    }
    /**
    A simple class that adds a vertical separator bar between toolbar items (css class: 'x-toolbar-separator'). 
    */
    export class Separator extends Ext.toolbar.Item {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.toolbar.SeparatorConfig);
    }
    interface SpacerConfig extends Ext.ComponentConfig {
    }
    /**
    A simple element that adds extra horizontal space between items in a toolbar. 
    */
    export class Spacer extends Ext.Component {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.toolbar.SpacerConfig);
    }
    interface TextItemConfig extends Ext.toolbar.ItemConfig {
    /**
    The text to be used as innerHTML (html tags are accepted). 
    */
        text?: string;
    }
    /**
    A simple class that renders text directly into a toolbar. 
    */
    export class TextItem extends Ext.toolbar.Item {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.toolbar.TextItemConfig);
    /**
    Updates this item's text, setting the text to be used as innerHTML. 
    */
        setText(text: string):void;
    }
    interface ToolbarConfig extends Ext.container.ContainerConfig {
    /**
    DOM tabIndex attribute to set on the
active Focusable child of this container when using the "Roaming tabindex"
techn
    */
        activeChildTabIndex?: number;
    /**
    A default ui to use for Button items. 
    */
        defaultButtonUI?: string;
    /**
    Default UI for form field items. 
    */
        defaultFieldUI?: string;
    /**
    Default UI for Buttons if the toolbar has a UI of 'footer' 
    */
        defaultFooterButtonUI?: string;
    /**
    Default UI for Form Fields if the toolbar has a UI of 'footer' 
    */
        defaultFooterFieldUI?: string;
    /**
    Enable or disable
navigation with arrow keys for this FocusableContainer. 
    */
        enableFocusableContainer?: boolean;
    /**
    Configure true to make the toolbar provide a button which activates a dropdown Menu to show
items which overflow the 
    */
        enableOverflow?: boolean;
    /**
    DOM tabIndex attribute to set on
inactive Focusable children of this container when using the "Roaming tabindex"
tech
    */
        inactiveChildTabIndex?: number;
    /**
    null - hidden overflow
'scroller' to render left/right scroller buttons on either side of the breadcrumb
'menu' to re
    */
        overflowHandler?: string;
    /**
    Set to true to make the toolbar vertical. 
    */
        vertical?: boolean;
    }
    /**
    Basic Toolbar class. 
    */
    export class Toolbar extends Ext.container.Container {
    /**
    true in this class to identify an object as an instantiated Toolbar, or subclass thereof. 
    */
        isToolbar: boolean;
    /**
    Creates a new Toolbar 
    */
        constructor(config: Ext.toolbar.ToolbarConfig);
    }
}
declare module Ext.tree {
    interface ColumnConfig extends Ext.grid.column.ColumnConfig {
    }
    /**
    Provides indentation and folder structure markup for a Tree taking into account
depth and position within the tree hi
    */
    export class Column extends Ext.grid.column.Column {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.tree.ColumnConfig);
    }
    interface NavigationModelConfig extends Ext.grid.NavigationModelConfig {
    }
    /**
    This class listens for key events fired from a TreePanel, and moves the currently focused item
by adding the class fo
    */
    export class NavigationModel extends Ext.grid.NavigationModel {
    /**
     
    */
        constructor();
    }
    interface PanelConfig extends Ext.panel.TableConfig {
    /**
    The field inside the model that will be used as the node's text. 
    */
        displayField?: string;
    /**
    True to automatically prepend a leaf sorter to the store.

    */
        folderSort?: boolean;
    /**
    False to disable tree lines. 
    */
        lines?: boolean;
    /**
    Allows you to not specify a store on this TreePanel. 
    */
        root?: any;
    /**
    False to hide the root node. 
    */
        rootVisible?: boolean;
    /**
    True if only 1 node per branch may be expanded. 
    */
        singleExpand?: boolean;
    /**
    True to use Vista-style arrows in the tree. 
    */
        useArrows?: boolean;
    }
    /**
    The TreePanel provides tree-structured UI representation of tree-structured data. 
    */
    export class Panel extends Ext.panel.Table {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.tree.PanelConfig);
    /**
    Collapse all nodes 
    */
        collapseAll(callback?: Function, scope?: any):void;
    /**
    Collapses a record that is loaded in the tree. 
    */
        collapseNode(record: Ext.data.Model, deep?: boolean, callback?: Function, scope?: any):void;
    /**
    Expand all nodes 
    */
        expandAll(callback?: Function, scope?: any):void;
    /**
    Expands a record that is loaded in the tree. 
    */
        expandNode(record: Ext.data.Model, deep?: boolean, callback?: Function, scope?: any):void;
    /**
    Expand the tree to the path of a particular node. 
    */
        expandPath(path: string, options?: any):void;
    /**
    Retrieve an array of checked records. 
    */
        getChecked():Ext.data.TreeModel[];
    /**
    Returns the root node for this tree. 
    */
        getRootNode():Ext.data.TreeModel;
    /**
    Expand the tree to the path of a particular node, then select it. 
    */
        selectPath(path: string, field?: string, separator?: string, callback?: (success: boolean, lastNode: Ext.data.NodeInterface, node: HTMLElement) => any, scope?: any):void;
    /**
    Sets root node of this tree. 
    */
        setRootNode(root: any):Ext.data.TreeModel;
    }
    interface ViewConfig extends Ext.view.TableConfig {
    /**
    False to hide the root node. 
    */
        rootVisible?: boolean;
    }
    /**
    Used as a view by TreePanel.

    */
    export class View extends Ext.view.Table {
    /**
    true in this class to identify an object as an instantiated TreeView, or subclass thereof. 
    */
        isTreeView: boolean;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.tree.ViewConfig);
    /**
    Collapses a record that is loaded in the view. 
    */
        collapse(record: Ext.data.Model, deep?: boolean, callback?: Function, scope?: any):void;
    /**
    Expands a record that is loaded in the view. 
    */
        expand(record: Ext.data.Model, deep?: boolean, callback?: Function, scope?: any):void;
    /**
    Toggles a record between expanded and collapsed. 
    */
        toggle(record: Ext.data.Model, deep?: boolean, callback?: Function, scope?: any):void;
    }
    interface ViewDragZoneConfig extends Ext.view.DragZoneConfig {
    }
    /**
    

    */
    export class ViewDragZone extends Ext.view.DragZone {
    /**
    Creates new DragZone. 
    */
        constructor(config: Ext.tree.ViewDragZoneConfig);
    }
    interface ViewDropZoneConfig extends Ext.view.DropZoneConfig {
    /**
    True if drops on the tree container (outside of a specific tree node) are allowed. 
    */
        allowContainerDrops?: boolean;
    /**
    Allow inserting a dragged node between an expanded parent node and its first child that will become a
sibling of the 
    */
        allowParentInserts?: boolean;
    /**
    True if the tree should only allow append drops (use for trees which are sorted). 
    */
        appendOnly?: boolean;
    /**
    The delay in milliseconds to wait before expanding a target tree node while dragging a droppable node
over the target. 
    */
        expandDelay?: number;
    }
    /**
    

    */
    export class ViewDropZone extends Ext.view.DropZone {
    /**
    Creates new DropTarget. 
    */
        constructor(config: Ext.tree.ViewDropZoneConfig);
    }
}
declare module Ext.tree.plugin {
    interface TreeViewDragDropConfig extends Ext.plugin.AbstractConfig {
    /**
    True if drops on the tree container (outside of a specific tree node) are allowed. 
    */
        allowContainerDrops?: boolean;
    /**
    Set as true to allow the user to hold down the control key at the start of the
drag operation and copy the dragged re
    */
        allowCopy?: boolean;
    /**
    Allow inserting a dragged node between an expanded parent node and its first child that will become a sibling of
the 
    */
        allowParentInserts?: boolean;
    /**
    True if the tree should only allow append drops (use for trees which are sorted). 
    */
        appendOnly?: boolean;
    /**
    True to register this container with the Scrollmanager for auto scrolling during drag operations. 
    */
        containerScroll?: any;
    /**
    Set as true to copy the records from the source grid to the destination drop
grid. 
    */
        copy?: boolean;
    /**
    A named drag drop group to which this object belongs. 
    */
        ddGroup?: string;
    /**
    The name of the model field that is used to display the text for the nodes 
    */
        displayField?: string;
    /**
    The ddGroup to which the DragZone will belong. 
    */
        dragGroup?: string;
    /**
    The text to show while dragging. 
    */
        dragText?: string;
    /**
    A config object to apply to the creation of the DragZone which handles for drag start gestures. 
    */
        dragZone?: any;
    /**
    The ddGroup to which the DropZone will belong. 
    */
        dropGroup?: string;
    /**
    A config object to apply to the creation of the DropZone which handles mouseover and drop gestures. 
    */
        dropZone?: any;
    /**
    Set to false to disallow dragging items from the View. 
    */
        enableDrag?: boolean;
    /**
    Set to false to disallow the View from accepting drop gestures. 
    */
        enableDrop?: boolean;
    /**
    The delay in milliseconds to wait before expanding a target tree node while dragging a droppable node over the
target. 
    */
        expandDelay?: number;
    /**
    The color to use when visually highlighting the dragged or dropped node (default value is light blue). 
    */
        nodeHighlightColor?: string;
    /**
    Whether or not to highlight any nodes after they are
successfully dropped on their target. 
    */
        nodeHighlightOnDrop?: boolean;
    /**
    Whether or not to highlight any nodes after they are
repaired from an unsuccessful drag/drop. 
    */
        nodeHighlightOnRepair?: boolean;
    /**
    Configure as true to sort the target node into the current tree sort order after the dropped node is added. 
    */
        sortOnDrop?: boolean;
    }
    /**
    This plugin provides drag and drop functionality for a TreeView. 
    */
    export class TreeViewDragDrop extends Ext.plugin.Abstract {
    /**
    An DragZone which handles mousedown and dragging of records from the grid.

    */
        dragZone: any;
    /**
    An DropZone which handles mouseover and dropping records in any grid which shares the same dropGroup.

    */
        dropZone: any;
    /**
    Instantiates the plugin. 
    */
        constructor(config?: Ext.tree.plugin.TreeViewDragDropConfig);
    }
}
declare module Ext.util {
    interface AbstractMixedCollectionConfig {
    /**
    Specify true if the addAll
function should add function references to the collection. 
    */
        allowFunctions?: boolean;
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    }
    /**
    

    */
    export class AbstractMixedCollection extends Ext.Base {
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated MixedCollection, or subclass thereof. 
    */
        isMixedCollection: boolean;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
     
    */
        constructor(allowFunctions: Ext.util.AbstractMixedCollectionConfig, keyFn: Ext.util.AbstractMixedCollectionConfig);
    /**
    Adds an item to the collection. 
    */
        add(key: any, obj?: any):any;
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Adds all elements of an Array or an Object to the collection. 
    */
        addAll(objs: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Removes all items from the collection. 
    */
        clear():void;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Creates a shallow copy of this collection 
    */
        clone():Ext.util.MixedCollection;
    /**
    Collects unique values of a particular property in this MixedCollection 
    */
        collect(property: string, root?: string, allowBlank?: boolean):any[];
    /**
    Returns true if the collection contains the passed Object as an item. 
    */
        contains(o: any):boolean;
    /**
    Returns true if the collection contains the passed Object as a key. 
    */
        containsKey(key: string):boolean;
    /**
    Executes the specified function once for every item in the collection. 
    */
        each(fn: (item: any, index: number, len: number) => any, scope?: any):void;
    /**
    Executes the specified function once for every key in the collection, passing each
key, and its associated item as th
    */
        eachKey(fn: (key: string, item: any, index: number, len: number) => any, scope?: any):void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Filters the objects in this collection by a set of Filters, or by a single
property/value pair with optional paramete
    */
        filter(property: Ext.util.Filter[]|string, value: string|RegExp, anyMatch?: boolean, caseSensitive?: boolean):Ext.util.MixedCollection;
    /**
    Filter by a function. 
    */
        filterBy(fn: (item: any, key: string) => any, scope?: any):Ext.util.MixedCollection;
    /**
    Returns the first item in the collection which elicits a true return value from the passed selection function. 
    */
        find():void;
    /**
    Returns the first item in the collection which elicits a true return value from the
passed selection function. 
    */
        findBy(fn: (item: any, key: string) => any, scope?: any):any;
    /**
    Finds the index of the first matching object in this collection by a specific property/value. 
    */
        findIndex(property: string, value: string|RegExp, start?: number, anyMatch?: boolean, caseSensitive?: boolean):number;
    /**
    Find the index of the first matching object in this collection by a function. 
    */
        findIndexBy(fn: (item: any, key: string) => any, scope?: any, start?: number):number;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Returns the first item in the collection. 
    */
        first():any;
    /**
    Returns the item associated with the passed key OR index. 
    */
        get(key: string|number):any;
    /**
    Returns the item at the specified index. 
    */
        getAt(index: number):any;
    /**
    Returns the item associated with the passed key. 
    */
        getByKey(key: string|number):any;
    /**
    Returns the number of items in the collection. 
    */
        getCount():number;
    /**
    A function which will be called, passing a newly added object
when the object is added without a separate id. 
    */
        getKey(item: any):any;
    /**
    Returns a range of items in this collection 
    */
        getRange(startIndex?: number, endIndex?: number):any[];
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Returns index within the collection of the passed Object. 
    */
        indexOf(o: any):number;
    /**
    Returns index within the collection of the passed key. 
    */
        indexOfKey(key: string):number;
    /**
    Inserts an item at the specified index in the collection. 
    */
        insert(index: number, key: any, o?: any):any;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Returns the last item in the collection. 
    */
        last():any;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Remove an item from the collection. 
    */
        remove(o: any):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Remove all items in the collection. 
    */
        removeAll(items?: any[]):Ext.util.MixedCollection;
    /**
    Remove an item from a specified index in the collection. 
    */
        removeAt(index: number):any;
    /**
    Removes an item associated with the passed key fom the collection. 
    */
        removeAtKey(key: string):any;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Remove a range of items starting at a specified index in the collection. 
    */
        removeRange(index: number, removeCount?: number):any;
    /**
    Reorders each of the items based on a mapping from old index to new index. 
    */
        reorder(mapping: any):void;
    /**
    Replaces an item in the collection. 
    */
        replace(key: string, o: any):any;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Collects all of the values of the given property and returns their sum 
    */
        sum(property: string, root?: string, start?: number, end?: number):number;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Change the key for an existing item in the collection. 
    */
        updateKey(oldKey: any, newKey: any):void;
    }
    /**
    This animation class is a mixin. 
    */
    export class Animate extends Ext.Base {
    /**
    Performs custom animation on this object. 
    */
        animate(config: any):any;
    /**
    Returns the current animation if this object has any effects actively running or queued, else returns false. 
    */
        getActiveAnimation():Ext.fx.Anim|boolean;
    /**
    Returns the current animation if this object has any effects actively running or queued, else returns false. 
    */
        hasActiveFx():Ext.fx.Anim|boolean;
    /**
    Ensures that all effects queued after sequenceFx is called on this object are run in sequence. 
    */
        sequenceFx():any;
    /**
    Stops any running effects and clears this object's internal effects queue if it contains any additional effects
that 
    */
        stopAnimation():Ext.dom.Element;
    /**
    Stops any running effects and clears this object's internal effects queue if it contains any additional effects
that 
    */
        stopFx():Ext.dom.Element;
    /**
    Ensures that all effects queued after syncFx is called on this object are run concurrently. 
    */
        syncFx():any;
    }
    /**
    This class provides an unordered collection similar to Ext.util.Collection. 
    */
    export class Bag extends Ext.Base {
    /**
    Mutation counter which is incremented when the collection changes. 
    */
        generation: number;
    /**
    The count of items in the collection. 
    */
        length: number;
    /**
     
    */
        constructor();
    }
    /**
    Base64 is a group of similar binary-to-text encoding schemes that represent binary data in an ASCII string format by

    */
    export class Base64 {
    /**
    Decodes given base64 formatted string 
    */
        static decode(input: any):string;
    /**
    Encodes given string in to base64 formatted string 
    */
        static encode(input: any):string;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    /**
    Utility class for manipulating CSS rules

    */
    export class CSS {
    /**
    Creates a rule. 
    */
        static createRule(styleSheet: CSSStyleSheet, selector: string, property: string):CSSStyleRule;
    /**
    Creates a stylesheet from a text blob of rules. 
    */
        static createStyleSheet(cssText: string, id: string):CSSStyleSheet;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Gets an an individual CSS rule by selector(s) 
    */
        static getRule(selector: string|string[], refreshCache: boolean):CSSStyleRule;
    /**
    Gets all css rules for the document 
    */
        static getRules(refreshCache: boolean):any;
    /**
    Refresh the rule cache if you have dynamically added stylesheets 
    */
        static refreshCache():any;
    /**
    Removes a style or link tag by id 
    */
        static removeStyleSheet(id: string):void;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Dynamically swaps an existing stylesheet reference for a new one 
    */
        static swapStyleSheet(id: string, url: string):void;
    /**
    Updates a rule property 
    */
        static updateRule(selector: string|string[], property: string, value: string):boolean;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface CSVConfig {
    }
    /**
    This class contains utility methods for dealing with CSV (Comma Separated Values) as
specified in RFC 4180. 
    */
    export class CSV {
    /**
    Decodes a string of encoded values into an array of rows. 
    */
        static decode(input: string, delimiter?: string):string[][];
    /**
    Converts a two-dimensional array into an encoded string. 
    */
        static encode(input: any[][], delimiter?: string):string;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface CacheConfig {
    /**
    The maximum size the cache is allowed to grow to before
further additions cause removal of the least recently used en
    */
        maxSize?: number;
    }
    /**
    This class is used to manage simple, LRU caches. 
    */
    export class Cache {
    /**
    The number of items in this cache. 
    */
        count: number;
    /**
    Removes all items from this cache. 
    */
        clear():void;
    /**
    Calls the given function fn for each item in the cache. 
    */
        each(fn: (key: string, value: any) => any, scope?: any):void;
    /**
    This method is called internally from get when the cache is full and
the least-recently-used (LRU) item has been remo
    */
        evict(key: string, value: any):void;
    /**
    Finds an item in this cache and returns its value. 
    */
        get(key: string, ...args: any[]):any;
    /**
    This method is called by get when the key is not found in the cache. 
    */
        miss(key: string, ...args: any[]):void;
    }
    interface ClickRepeaterConfig extends Ext.util.ObservableConfig {
    /**
    True if autorepeating should start slowly and accelerate. 
    */
        accelerate?: boolean;
    /**
    The initial delay before the repeating event begins firing. 
    */
        delay?: number;
    /**
    The element to act as a button.

    */
        el?: string|HTMLElement|Ext.dom.Element;
    /**
    The interval between firings of the "click" event (in milliseconds). 
    */
        interval?: number;
    /**
    A CSS class name to be applied to the element while pressed.

    */
        pressedCls?: string;
    /**
    True to prevent the default click event 
    */
        preventDefault?: boolean;
    /**
    True to stop the default click event 
    */
        stopDefault?: boolean;
    }
    /**
    A wrapper class which can be applied to any element. 
    */
    export class ClickRepeater extends Ext.util.Observable {
    /**
    Creates new ClickRepeater. 
    */
        constructor(el: string|HTMLElement|Ext.dom.Element, config?: Ext.util.ClickRepeaterConfig);
    /**
    Disables the repeater and stops events from firing. 
    */
        disable(force: any):void;
    /**
    Enables the repeater and allows events to fire. 
    */
        enable():void;
    /**
    Convenience function for setting disabled/enabled by boolean. 
    */
        setDisabled(disabled: boolean):void;
    }
    interface CollectionConfig {
    /**
    A function that can convert newly added items to a proper type before being
added to this collection.

    */
        decoder?: Function;
    /**
    The default sort direction to use if one is not specified. 
    */
        defaultSortDirection?: string;
    /**
    One or more Ext.util.CollectionKey' configuration objects or key properties. 
    */
        extraKeys?: any;
    /**
    The collection of Filters for this collection. 
    */
        filters?: any[]|Ext.util.FilterCollection;
    /**
    A configuration object for this collection's grouper. 
    */
        grouper?: any;
    /**
    The collection of to hold each group container. 
    */
        groups?: Ext.util.GroupCollection;
    /**
    A function to retrieve the key of an item in the collection. 
    */
        keyFn?: Function;
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    /**
    The maximum number of sorters which may be applied to this Sortable when using
the "multi" insertion position when ad
    */
        multiSortLimit?: number;
    /**
    The root property to use for aggregation, filtering and sorting. 
    */
        rootProperty?: string;
    /**
    Array of sorters for this collection. 
    */
        sorters?: any[]|Ext.util.SorterCollection;
    /**
    The base Collection. 
    */
        source?: Ext.util.Collection;
    }
    /**
    This class manages uniquely keyed objects such as records or
components. 
    */
    export class Collection extends Ext.Base {
    /**
    A read-only flag indicating if this object is filtered. 
    */
        filtered: boolean;
    /**
    Mutation counter which is incremented when the collection changes. 
    */
        generation: number;
    /**
    A read-only flag indicating if this object is grouped. 
    */
        grouped: boolean;
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Collection, or subclass
thereof. 
    */
        isCollection: boolean;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
    The count of items in the collection. 
    */
        length: number;
    /**
    A read-only flag indicating if this object is sorted. 
    */
        sorted: boolean;
    /**
    A counter that is increased by beginUpdate and decreased by endUpdate. 
    */
        updating: number;
    /**
    Adds an item to the collection. 
    */
        add(item: any):any;
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Returns the result of the specified aggregation operation against all items in this
collection. 
    */
        aggregate(property: string, operation: string|((items: any[], values: any[]) => any), begin?: number, end?: number, scope?: any):any;
    /**
    See aggregate. 
    */
        aggregateByGroup(property: string, operation: string|((items: any[], values: any[]) => any), scope?: any):any;
    /**
    Averages property values from some or all of the items in this collection. 
    */
        average(property: string, begin?: number, end?: number):any;
    /**
    See average. 
    */
        averageByGroup(property: string):any;
    /**
    This method is called to indicate the start of multiple changes to the collection. 
    */
        beginUpdate():void;
    /**
    Determines the minimum and maximum values for the specified property over some or
all of the items in this collection. 
    */
        bounds(property: string, begin?: number, end?: number):any[];
    /**
    See bounds. 
    */
        boundsByGroup(property: string):any;
    /**
    Removes all items from the collection. 
    */
        clear():void;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Creates a shallow copy of this collection 
    */
        clone():Ext.util.Collection;
    /**
    Collects unique values of a particular property in this Collection. 
    */
        collect(property: string, root?: string, allowNull?: boolean):any[];
    /**
    Returns true if the collection contains the passed Object as an item. 
    */
        contains(item: any):boolean;
    /**
    Returns true if the collection contains the passed Object as a key. 
    */
        containsKey(key: string):boolean;
    /**
    Determines the number of items in the collection. 
    */
        count():number;
    /**
    See count. 
    */
        countByGroup():any;
    /**
    Creates a new collection that is a filtered subset of this collection. 
    */
        createFiltered(property: Ext.util.Filter[]|string|Function, value: any, anyMatch?: boolean, caseSensitive?: boolean, exactMatch?: boolean):Ext.util.Collection;
    /**
    This method is an alias for decodeItems but is called when items are being
removed. 
    */
        decodeRemoveItems():void;
    /**
    Executes the specified function once for every item in the collection. 
    */
        each(fn: (item: any, index: number, len: number) => any, scope?: any):void;
    /**
    Executes the specified function once for every key in the collection, passing each
key, and its associated item as th
    */
        eachKey(fn: (key: string, item: any, index: number, len: number) => any, scope?: any):void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    This method is called after modifications are complete on a collection. 
    */
        endUpdate():void;
    /**
    Finds the items with the minimum and maximum for the specified property over some
or all of the items in this collect
    */
        extremes(property: string, begin?: number, end?: number):any[];
    /**
    See extremes. 
    */
        extremesByGroup(property: string):any;
    /**
    Filter by a function. 
    */
        filterBy(fn: (item: any, key: string) => any, scope?: any):Ext.util.Collection;
    /**
    Finds the first matching object in this collection by a specific property/value. 
    */
        find(property: string, value: string|RegExp, start?: number, startsWith?: boolean, endsWith?: boolean, ignoreCase?: boolean):any;
    /**
    Returns the first item in the collection which elicits a true return value from the
passed selection function. 
    */
        findBy(fn: (item: any, key: string) => any, scope?: any, start?: number):any;
    /**
    Finds the index of the first matching object in this collection by a specific
property/value. 
    */
        findIndex(property: string, value: string|RegExp, start?: number, startsWith?: boolean, endsWith?: boolean, ignoreCase?: boolean):number;
    /**
    Find the index of the first matching object in this collection by a function. 
    */
        findIndexBy(fn: (item: any, key: string) => any, scope?: any, start?: number):number;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Returns the first item in the collection. 
    */
        first(grouped?: boolean):any;
    /**
    Returns the item associated with the passed key. 
    */
        get(key: string|number):any;
    /**
    Returns the item at the specified index. 
    */
        getAt(index: number):any;
    /**
    Returns the value of autoFilter. 
    */
        getAutoFilter():boolean;
    /**
    Returns the value of autoSort. 
    */
        getAutoSort():boolean;
    /**
    Returns the item associated with the passed key. 
    */
        getByKey(key: string|number):any;
    /**
    Returns the number of items in the collection. 
    */
        getCount():number;
    /**
    Returns the value of decoder. 
    */
        getDecoder():Function;
    /**
    Returns the value of defaultSortDirection. 
    */
        getDefaultSortDirection():string;
    /**
    Returns the value of extraKeys. 
    */
        getExtraKeys():any;
    /**
    Returns the filter function. 
    */
        getFilterFn():Function;
    /**
    Returns the Ext.util.FilterCollection. 
    */
        getFilters(autoCreate?: any):Ext.util.FilterCollection;
    /**
    Returns the value of grouper. 
    */
        getGrouper():any;
    /**
    A function which will be called, passing an object belonging to this collection. 
    */
        getKey(item: any):any;
    /**
    Returns the value of multiSortLimit. 
    */
        getMultiSortLimit():number;
    /**
    Returns a range of items in this collection 
    */
        getRange(begin?: number, end?: number):any[];
    /**
    Returns the value of rootProperty. 
    */
        getRootProperty():string;
    /**
    Returns an up to date sort function. 
    */
        getSortFn():Function;
    /**
    Returns the Ext.util.SorterCollection. 
    */
        getSorters(autoCreate?: any):Ext.util.SorterCollection;
    /**
    Returns all unfiltered items in the Collection when the Collection has been
filtered. 
    */
        getSource():Ext.util.Collection;
    /**
    Returns an array of values for the specified (sub) property. 
    */
        getValues(property: string, root?: string, start?: number, end?: number):any[];
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Returns index within the collection of the passed Object. 
    */
        indexOf(item: any):number;
    /**
    Returns index within the collection of the passed key. 
    */
        indexOfKey(key: any):number;
    /**
    Inserts one or more items to the collection. 
    */
        insert(index: number, item: any):any;
    /**
    This method can be used to conveniently test whether an individual item would be
removed due to the current filter. 
    */
        isItemFiltered(item: any):boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    This method should be called when an item in this collection has been modified. 
    */
        itemChanged(item: any, modified?: string[], oldKey?: string|number):void;
    /**
    Returns the last item in the collection. 
    */
        last(grouped?: boolean):any;
    /**
    Determines the maximum value for the specified property over some or all of the
items in this collection. 
    */
        max(property: string, begin?: number, end?: number):any;
    /**
    See max. 
    */
        maxByGroup(property: string):any;
    /**
    Finds the item with the maximum value for the specified property over some or all
of the items in this collection. 
    */
        maxItem(property: string, begin?: number, end?: number):any;
    /**
    See maxItem. 
    */
        maxItemByGroup(property: string):any;
    /**
    Determines the minimum value for the specified property over some or all of the
items in this collection. 
    */
        min(property: string, begin?: number, end?: number):any;
    /**
    See min. 
    */
        minByGroup(property: string):any;
    /**
    Finds the item with the minimum value for the specified property over some or all
of the items in this collection. 
    */
        minItem(property: string, begin?: number, end?: number):any;
    /**
    See minItem. 
    */
        minItemByGroup(property: string):any;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Called after a change of the filter is complete. 
    */
        onFilterChange(filters: Ext.util.FilterCollection):void;
    /**
    Called after a change of the sort is complete. 
    */
        onSortChange(sorters: Ext.util.SorterCollection):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Remove an item from the collection. 
    */
        remove(item: any):number;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Remove all items in the collection. 
    */
        removeAll():Ext.util.Collection;
    /**
    Remove an item from a specified index in the collection. 
    */
        removeAt(index: number, count?: number):any;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes the item associated with the passed key from the collection. 
    */
        removeByKey(key: string):any;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Adds an item to the collection while removing any existing items. 
    */
        replaceAll(item: any):any;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    Sets the value of autoFilter. 
    */
        setAutoFilter(autoFilter: boolean):void;
    /**
    Sets the value of autoSort. 
    */
        setAutoSort(autoSort: boolean):void;
    /**
    Sets the value of decoder. 
    */
        setDecoder(decoder: Function):void;
    /**
    Sets the value of defaultSortDirection. 
    */
        setDefaultSortDirection(defaultSortDirection: string):void;
    /**
    Sets the value of extraKeys. 
    */
        setExtraKeys(extraKeys: any):void;
    /**
    Sets the value of filters. 
    */
        setFilters(filters: any[]|Ext.util.FilterCollection):void;
    /**
    Sets the value of grouper. 
    */
        setGrouper(grouper: any):void;
    /**
    Sets the value of groups. 
    */
        setGroups(groups: Ext.util.GroupCollection):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Sets the value of multiSortLimit. 
    */
        setMultiSortLimit(multiSortLimit: number):void;
    /**
    Sets the value of rootProperty. 
    */
        setRootProperty(rootProperty: string):void;
    /**
    Sets the value of sorters. 
    */
        setSorters(sorters: any[]|Ext.util.SorterCollection):void;
    /**
    Sets the value of source. 
    */
        setSource(source: Ext.util.Collection):void;
    /**
    Updates the sorters collection and triggers sorting of this Sortable. 
    */
        sort(property?: string|Function|Ext.util.Sorter[], direction?: string, mode?: string):Ext.util.Collection;
    /**
    Sorts the collection by a single sorter function 
    */
        sortBy(sorterFn: Function):void;
    /**
    This method will sort an array based on the currently configured sorters. 
    */
        sortData(data: any[]):any[];
    /**
    Sorts the items of the collection using the supplied function. 
    */
        sortItems(sortFn: Function):void;
    /**
    This method is basically the same as the JavaScript Array splice method. 
    */
        splice(index: number, toRemove: number|any[], toAdd?: any[]):void;
    /**
    Sums property values from some or all of the items in this collection. 
    */
        sum(property: string, begin?: number, end?: number):any;
    /**
    See sum. 
    */
        sumByGroup(property: string):any;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    This method calls the supplied function fn between beginUpdate and endUpdate
calls. 
    */
        update(fn: (collection: Ext.util.Collection) => any, scope?: any):any;
    /**
    Change the key for an existing item in the collection. 
    */
        updateKey(item: any, oldKey: string):void;
    }
    interface CollectionKeyConfig {
    /**
    A function to retrieve the key of an item in the collection. 
    */
        keyFn?: Function|string;
    /**
    The name of the property on each item that is its key. 
    */
        property?: string;
    /**
    The name of the sub-object property on each item that is its key. 
    */
        rootProperty?: string;
    }
    /**
    Maintains an additional key map for an Ext.util.Collection. 
    */
    export class CollectionKey extends Ext.Base {
    /**
    This property is set by Ext.util.Collection when added via extraKeys.

    */
        name: string;
    /**
    Returns the item or, if not unique possibly array of items that have the given
key. 
    */
        get(key: any):any;
    /**
    Returns the value of collection. 
    */
        getCollection():any;
    /**
    Retrieves the id of this component. 
    */
        getId():string;
    /**
    Returns the value of keyFn. 
    */
        getKeyFn():Function|string;
    /**
    Returns the value of property. 
    */
        getProperty():string;
    /**
    Returns the value of unique. 
    */
        getUnique():boolean;
    /**
    Returns the index of the item with the given key in the collection. 
    */
        indexOf(key: any, startAt?: number):number;
    /**
    Sets the value of collection. 
    */
        setCollection(collection: any):void;
    /**
    Sets the value of keyFn. 
    */
        setKeyFn(keyFn: Function|string):void;
    /**
    Sets the value of property. 
    */
        setProperty(property: string):void;
    /**
    Sets the value of rootProperty. 
    */
        setRootProperty(rootProperty: string):void;
    /**
    Sets the value of unique. 
    */
        setUnique(unique: boolean):void;
    /**
    Change the key for an existing item in the collection. 
    */
        updateKey(item: any, oldKey: string):void;
    }
    interface ComponentDraggerConfig extends Ext.dd.DragTrackerConfig {
    /**
    Specify as true to constrain the Component to within the bounds of the constrainTo region.

    */
        constrain?: boolean;
    /**
    Specify as true to constrain the drag handles within the constrainTo region.

    */
        constrainDelegate?: boolean;
    }
    /**
    A subclass of Ext.dd.DragTracker which handles dragging any Component. 
    */
    export class ComponentDragger extends Ext.dd.DragTracker {
    /**
    Creates new ComponentDragger. 
    */
        constructor(comp: Ext.util.ComponentDraggerConfig, config?: Ext.util.ComponentDraggerConfig);
    }
    /**
    Utility class for setting/reading values from browser cookies. 
    */
    export class Cookies {
    /**
    Removes a cookie with the provided name from the browser
if found by setting its expiration date to sometime in the p
    */
        static clear(name: string, path?: string):void;
    /**
    Retrieves cookies that are accessible by the current page. 
    */
        static get(name: string):any;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Creates a cookie with the specified name and value. 
    */
        static set(name: string, value: any, expires?: any, path?: string, domain?: string, secure?: boolean):void;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    /**
    The DelayedTask class provides a convenient way to "buffer" the execution of a method,
performing setTimeout where a 
    */
    export class DelayedTask {
    /**
    The id of the currently pending invocation. 
    */
        id: number;
    /**
    The parameters to this constructor serve as defaults and are not required. 
    */
        constructor(fn?: Function, scope?: any, args?: any[], cancelOnDelay?: boolean);
    /**
    Cancel the last queued timeout 
    */
        cancel():void;
    /**
    By default, cancels any pending timeout and queues a new one. 
    */
        delay(newDelay: number, newFn?: Function, newScope?: any, newArgs?: any[]):void;
    }
    interface DelimitedValueConfig {
    /**
    The format to use for dates 
    */
        dateFormat?: string;
    /**
    The string used to separate the values in a row. 
    */
        delimiter?: string;
    /**
    The string used by encode to separate each row. 
    */
        lineBreak?: string;
    /**
    The character to use as to quote values that contain the special delimiter
or lineBreak characters. 
    */
        quote?: string;
    }
    /**
    This base class contains utility methods for dealing with formats such as CSV (Comma
Separated Values) as specified i
    */
    export class DelimitedValue extends Ext.Base {
    /**
     
    */
        constructor(config: Ext.util.DelimitedValueConfig);
    /**
    Decodes a string of encoded values into an array of rows. 
    */
        decode(input: string, delimiter?: string):string[][];
    /**
    Converts a two-dimensional array into an encoded string. 
    */
        encode(input: any[][], delimiter?: string):string;
    }
    interface ElementContainerConfig {
    /**
    The canonical form of childEls is an object keyed by child's property name
with values that are objects with the foll
    */
        childEls?: any;
    }
    /**
    This mixin enables classes to declare relationships to child elements and provides the
mechanics for acquiring the el
    */
    export class ElementContainer extends Ext.Base {
    /**
    Returns the value of childEls. 
    */
        getChildEls():any;
    /**
    Sets the value of childEls. 
    */
        setChildEls(childEls: any):void;
    }
    /**
    Represents single event type that an Observable object listens to. 
    */
    export class Event extends Ext.Base {
    /**
    true in this class to identify an object as an instantiated Event, or subclass thereof. 
    */
        isEvent: boolean;
    }
    interface FilterConfig {
    /**
    True to allow any match - no regex start/end line anchors will be added. 
    */
        anyMatch?: boolean;
    /**
    True to make the regex case sensitive (adds 'i' switch to regex). 
    */
        caseSensitive?: boolean;
    /**
    true to not have this filter participate in the filtering process when the value of
this the filter is empty accordin
    */
        disableOnEmpty?: boolean;
    /**
    Setting this property to true disables this individual Filter so that it no longer contributes to a Store&#39;s filte
    */
        disabled?: boolean;
    /**
    True to force exact match (^ and $ characters added to the regex). 
    */
        exactMatch?: boolean;
    /**
    A custom filter function which is passed each item in the Ext.util.MixedCollection in turn. 
    */
        filterFn?: Function;
    /**
    An identifier by which this Filter is indexed in a Store&#39;s filters collection

Identified Filters may be individu
    */
        id?: string;
    /**
    The operator to use to compare the property to this Filter's value

Possible values are:


 &lt;
 &lt;=
 =
 &amp;gt;=
    */
        operator?: string;
    /**
    The property to filter on. 
    */
        property?: string;
    /**
    Optional root property. 
    */
        root?: string;
    /**
    The context (this property) in which the filtering function is called. 
    */
        scope?: any;
    /**
    The value you want to match against. 
    */
        value?: any;
    }
    /**
    Represents a filter that can be applied to a MixedCollection. 
    */
    export class Filter extends Ext.Base {
    /**
    Creates new Filter. 
    */
        constructor(config: Ext.util.FilterConfig);
    /**
    Returns the value of anyMatch. 
    */
        getAnyMatch():boolean;
    /**
    Returns the value of caseSensitive. 
    */
        getCaseSensitive():boolean;
    /**
    Returns the value of disableOnEmpty. 
    */
        getDisableOnEmpty():boolean;
    /**
    Returns the value of disabled. 
    */
        getDisabled():boolean;
    /**
    Returns the value of exactMatch. 
    */
        getExactMatch():boolean;
    /**
    Returns the value of operator. 
    */
        getOperator():string;
    /**
    Returns the value of property. 
    */
        getProperty():string;
    /**
    Returns the value of root. 
    */
        getRoot():string;
    /**
    Returns this filter's state. 
    */
        getState():any;
    /**
    Returns the value of value. 
    */
        getValue():any;
    /**
    Returns this filter's serialized state. 
    */
        serialize():any;
    /**
    Sets the value of anyMatch. 
    */
        setAnyMatch(anyMatch: boolean):void;
    /**
    Sets the value of caseSensitive. 
    */
        setCaseSensitive(caseSensitive: boolean):void;
    /**
    Sets the value of disableOnEmpty. 
    */
        setDisableOnEmpty(disableOnEmpty: boolean):void;
    /**
    Sets the value of disabled. 
    */
        setDisabled(disabled: boolean):void;
    /**
    Sets the value of exactMatch. 
    */
        setExactMatch(exactMatch: boolean):void;
    /**
    Sets the value of filterFn. 
    */
        setFilterFn(filterFn: Function):void;
    /**
    Sets the value of id. 
    */
        setId(id: string):void;
    /**
    Sets the value of operator. 
    */
        setOperator(operator: string):void;
    /**
    Sets the value of property. 
    */
        setProperty(property: string):void;
    /**
    Sets the value of root. 
    */
        setRoot(root: string):void;
    /**
    Sets the value of value. 
    */
        setValue(value: any):void;
    /**
    Creates a single filter function which encapsulates the passed Filter array or
Collection. 
    */
        createFilterFn(filters: Ext.util.Filter[]|Ext.util.Collection):Function;
    }
    interface FilterCollectionConfig extends Ext.util.CollectionConfig {
    }
    /**
    

    */
    export class FilterCollection extends Ext.util.Collection {
    /**
    This is the cached filter function.

    */
        filterFn: any;
    /**
     
    */
        constructor(config: Ext.util.FilterCollectionConfig);
    /**
    This method will filter an array based on the currently configured filters. 
    */
        filterData(data: any[]):any[];
    }
    interface FloatingConfig {
    /**
    A flag indicating that this component should be on the top of the z-index stack for use by the zIndexManager
to sort 
    */
        alwaysOnTop?: boolean|number;
    /**
    true to animate the shadow along with the component while the component is animating. 
    */
        animateShadow?: boolean;
    /**
    True to constrain this Components within its containing element, false to allow it to fall outside of its containing

    */
        constrain?: boolean;
    /**
    Configure as true to have this Component fixed at its X, Y coordinates in the browser viewport, immune
to scrolling t
    */
        fixed?: boolean;
    /**
    Specifies whether the floated component should be automatically focused when
it is brought to the front. 
    */
        focusOnToFront?: boolean;
    /**
    True to make the floated component modal and mask everything behind it when displayed, false to display it without
re
    */
        modal?: boolean;
    /**
    Specifies whether the floating component should be given a shadow. 
    */
        shadow?: string|boolean;
    /**
    Number of pixels to offset the shadow.

    */
        shadowOffset?: number;
    /**
    true to enable an iframe shim for this Component to keep
windowed objects from showing through.

    */
        shim?: boolean;
    }
    /**
    A mixin to add floating capability to a Component.

    */
    export class Floating extends Ext.Base {
    /**
    Only present for floating Components after
they have been rendered. 
    */
        zIndexManager: Ext.ZIndexManager;
    /**
    Only present for Ext.Component.floating Components which were
inserted as child items of Containers, and which have a
    */
        zIndexParent: Ext.container.Container;
    /**
     
    */
        constructor();
    /**
    Center this Component in its container. 
    */
        center():Ext.Component;
    /**
    Moves this floating Component into a constrain region. 
    */
        doConstrain(constrainTo?: string|HTMLElement|Ext.dom.Element|Ext.util.Region):void;
    /**
    Returns the value of alwaysOnTop. 
    */
        getAlwaysOnTop():boolean|number;
    /**
    Sets the value of alwaysOnTop. 
    */
        setAlwaysOnTop(alwaysOnTop: boolean|number):void;
    /**
    Sends this Component to the back of (lower z-index than) any other visible windows 
    */
        toBack():Ext.Component;
    /**
    Brings this floating Component to the front of any other visible, floating Components managed by the same
ZIndexManag
    */
        toFront(preventFocus?: boolean):Ext.Component;
    }
    interface FocusableConfig {
    /**
    CSS class that will be added to focused
Component, and removed when Component blurs. 
    */
        focusCls?: string;
    /**
    DOM tabIndex attribute for this Focusable

    */
        tabIndex?: number;
    }
    /**
    A mixin for individually focusable things (Components, Widgets, etc)

    */
    export class Focusable extends Ext.Base {
    /**
    true for interactive Components, false for static Components. 
    */
        focusable: boolean;
    /**
    Template method to do any pre-blur processing. 
    */
        beforeBlur(e: Ext.event.Event):void;
    /**
    Template method to do any pre-focus processing. 
    */
        beforeFocus(e: Ext.event.Event):void;
    /**
    Cancel any deferred focus on this component 
    */
        cancelFocus():void;
    /**
    Try to focus this component. 
    */
        focus(selectText?: any, delay?: boolean|number, callback?: Function, scope?: Function):Ext.Component;
    /**
    Returns the focus styling holder element associated with this Focusable. 
    */
        getFocusClsEl():Ext.dom.Element;
    /**
    Returns the focus holder element associated with this Focusable. 
    */
        getFocusEl():Ext.dom.Element;
    /**
    Return the actual tabIndex for this Focusable. 
    */
        getTabIndex():number;
    /**
    Template method to do any Focusable related initialization that
does not involve event listeners creation. 
    */
        initFocusable():void;
    /**
    Template method to do any event listener initialization for a Focusable. 
    */
        initFocusableEvents():void;
    /**
    Determine if this Focusable can receive focus at this time. 
    */
        isFocusable(deep?: boolean):boolean;
    /**
    Called when focus enters this Component's hierarchy 
    */
        onFocusEnter(e: Ext.event.Event):void;
    /**
    Called when focus exits from this Component's hierarchy 
    */
        onFocusLeave(e: Ext.event.Event):void;
    /**
    Template method to do any post-blur processing. 
    */
        postBlur(e: Ext.event.Event):void;
    /**
    Template method to do any post-focus processing. 
    */
        postFocus(e: Ext.event.Event):void;
    /**
    Set the tabIndex property for this Focusable. 
    */
        setTabIndex(newTabIndex: number):void;
    }
    interface FocusableContainerConfig {
    /**
    DOM tabIndex attribute to set on the
active Focusable child of this container when using the "Roaming tabindex"
techn
    */
        activeChildTabIndex?: number;
    /**
    Enable or disable
navigation with arrow keys for this FocusableContainer. 
    */
        enableFocusableContainer?: boolean;
    /**
    DOM tabIndex attribute to set on
inactive Focusable children of this container when using the "Roaming tabindex"
tech
    */
        inactiveChildTabIndex?: number;
    }
    /**
    A mixin for groups of Focusable things (Components, Widgets, etc) that
should respond to arrow keys to navigate among
    */
    export class FocusableContainer extends Ext.Mixin {
    }
    /**
    This class is a centralized place for formatting functions. 
    */
    export class Format {
    /**
    This may be set to true to make the currency function
append the currency sign to the formatted value. 
    */
        static currencyAtEnd: boolean;
    /**
    The number of decimal places that the currency function displays. 
    */
        static currencyPrecision: number;
    /**
    The currency sign that the currency function displays. 
    */
        static currencySign: string;
    /**
    The character that the number function uses as a decimal point. 
    */
        static decimalSeparator: string;
    /**
    The global default date format. 
    */
        static defaultDateFormat: string;
    /**
    The percent sign that the percent function displays. 
    */
        static percentSign: string;
    /**
    The character that the number function uses as a thousand separator. 
    */
        static thousandSeparator: string;
    /**
    Formats an object of name value properties as HTML element attribute values suitable for using when creating textual 
    */
        static attributes(attributes: any):void;
    /**
    Alias for Ext.String.capitalize. 
    */
        static capitalize(string: string):string;
    /**
    Format a number as a currency. 
    */
        static currency(value: number|string, sign?: string, decimals?: number, end?: boolean):string;
    /**
    Formats the passed date using the specified format pattern. 
    */
        static date(value: string|Date, format?: string):string;
    /**
    Returns a date rendering function that can be reused to apply a date format multiple times efficiently. 
    */
        static dateRenderer(format: string):Function;
    /**
    Checks a reference and converts it to the default value if it's empty. 
    */
        static defaultValue(value: any, defaultValue?: string):string;
    /**
    Alias for Ext.String.ellipsis. 
    */
        static ellipsis(value: string, length: number, word?: boolean):string;
    /**
    Alias for Ext.String.escape. 
    */
        static escape(string: string):string;
    /**
    Alias for Ext.String.escapeRegex. 
    */
        static escapeRegex(string: string):string;
    /**
    Simple format for a file size (xxx bytes, xxx KB, xxx MB). 
    */
        static fileSize(size: number|string):string;
    /**
    Alias for Ext.String.format. 
    */
        static format(string: string, ...values: any[]):string;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Returns the given number as a base 16 string at least digits in length. 
    */
        static hex(value: number, digits: number):string;
    /**
    Alias for Ext.String.htmlDecode. 
    */
        static htmlDecode(value: string):string;
    /**
    Alias for Ext.String.htmlEncode. 
    */
        static htmlEncode(value: string):string;
    /**
    Alias for Ext.String.leftPad. 
    */
        static leftPad(string: string, size: number, character?: string):string;
    /**
    Converts a string to all lower case letters. 
    */
        static lowercase(value: string):string;
    /**
    It does simple math for use in a template, for example:

var tpl = new Ext.Template('{value} * 10 = {value:math("* 10
    */
        static math():Function;
    /**
    Converts newline characters to the HTML tag &lt;br/&gt; 
    */
        static nl2br(v: string):string;
    /**
    Formats the passed number according to the passed format string. 
    */
        static number(v: number, formatString: string):string;
    /**
    Returns a number rendering function that can be reused to apply a number format multiple
times efficiently. 
    */
        static numberRenderer(format: string):Function;
    /**
    Returns this result:

 value || orValue


The usefulness of this formatter method is in templates. 
    */
        static or(value: boolean, orValue: any):void;
    /**
    Parses a number or string representing margin sizes into an object. 
    */
        static parseBox(box: number|string):any;
    /**
    Formats the passed number as a percentage according to the passed format string. 
    */
        static percent(value: number, formatString?: string):string;
    /**
    If value is a number, returns the argument from that index. 
    */
        static pick(value: boolean, firstValue: any, secondValue: any):void;
    /**
    Selectively return the plural form of a word based on a numeric value. 
    */
        static plural(value: number, singular: string, plural?: string):string;
    /**
    Rounds the passed number to the required decimal precision. 
    */
        static round(value: number|string, precision?: number):number;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Strips all script tags. 
    */
        static stripScripts(value: any):string;
    /**
    Strips all HTML tags. 
    */
        static stripTags(value: any):string;
    /**
    Returns a substring from within an original string. 
    */
        static substr(value: string, start: number, length: number):string;
    /**
    Alias for Ext.String.toggle. 
    */
        static toggle(string: string, value: string, other: string):string;
    /**
    Alias for Ext.String.trim. 
    */
        static trim(string: string):string;
    /**
    Alias for Ext.String.uncapitalize. 
    */
        static uncapitalize(string: string):string;
    /**
    Checks a reference and converts it to empty string if it is undefined. 
    */
        static undef(value: any):any;
    /**
    Converts a string to all upper case letters. 
    */
        static uppercase(value: string):string;
    /**
    Format a number as US currency. 
    */
        static usMoney(value: number|string):string;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface GroupConfig extends Ext.util.CollectionConfig {
    }
    /**
    Encapsulates a grouped collection of records within a Ext.util.Collection

    */
    export class Group extends Ext.util.Collection {
    /**
    Returns the value of groupKey. 
    */
        getGroupKey():any;
    /**
    Sets the value of groupKey. 
    */
        setGroupKey(groupKey: any):void;
    }
    interface GroupCollectionConfig extends Ext.util.CollectionConfig {
    }
    /**
    A collection containing the result of applying grouping to the records in the store.

    */
    export class GroupCollection extends Ext.util.Collection {
    /**
    Returns the value of itemRoot. 
    */
        getItemRoot():any;
    /**
    Sets the value of itemRoot. 
    */
        setItemRoot(itemRoot: any):void;
    }
    interface GrouperConfig extends Ext.util.SorterConfig {
    /**
    This function is called for each item in the collection
to determine the group to which it belongs. 
    */
        groupFn?: Function;
    /**
    You can set this configuration if you want the groups
to be sorted on something other then the group string returned 
    */
        sortProperty?: string;
    }
    /**
    Represents a grouping of items. 
    */
    export class Grouper extends Ext.util.Sorter {
    /**
     
    */
        constructor(config: Ext.util.GrouperConfig);
    /**
    Returns the value of groupFn. 
    */
        getGroupFn():Function;
    /**
    Returns the value for grouping to be used. 
    */
        getGroupString(item: Ext.data.Model):string;
    /**
    Returns the value of sortProperty. 
    */
        getSortProperty():string;
    /**
    Sets the value of groupFn. 
    */
        setGroupFn(groupFn: Function):void;
    /**
    Sets the value of sortProperty. 
    */
        setSortProperty(sortProperty: string):void;
    }
    interface HashMapConfig {
    /**
    A function that is used to retrieve a default key for a passed object. 
    */
        keyFn?: Function;
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    }
    /**
    Represents a collection of a set of key and value pairs. 
    */
    export class HashMap extends Ext.Base {
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
    Creates new HashMap. 
    */
        constructor(config?: Ext.util.HashMapConfig);
    /**
    Adds an item to the collection. 
    */
        add(key: any, o?: any):any;
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Removes all items from the hash. 
    */
        clear():Ext.util.HashMap;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Performs a shallow copy on this hash. 
    */
        clone():Ext.util.HashMap;
    /**
    Checks whether a value exists in the hash. 
    */
        contains(value: any):boolean;
    /**
    Checks whether a key exists in the hash. 
    */
        containsKey(key: string):boolean;
    /**
    Executes the specified function once for each item in the hash. 
    */
        each(fn: (key: string, value: number, length: number) => any, scope?: any):Ext.util.HashMap;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Retrieves an item with a particular key. 
    */
        get(key: string):any;
    /**
    Gets the number of items in the hash. 
    */
        getCount():number;
    /**
    Extracts the key from an object. 
    */
        getKey(o: any):string;
    /**
    Returns the value of keyFn. 
    */
        getKeyFn():Function;
    /**
    Return all of the keys in the hash. 
    */
        getKeys():any[];
    /**
    Return all of the values in the hash. 
    */
        getValues():any[];
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Remove an item from the hash. 
    */
        remove(o: any):boolean;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Remove an item from the hash. 
    */
        removeAtKey(key: string):boolean;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Replaces an item in the hash. 
    */
        replace(key: string, value: any):any;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    Sets the value of keyFn. 
    */
        setKeyFn(keyFn: Function):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    }
    interface HistoryConfig {
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
    }
    /**
    History management component that allows you to register arbitrary tokens that signify application
history state on n
    */
    export class History {
    /**
    This object holds a key for any event that has a listener. 
    */
        static hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        static isObservable: boolean;
    /**
    True to use window.top.location.hash or false to use window.location.hash. 
    */
        static useTopWindow: boolean;
    /**
    Add a new token to the history stack. 
    */
        static add(token: string, preventDuplicates?: boolean):void;
    /**
    Appends an after-event handler. 
    */
        static addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        static addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        static addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        static addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Programmatically steps back one step in browser history (equivalent to the user pressing the Back button). 
    */
        static back():void;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        static clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        static clearManagedListeners():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        static enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        static fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        static fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        static fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Programmatically steps forward one step in browser history (equivalent to the user pressing the Forward button). 
    */
        static forward():void;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Retrieves the currently-active history token. 
    */
        static getToken():string;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        static hasListener(eventName: string):boolean;
    /**
    Initializes the global History instance. 
    */
        static init(onReady?: Function, scope?: any):void;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        static isSuspended(event?: string):boolean;
    /**
    Shorthand for addManagedListener. 
    */
        static mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        static mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        static on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        static onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        static onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        static relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        static removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        static removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        static removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        static removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Resumes firing of the named event(s). 
    */
        static resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        static resumeEvents(discardQueue?: boolean):void;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    An alias for addListener. 
    */
        static setListeners(listeners: any):void;
    /**
    Suspends firing of the named event(s). 
    */
        static suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        static suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        static un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        static unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        static unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    /**
    General purpose inflector class that pluralizes, singularizes and
ordinalizes words. 
    */
    export class Inflector {
    /**
    Returns the correct Model name for a given string. 
    */
        static classify(word: string):string;
    /**
    Removes all registered pluralization rules 
    */
        static clearPlurals():void;
    /**
    Removes all registered singularization rules 
    */
        static clearSingulars():void;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Returns true if the given word is transnumeral (the word is its own singular and plural form - e.g. 
    */
        static isTransnumeral(word: string):boolean;
    /**
    Ordinalizes a given number by adding a prefix such as 'st', 'nd', 'rd' or 'th' based on the last digit of the
number. 
    */
        static ordinalize(number: number):string;
    /**
    Adds a new pluralization rule to the Inflector. 
    */
        static plural(matcher: RegExp, replacer: string):void;
    /**
    Returns the pluralized form of a word (e.g. 
    */
        static pluralize(word: string):string;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Adds a new singularization rule to the Inflector. 
    */
        static singular(matcher: RegExp, replacer: string):void;
    /**
    Returns the singularized form of a word (e.g. 
    */
        static singularize(word: string):string;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface KeyMapConfig {
    /**
    Either a single object describing a handling function for s specified key (or set of keys), or
an array of such objects. 
    */
        binding?: any;
    /**
    The event to listen for to pick up key events. 
    */
        eventName?: string;
    /**
    Configure this as true if there are any input fields within the target, and this KeyNav
should not process events fro
    */
        ignoreInputFields?: boolean;
    /**
    An optional event processor function which accepts the argument list provided by the
configured event of the target, 
    */
        processEvent?: Function;
    /**
    The scope (this context) in which the processEvent method is executed. 
    */
        processEventScope?: any;
    /**
    The object on which to listen for the event specified by the eventName config option.

    */
        target?: Ext.Component|Ext.dom.Element|HTMLElement|string;
    }
    /**
    Handles mapping key events to handling functions for an element or a Component. 
    */
    export class KeyMap extends Ext.Base {
    /**
    The last key event that this KeyMap handled.

    */
        lastKeyEvent: Ext.event.Event;
    /**
     
    */
        constructor(config: Ext.util.KeyMapConfig);
    /**
    Add a new binding to this KeyMap. 
    */
        addBinding(binding: any):void;
    /**
    Disable this KeyMap 
    */
        disable():void;
    /**
    Enables this KeyMap 
    */
        enable():void;
    /**
    Returns true if this KeyMap is enabled 
    */
        isEnabled():boolean;
    /**
    Shorthand for adding a single key listener. 
    */
        on(key: any, fn: Function, scope?: any):void;
    /**
    Remove a binding from this KeyMap. 
    */
        removeBinding(binding: any):void;
    /**
    Convenience function for setting disabled/enabled by boolean. 
    */
        setDisabled(disabled: boolean):void;
    /**
    Shorthand for removing a single key listener. 
    */
        un(key: any, fn: Function, scope?: any):void;
    }
    interface KeyNavConfig {
    /**
    The method to call on the Ext.event.Event after this KeyNav intercepts a key. 
    */
        defaultEventAction?: string;
    /**
    True to disable this KeyNav instance. 
    */
        disabled?: boolean;
    /**
    The event to listen for to pick up key events. 
    */
        eventName?: string;
    /**
    Handle the keydown event instead of keypress. 
    */
        forceKeyDown?: boolean;
    /**
    Configure this as true if there are any input fields within the target, and this KeyNav
should not process events fro
    */
        ignoreInputFields?: boolean;
    /**
    An optional pre-existing KeyMap to use to listen for key events. 
    */
        keyMap?: Ext.util.KeyMap;
    /**
    An optional event processor function which accepts the argument list provided by the configured
event of the target, 
    */
        processEvent?: Function;
    /**
    The scope (this context) in which the processEvent method is executed. 
    */
        processEventScope?: any;
    /**
    The object on which to listen for the event specified by the eventName config option.

    */
        target?: Ext.Component|Ext.dom.Element|HTMLElement|string;
    }
    /**
    Provides a convenient wrapper for normalized keyboard navigation. 
    */
    export class KeyNav extends Ext.Base {
    /**
    The last key event that this KeyMap handled.

    */
        lastKeyEvent: Ext.event.Event;
    /**
     
    */
        constructor(config: Ext.util.KeyNavConfig);
    /**
    Disables this KeyNav. 
    */
        disable():void;
    /**
    Enables this KeyNav. 
    */
        enable():void;
    /**
    Convenience function for setting disabled/enabled by boolean. 
    */
        setDisabled(disabled: boolean):void;
    }
    interface LocalStorageConfig {
    /**
    The number of milliseconds to delay writing changes to the underlying store. 
    */
        flushDelay?: number;
    /**
    The unique identifier for this store. 
    */
        id?: string;
    /**
    Determines if the keys collection is continuously maintained by this object. 
    */
        lazyKeys?: boolean;
    /**
    The prefix to apply to all localStorage keys manages by this instance. 
    */
        prefix?: string;
    /**
    Specify this as true to use sessionStorage instead of the default localStoreage. 
    */
        session?: boolean;
    }
    /**
    This class provides a common API to LocalStorage with backwards compatibility for IE. 
    */
    export class LocalStorage extends Ext.Base {
    /**
    This property is set to true when the instance's destroy method is called. 
    */
        destroyed: boolean;
    /**
    This will be true if some form of local storage is supported or false if not. 
    */
        supported: boolean;
    /**
     
    */
        constructor(config: Ext.util.LocalStorageConfig);
    /**
    Removes all of the keys of this storage. 
    */
        clear():void;
    /**
    Returns the value associated with the given key. 
    */
        getItem(key: string):string;
    /**
    Returns the keys for this storage. 
    */
        getKeys():string[];
    /**
    Returns the specified key given its index. 
    */
        key(index: number):string;
    /**
    Call this method when finished with an instance returned by get instead of calling
destroy. 
    */
        release():void;
    /**
    Removes the value associated with the given key. 
    */
        removeItem(key: string):void;
    /**
    This method ensures the content of the store is saved to the underlying storage. 
    */
        save(delay?: number):void;
    /**
    Sets the value associated with the given key. 
    */
        setItem(key: string, value: string):void;
    /**
    Returns a shared instance of the desired local store given its id. 
    */
        get(id: any):Ext.util.LocalStorage;
    }
    interface LruCacheConfig extends Ext.util.HashMapConfig {
    /**
    The maximum size the cache is allowed to grow to before further additions cause
removal of the least recently used en
    */
        maxSize?: number;
    }
    /**
    A linked HashMap implementation which maintains most recently accessed
items at the end of the list, and purges the c
    */
    export class LruCache extends Ext.util.HashMap {
    /**
    Creates new HashMap. 
    */
        constructor(config?: Ext.util.LruCacheConfig);
    /**
    Returns the value of maxSize. 
    */
        getMaxSize():number;
    /**
    Purge the least recently used entries if the maxSize has been exceeded. 
    */
        prune():void;
    /**
    Sets the value of maxSize. 
    */
        setMaxSize(maxSize: number):void;
    }
    /**
    This class manages a set of captured properties from an object. 
    */
    export class Memento extends Ext.Base {
    /**
    The default target object for capture/restore (passed to the constructor).

    */
        target: any;
    /**
    Creates a new memento and optionally captures properties from the target object. 
    */
        constructor(target: any, props: string|string[]);
    /**
    Captures the specified properties from the target object in this memento. 
    */
        capture(props: string|string[], target: any):void;
    /**
    Removes the specified properties from this memento. 
    */
        remove(props: string|string[]):void;
    /**
    Restores the specified properties from this memento to the target object. 
    */
        restore(props: string|string[], clear: boolean, target: any):void;
    /**
    Restores all captured properties in this memento to the target object. 
    */
        restoreAll(clear: boolean, target: any):void;
    }
    interface MixedCollectionConfig extends Ext.util.AbstractMixedCollectionConfig {
    /**
    The default sort direction to use if one is not specified. 
    */
        defaultSortDirection?: string;
    /**
    The maximum number of sorters which may be applied to this Sortable when using the "multi" insertion position
when ad
    */
        multiSortLimit?: number;
    /**
    The property in each item that contains the data to sort.

    */
        sortRoot?: string;
    /**
    The initial set of Sorters. 
    */
        sorters?: Ext.util.Sorter[]|any[];
    }
    /**
    Represents a collection of a set of key and value pairs. 
    */
    export class MixedCollection extends Ext.util.AbstractMixedCollection {
    /**
    true in this class to identify an object as an instantiated Sortable, or subclass thereof. 
    */
        isSortable: boolean;
    /**
    Creates new MixedCollection. 
    */
        constructor(config: Ext.util.MixedCollectionConfig);
    /**
    Calculates the insertion index of the new item based upon the comparison function passed, or the current sort order. 
    */
        findInsertionIndex(newItem: any, sorterFn?: Function):number;
    /**
    Returns a comparator function which compares two items and returns -1, 0, or 1 depending
on the currently defined set
    */
        generateComparator():void;
    /**
    Gets the first sorter from the sorters collection, excluding
any groupers that may be in place 
    */
        getFirstSorter():Ext.util.Sorter;
    /**
    Returns the number of Sorters which apply to this Sortable. 
    */
        getSorterCount():void;
    /**
    Returns the value of sorters. 
    */
        getSorters():Ext.util.Sorter[]|any[];
    /**
    Sets the value of sorters. 
    */
        setSorters(sorters: Ext.util.Sorter[]|any[]):void;
    /**
    Updates the sorters collection and triggers sorting of this Sortable. 
    */
        sort(sorters?: string|Ext.util.Sorter[], direction?: string, insertionPosition?: string):Ext.util.Sorter[];
    /**
    Sorts the collection by a single sorter function 
    */
        sortBy(sorterFn: Function):void;
    /**
    Sorts this collection by keys. 
    */
        sortByKey(direction?: string, fn?: Function):void;
    }
    /**
    This class accepts an object that serves as a template for creating new objects. 
    */
    export class ObjectTemplate extends Ext.Base {
    /**
    Constructs the ObjectTemplate. 
    */
        constructor(template: any, options?: any);
    /**
    Applies the given context object to this template and returns a new object with
the appropriate pieces replaced. 
    */
        apply(context: any):any;
    /**
    Compiles the  given template into an apply method that is ready to run. 
    */
        compile(template: any):Function;
    }
    interface ObservableConfig extends Ext.mixin.ObservableConfig {
    }
    /**
    A Ext.mixin.Observable subclass that is provided for backward compatibility. 
    */
    export class Observable extends Ext.mixin.Observable {
    }
    /**
    

    */
    export class Offset extends Ext.Base {
    /**
    End Definitions 
    */
        constructor(x: any, y: any);
    }
    /**
    This class defines the operators that are shared by DomQuery and ComponentQuery

    */
    export class Operators {
    }
    /**
    

    */
    export class PaintMonitor extends Ext.Base {
    /**
     
    */
        constructor(config: any);
    }
    /**
    Represents a 2D point with x and y properties, useful for comparison and instantiation
from an event:

var point = Ex
    */
    export class Point extends Ext.util.Region {
    /**
    Creates point on 2D plane. 
    */
        constructor(x?: number, y?: number);
    /**
    Copy a new instance of this point. 
    */
        clone():Ext.util.Point;
    /**
    Returns true if the passed point is within a certain distance of this point. 
    */
        isCloseTo(point: any, threshold: any):boolean;
    /**
    Determins whether this Point contained by the passed Region, Component or element. 
    */
        isContainedBy(region: Ext.util.Region|Ext.Component|Ext.dom.Element|HTMLElement):boolean;
    /**
    Returns true if this point is close to another one. 
    */
        isWithin():boolean;
    /**
    Compare this point with another point when the x and y values of both points are rounded. 
    */
        roundedEquals(point: any):boolean;
    /**
    Alias for translateBy 
    */
        translate(x: any, y: number):Ext.util.Region;
    /**
    Returns a new instance of Ext.util.Point based on the pageX / pageY values of the given event. 
    */
        fromEvent(e: Event):Ext.util.Point;
    /**
    Returns a new instance of Ext.util.Point based on the pageX / pageY values of the given touch. 
    */
        fromTouch(touch: Event):Ext.util.Point;
    }
    /**
    This mixin provides a common interface for objects that can be positioned, e.g. 
    */
    export class Positionable extends Ext.Base {
    /**
    Aligns the element with another element relative to the specified anchor points. 
    */
        alignTo(element: Ext.util.Positionable|HTMLElement|string, position?: string, offsets?: number[]):Ext.util.Positionable;
    /**
    Gets the x,y coordinates to align this element with another element. 
    */
        getAlignToXY(element: Ext.util.Positionable|HTMLElement|string, position?: string, offsets?: number[]):number[];
    /**
    Gets the x,y coordinates specified by the anchor position on the element. 
    */
        getAnchorXY(anchor?: string, local?: boolean, size?: any):number[];
    /**
    Return an object defining the area of this Element which can be passed to
setBox to set another Element's size/locati
    */
        getBox(contentBox?: boolean, local?: boolean):any;
    /**
    Returns the content region of this element for purposes of constraining floating
children. 
    */
        getConstrainRegion():void;
    /**
    Returns the [X, Y] vector by which this Positionable's element must be translated to make a best
attempt to constrain
    */
        getConstrainVector(constrainTo?: Ext.util.Positionable|HTMLElement|string|Ext.util.Region, proposedPosition?: number[], proposedSize?: number[]):number[]|boolean;
    /**
    Returns the x coordinate of this element reletive to its offsetParent. 
    */
        getLocalX():number;
    /**
    Returns the x and y coordinates of this element relative to its offsetParent. 
    */
        getLocalXY():number[];
    /**
    Returns the y coordinate of this element reletive to its offsetParent. 
    */
        getLocalY():number;
    /**
    Returns the offsets of this element from the passed element. 
    */
        getOffsetsTo(offsetsTo: Ext.util.Positionable|HTMLElement|string):number[];
    /**
    Returns a region object that defines the area of this element. 
    */
        getRegion():Ext.util.Region;
    /**
    Returns the content region of this element. 
    */
        getViewRegion():Ext.util.Region;
    /**
    Gets the current X position of the DOM element based on page coordinates. 
    */
        getX():number;
    /**
    Gets the current position of the DOM element based on page coordinates. 
    */
        getXY():number[];
    /**
    Gets the current Y position of the DOM element based on page coordinates. 
    */
        getY():number;
    /**
    Move the element relative to its current position. 
    */
        move(direction: string, distance: number):void;
    /**
    Sets the element's box. 
    */
        setBox(box: any):Ext.util.Positionable;
    /**
    Sets the local x coordinate of this element using CSS style. 
    */
        setLocalX(x: number):Ext.util.Positionable;
    /**
    Sets the local x and y coordinates of this element using CSS style. 
    */
        setLocalXY(x: number|any[], y?: number):Ext.util.Positionable;
    /**
    Sets the local y coordinate of this element using CSS style. 
    */
        setLocalY(y: number):Ext.util.Positionable;
    /**
    Sets the X position of the DOM element based on page coordinates. 
    */
        setX(x: number):Ext.util.Positionable;
    /**
    Sets the position of the DOM element in page coordinates. 
    */
        setXY(pos: number[]):Ext.util.Positionable;
    /**
    Sets the Y position of the DOM element based on page coordinates. 
    */
        setY(y: number):Ext.util.Positionable;
    /**
    Translates the passed page coordinates into left/top css values for the element 
    */
        translatePoints(x: number|any[], y?: number):any;
    }
    /**
    Manages certain element-like data prior to rendering. 
    */
    export class ProtoElement extends Ext.Base {
    /**
    The property name for the className on the data object passed to writeTo. 
    */
        clsProp: string;
    /**
    The property name for the removed classes on the data object passed to writeTo. 
    */
        removedProp: string;
    /**
    True if the style must be converted to text during writeTo. 
    */
        styleIsText: boolean;
    /**
    The property name for the style on the data object passed to writeTo. 
    */
        styleProp: string;
    /**
    Adds class to the element. 
    */
        addCls(cls: string):Ext.util.ProtoElement;
    /**
    Indicates that the current state of the object has been flushed to the DOM, so we need
to track any subsequent changes 
    */
        flush():void;
    /**
    True if the element has given class. 
    */
        hasCls(cls: string):boolean;
    /**
    Removes class from the element. 
    */
        removeCls(cls: string):Ext.util.ProtoElement;
    /**
    Wrapper for setting style properties, also takes single object parameter of
multiple styles. 
    */
        setStyle(property: any, value?: string):Ext.util.ProtoElement;
    /**
    Writes style and class properties to given object. 
    */
        writeTo(to: any):any;
    }
    /**
    An internal Queue class.

    */
    export class Queue extends Ext.Base {
    /**
     
    */
        constructor();
    /**
    Removes all items from the collection. 
    */
        clear():void;
    /**
    Returns the number of items in the collection. 
    */
        getCount():number;
    /**
    Remove an item from the collection. 
    */
        remove(obj: any):any;
    }
    /**
    This class represents a rectangular region in X,Y space, and performs geometric
transformations or tests upon the reg
    */
    export class Region extends Ext.Base {
    /**
    Creates a region from the bounding sides. 
    */
        constructor(top: number, right: number, bottom: number, left: number);
    /**
    Modifies the current region to be adjusted by offsets. 
    */
        adjust(top: number, right: number, bottom: number, left: number):Ext.util.Region;
    /**
    Modifies the current region to be constrained to the targetRegion. 
    */
        constrainTo(targetRegion: Ext.util.Region):Ext.util.Region;
    /**
    Checks if this region completely contains the region that is passed in. 
    */
        contains(region: Ext.util.Region):boolean;
    /**
    Create a copy of this Region. 
    */
        copy():Ext.util.Region;
    /**
    Copy the values of another Region to this Region 
    */
        copyFrom(p: Ext.util.Region):Ext.util.Region;
    /**
    Check whether this region is equivalent to the given region 
    */
        equals(region: Ext.util.Region):boolean;
    /**
    Get the offset amount of a point outside the region 
    */
        getOutOfBoundOffset(axis?: string, p?: Ext.util.Point):Ext.util.Offset;
    /**
    Get the offset amount on the x-axis 
    */
        getOutOfBoundOffsetX(p: number):number;
    /**
    Get the offset amount on the y-axis 
    */
        getOutOfBoundOffsetY(p: number):number;
    /**
    Checks if this region intersects the region passed in. 
    */
        intersect(region: Ext.util.Region):Ext.util.Region|boolean;
    /**
    Check whether the point / offset is out of bound 
    */
        isOutOfBound(axis?: string, p?: Ext.util.Point|number):boolean;
    /**
    Check whether the offset is out of bound in the x-axis 
    */
        isOutOfBoundX(p: number):boolean;
    /**
    Check whether the offset is out of bound in the y-axis 
    */
        isOutOfBoundY(p: number):boolean;
    /**
    Round all the properties of this region 
    */
        round():Ext.util.Region;
    /**
    Dump this to an eye-friendly string, great for debugging 
    */
        toString():string;
    /**
    Translate this Region by the given offset amount 
    */
        translateBy(x: any, y: number):Ext.util.Region;
    /**
    Returns the smallest region that contains the current AND targetRegion. 
    */
        union(region: Ext.util.Region):Ext.util.Region;
    /**
    Creates a Region from a "box" Object which contains four numeric properties top, right, bottom and left. 
    */
        from(o: any):Ext.util.Region;
    /**
    Retrieves an Ext.util.Region for a particular element. 
    */
        getRegion(el: string|HTMLElement|Ext.dom.Element):Ext.util.Region;
    }
    /**
    Given a component hierarchy of this:

 {
     xtype: 'panel',
     id: 'ContainerA',
     layout: 'hbox',
     render
    */
    export class Renderable extends Ext.Base {
    /**
    Allows additional behavior after rendering is complete. 
    */
        afterRender():void;
    /**
    Allows additional behavior before rendering. 
    */
        beforeRender():void;
    /**
    Ensures that this component is attached to document.body. 
    */
        ensureAttachedToBody(runLayout?: boolean):void;
    /**
    This function takes the position argument passed to onRender and returns a
DOM element that you can use in the insert
    */
        getInsertPosition(position: string|number|Ext.dom.Element|HTMLElement):HTMLElement;
    /**
    Initialized the renderData to be used when rendering the renderTpl. 
    */
        initRenderData():any;
    /**
    Template method called when this Component's DOM structure is created. 
    */
        onRender(parentNode: Ext.dom.Element, containerIdx: number):void;
    /**
    Renders the Component into the passed HTML element. 
    */
        render(container?: Ext.dom.Element|HTMLElement|string, position?: string|number):void;
    }
    /**
    This is a base class for objects that can be managed by Ext.util.Scheduler.

    */
    export class Schedulable extends Ext.Base {
    /**
     
    */
        constructor();
    /**
    This method returns the Scheduler for this item. 
    */
        getScheduler():Ext.util.Scheduler;
    /**
    Schedules this item with the associated Ext.util.Scheduler. 
    */
        schedule():void;
    /**
    This method should be overridden by items that have dependencies to insert. 
    */
        sort():void;
    /**
    Unschedules this item with the associated Ext.util.Scheduler. 
    */
        unschedule():void;
    }
    interface SchedulerConfig {
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    /**
    If provided the Schedulable items will be pre-sorted by this function or
property value before the dependency sort.

    */
        preSort?: string|Function;
    /**
    The number of milliseconds to delay notification after the first schedule
request. 
    */
        tickDelay?: number;
    }
    /**
    This class is used to bulk schedule a set of Ext.util.Schedulable items. 
    */
    export class Scheduler extends Ext.Base {
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
     
    */
        constructor(config: Ext.util.SchedulerConfig);
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    This method should be called when items become busy or idle. 
    */
        adjustBusy(adjustment: number):void;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Returns the value of preSort. 
    */
        getPreSort():string|Function;
    /**
    Returns the value of tickDelay. 
    */
        getTickDelay():number;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Returns true if this object contains one or more busy items. 
    */
        isBusy():boolean;
    /**
    Returns true if this object contains no busy items. 
    */
        isIdle():boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    This method can be called to force the delivery of any scheduled items. 
    */
        notify():void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Sets the value of preSort. 
    */
        setPreSort(preSort: string|Function):void;
    /**
    Sets the value of tickDelay. 
    */
        setTickDelay(tickDelay: number):void;
    /**
    Adds one item to the sorted items array. 
    */
        sortItem(item: any):Ext.util.Scheduler;
    /**
    Adds multiple items to the sorted items array. 
    */
        sortItems(items: any):Ext.util.Scheduler;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    }
    /**
    

    */
    export class SizeMonitor extends Ext.Base {
    /**
     
    */
        constructor(config: any);
    }
    interface SortableConfig {
    /**
    The default sort direction to use if one is not specified. 
    */
        defaultSortDirection?: string;
    /**
    The maximum number of sorters which may be applied to this Sortable when using the "multi" insertion position
when ad
    */
        multiSortLimit?: number;
    /**
    The property in each item that contains the data to sort.

    */
        sortRoot?: string;
    /**
    The initial set of Sorters. 
    */
        sorters?: Ext.util.Sorter[]|any[];
    }
    /**
    A mixin which allows a data component to be sorted. 
    */
    export class Sortable extends Ext.Base {
    /**
    true in this class to identify an object as an instantiated Sortable, or subclass thereof. 
    */
        isSortable: boolean;
    /**
    Returns a comparator function which compares two items and returns -1, 0, or 1 depending
on the currently defined set
    */
        generateComparator():void;
    /**
    Gets the first sorter from the sorters collection, excluding
any groupers that may be in place 
    */
        getFirstSorter():Ext.util.Sorter;
    /**
    Returns the number of Sorters which apply to this Sortable. 
    */
        getSorterCount():void;
    /**
    Returns the value of sorters. 
    */
        getSorters():Ext.util.Sorter[]|any[];
    /**
    Sets the value of sorters. 
    */
        setSorters(sorters: Ext.util.Sorter[]|any[]):void;
    /**
    Updates the sorters collection and triggers sorting of this Sortable. 
    */
        sort(sorters?: string|Ext.util.Sorter[], direction?: string, insertionPosition?: string):Ext.util.Sorter[];
    /**
    Creates a single comparator function which encapsulates the passed Sorter array. 
    */
        createComparator(sorters: Ext.util.Sorter[]):Function;
    }
    interface SorterConfig {
    /**
    The direction to sort by. 
    */
        direction?: string;
    /**
    An optional id this sorter can be keyed by in Collections. 
    */
        id?: any;
    /**
    The property to sort by. 
    */
        property?: string;
    /**
    Optional root property. 
    */
        root?: string;
    /**
    A specific sorter function to execute. 
    */
        sorterFn?: Function;
    /**
    A function that will be run on each value before
it is compared in the sorter. 
    */
        transform?: Function;
    }
    /**
    Represents a single sorter that can be used as part of the sorters configuration in Ext.mixin.Sortable. 
    */
    export class Sorter extends Ext.Base {
    /**
     
    */
        constructor(config: Ext.util.SorterConfig);
    /**
    Returns the value of direction. 
    */
        getDirection():string;
    /**
    Returns the value of property. 
    */
        getProperty():string;
    /**
    Returns the value of root. 
    */
        getRoot():string;
    /**
    Returns the value of sorterFn. 
    */
        getSorterFn():Function;
    /**
    Returns this filter's state. 
    */
        getState():any;
    /**
    Returns the value of transform. 
    */
        getTransform():Function;
    /**
    Returns this sorter's serialized state. 
    */
        serialize():any;
    /**
    Sets the value of direction. 
    */
        setDirection(direction: string):void;
    /**
    Sets the value of id. 
    */
        setId(id: any):void;
    /**
    Sets the value of property. 
    */
        setProperty(property: string):void;
    /**
    Sets the value of root. 
    */
        setRoot(root: string):void;
    /**
    Sets the value of sorterFn. 
    */
        setSorterFn(sorterFn: Function):void;
    /**
    Sets the value of transform. 
    */
        setTransform(transform: Function):void;
    /**
    Toggles the direction of this Sorter. 
    */
        toggle():void;
    /**
    Creates a comparator function (a function that can be passed to Array.sort)
given one or more Sorter instances. 
    */
        createComparator(sorters: Ext.util.Sorter[]|Ext.util.Collection, nextFn?: any):Function;
    }
    interface SorterCollectionConfig extends Ext.util.CollectionConfig {
    }
    /**
    

    */
    export class SorterCollection extends Ext.util.Collection {
    /**
    This is the cached sorting function which is a generated function that calls all the
configured sorters in the correc
    */
        sortFn: any;
    /**
     
    */
        constructor(config: Ext.util.SorterCollectionConfig);
    }
    /**
    This class is used as a mixin. 
    */
    export class StoreHolder extends Ext.Base {
    /**
    Binds a store to this instance. 
    */
        bindStore(store?: Ext.data.AbstractStore|string):void;
    /**
    Binds listeners for this component to the store. 
    */
        bindStoreListeners(store: Ext.data.AbstractStore):void;
    /**
    Gets the current store instance. 
    */
        getStore():Ext.data.AbstractStore;
    /**
    Gets the listeners to bind to a new store. 
    */
        getStoreListeners(store: Ext.data.Store):any;
    /**
    Template method, it is called when a new store is bound
to the current instance. 
    */
        onBindStore(store: Ext.data.AbstractStore, initial: boolean):void;
    /**
    Template method, it is called when an existing store is unbound
from the current instance. 
    */
        onUnbindStore(store: Ext.data.AbstractStore, initial: boolean):void;
    /**
    Sets the store to the specified store. 
    */
        setStore(store: any):void;
    /**
    Unbinds listeners from this component to the store. 
    */
        unbindStoreListeners(store: Ext.data.AbstractStore):void;
    }
    interface TSVConfig {
    }
    /**
    This class contains utility methods for dealing with TSV (Tab Separated Values) as
specified in RFC 4180. 
    */
    export class TSV {
    /**
    Decodes a string of encoded values into an array of rows. 
    */
        static decode(input: string, delimiter?: string):string[][];
    /**
    Converts a two-dimensional array into an encoded string. 
    */
        static encode(input: any[][], delimiter?: string):string;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface TaskManagerConfig {
    }
    /**
    A static Ext.util.TaskRunner instance that can be used to start and stop
arbitrary tasks. 
    */
    export class TaskManager {
    /**
    Destroys this instance, stopping all tasks that are currently running. 
    */
        static destroy():void;
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Creates a new Task instance. 
    */
        static newTask(config: any):Ext.util.TaskRunner.Task;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Starts a new task. 
    */
        static start(task: any):void;
    /**
    Stops an existing running task. 
    */
        static stop(task: any):any;
    /**
    Stops all tasks that are currently running. 
    */
        static stopAll():void;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    interface TaskRunnerConfig {
    /**
    This may be configured false to inhibit firing of the idle event after task invocation. 
    */
        fireIdleEvent?: boolean;
    /**
    How often to run the task in milliseconds. 
    */
        interval?: number;
    }
    /**
    Provides the ability to execute one or more arbitrary tasks in an asynchronous manner. 
    */
    export class TaskRunner extends Ext.Base {
    /**
     
    */
        constructor(interval?: Ext.util.TaskRunnerConfig);
    /**
    Creates a new Task instance. 
    */
        newTask(config: any):Ext.util.TaskRunner.Task;
    /**
    Starts a new task. 
    */
        start(task: any):void;
    /**
    Stops an existing running task. 
    */
        stop(task: any):any;
    /**
    Stops all tasks that are currently running. 
    */
        stopAll():void;
    }
    /**
    Provides precise pixel measurements for blocks of text so that you can determine
the exact pixel height and width of 
    */
    export class TextMetrics extends Ext.Base {
    /**
    Creates new TextMetrics. 
    */
        constructor(bindTo: string|HTMLElement|Ext.dom.Element, fixedWidth?: number);
    /**
    Binds this TextMetrics instance to a new element 
    */
        bind(el: string|HTMLElement|Ext.dom.Element):void;
    /**
    Returns the measured height of the specified text 
    */
        getHeight(text: string):number;
    /**
    Returns the size of the specified text based on the internal element's style and width properties 
    */
        getSize(text: string):any;
    /**
    Returns the measured width of the specified text 
    */
        getWidth(text: string):number;
    /**
    Sets a fixed width on the internal measurement element. 
    */
        setFixedWidth(width: number):void;
    /**
    Measures the size of the specified text 
    */
        measure(el: string|HTMLElement, text: string, fixedWidth?: number):any;
    }
    /**
    The utility class to abstract different implementations to have the best performance when applying 2D translation
on 
    */
    export class Translatable extends Ext.Base {
    /**
     
    */
        constructor(config: any);
    }
    /**
    This class compiles the XTemplate syntax into a function object. 
    */
    export class XTemplateCompiler extends Ext.util.XTemplateParser {
    /**
     
    */
        constructor(config: any);
    }
    /**
    This class parses the XTemplate syntax and calls abstract methods to process the parts.

    */
    export class XTemplateParser extends Ext.Base {
    /**
    The 'for' or 'foreach' loop context level. 
    */
        level: number;
    /**
     
    */
        constructor(config: any);
    /**
    This method is called to process &lt;tpl case="action"&gt;. 
    */
        doCase(action: string, actions: any):void;
    /**
    This method is called to process &lt;tpl default&gt;. 
    */
        doDefault():void;
    /**
    This method is called to process &lt;tpl else&gt;. 
    */
        doElse():void;
    /**
    This method is called to process &lt;tpl elseif="action"&gt;. 
    */
        doElseIf(action: string, actions: any):void;
    /**
    This method is called to process &lt;/tpl&gt;. 
    */
        doEnd(type: string, actions: any):void;
    /**
    This method is called to process {% text %}. 
    */
        doEval(text: string):void;
    /**
    This method is called to process &lt;tpl exec="action"&gt;. 
    */
        doExec(action: string, actions: any):void;
    /**
    This method is called to process expressions (like {[expr]}). 
    */
        doExpr(expr: string):void;
    /**
    This method is called to process &lt;tpl for="action"&gt;. 
    */
        doFor(action: string, actions: any):void;
    /**
    This method is called to process &lt;tpl foreach="action"&gt;. 
    */
        doForEach(action: string, actions: any):void;
    /**
    This method is called to process &lt;tpl if="action"&gt;. 
    */
        doIf(action: string, actions: any):void;
    /**
    This method is called to process &lt;tpl switch="action"&gt;. 
    */
        doSwitch(action: string, actions: any):void;
    /**
    This method is called to process simple tags (like {tag}). 
    */
        doTag():void;
    /**
    This method is called to process a piece of raw text from the tpl. 
    */
        doText(text: string):void;
    /**
    This method is called to process an empty &lt;tpl&gt;. 
    */
        doTpl():void;
    }
}
declare module Ext.util.TaskRunner {
    /**
    Instances of this class are created by Ext.util.TaskRunner.newTask method. 
    */
    export class Task {
    /**
    Destroys this instance, stopping this task's execution. 
    */
        destroy():void;
    /**
    Restarts this task, clearing it duration, expiration and run count. 
    */
        restart(interval?: number):void;
    /**
    Starts this task if it is not already started. 
    */
        start(interval?: number):void;
    /**
    Stops this task. 
    */
        stop():void;
    }
}
declare module Ext.util.paintmonitor {
    interface AbstractConfig {
    }
    /**
    

    */
    export class Abstract extends Ext.Base {
    /**
     
    */
        constructor(config: Ext.util.paintmonitor.AbstractConfig);
    /**
    Returns the value of args. 
    */
        getArgs():any[];
    /**
    Returns the value of callback. 
    */
        getCallback():any;
    /**
    Returns the value of element. 
    */
        getElement():any;
    /**
    Returns the value of scope. 
    */
        getScope():any;
    /**
    Sets the value of args. 
    */
        setArgs(args: any[]):void;
    /**
    Sets the value of callback. 
    */
        setCallback(callback: any):void;
    /**
    Sets the value of element. 
    */
        setElement(element: any):void;
    /**
    Sets the value of scope. 
    */
        setScope(scope: any):void;
    }
    interface CssAnimationConfig extends Ext.util.paintmonitor.AbstractConfig {
    }
    /**
    

    */
    export class CssAnimation extends Ext.util.paintmonitor.Abstract {
    /**
     
    */
        constructor(config: Ext.util.paintmonitor.CssAnimationConfig);
    }
    interface OverflowChangeConfig extends Ext.util.paintmonitor.AbstractConfig {
    }
    /**
    

    */
    export class OverflowChange extends Ext.util.paintmonitor.Abstract {
    /**
     
    */
        constructor(config: Ext.util.paintmonitor.OverflowChangeConfig);
    }
}
declare module Ext.util.sizemonitor {
    interface AbstractConfig {
    }
    /**
    

    */
    export class Abstract extends Ext.Base {
    /**
     
    */
        constructor(config: Ext.util.sizemonitor.AbstractConfig);
    /**
    Returns the value of args. 
    */
        getArgs():any[];
    /**
    Returns the value of callback. 
    */
        getCallback():any;
    /**
    Returns the value of element. 
    */
        getElement():any;
    /**
    Returns the value of scope. 
    */
        getScope():any;
    /**
    Sets the value of args. 
    */
        setArgs(args: any[]):void;
    /**
    Sets the value of callback. 
    */
        setCallback(callback: any):void;
    /**
    Sets the value of element. 
    */
        setElement(element: any):void;
    /**
    Sets the value of scope. 
    */
        setScope(scope: any):void;
    }
    interface DefaultConfig extends Ext.util.sizemonitor.AbstractConfig {
    }
    /**
    

    */
    export class Default extends Ext.util.sizemonitor.Abstract {
    /**
     
    */
        constructor(config: Ext.util.sizemonitor.DefaultConfig);
    }
    interface OverflowChangeConfig extends Ext.util.sizemonitor.AbstractConfig {
    }
    /**
    

    */
    export class OverflowChange extends Ext.util.sizemonitor.Abstract {
    /**
     
    */
        constructor(config: Ext.util.sizemonitor.OverflowChangeConfig);
    }
    interface ScrollConfig extends Ext.util.sizemonitor.AbstractConfig {
    }
    /**
    

    */
    export class Scroll extends Ext.util.sizemonitor.Abstract {
    /**
     
    */
        constructor(config: Ext.util.sizemonitor.ScrollConfig);
    }
}
declare module Ext.util.translatable {
    interface AbstractConfig extends Ext.EventedConfig {
    }
    /**
    The abstract class. 
    */
    export class Abstract extends Ext.Evented {
    /**
     
    */
        constructor(config: Ext.util.translatable.AbstractConfig);
    /**
    Returns the value of easing. 
    */
        getEasing():any;
    /**
    Returns the value of easingX. 
    */
        getEasingX():any;
    /**
    Returns the value of easingY. 
    */
        getEasingY():any;
    /**
    Returns the translatable object's current position. 
    */
        getPosition():any;
    /**
    Returns the value of useWrapper. 
    */
        getUseWrapper():any;
    /**
    Sets the value of easing. 
    */
        setEasing(easing: any):void;
    /**
    Sets the value of easingX. 
    */
        setEasingX(easingX: any):void;
    /**
    Sets the value of easingY. 
    */
        setEasingY(easingY: any):void;
    /**
    Sets the value of useWrapper. 
    */
        setUseWrapper(useWrapper: any):void;
    }
    interface CssPositionConfig extends Ext.util.translatable.DomConfig {
    }
    /**
    

    */
    export class CssPosition extends Ext.util.translatable.Dom {
    /**
     
    */
        constructor(config: Ext.util.translatable.CssPositionConfig);
    }
    interface CssTransformConfig extends Ext.util.translatable.DomConfig {
    }
    /**
    CSS Transform implementation

    */
    export class CssTransform extends Ext.util.translatable.Dom {
    /**
     
    */
        constructor(config: Ext.util.translatable.CssTransformConfig);
    }
    interface DomConfig extends Ext.util.translatable.AbstractConfig {
    }
    /**
    

    */
    export class Dom extends Ext.util.translatable.Abstract {
    /**
     
    */
        constructor(config: Ext.util.translatable.DomConfig);
    /**
    Returns the value of element. 
    */
        getElement():any;
    /**
    Sets the value of element. 
    */
        setElement(element: any):void;
    }
    interface ScrollParentConfig extends Ext.util.translatable.DomConfig {
    }
    /**
    Translates the element by setting the scroll position of its parent node.

    */
    export class ScrollParent extends Ext.util.translatable.Dom {
    /**
     
    */
        constructor(config: Ext.util.translatable.ScrollParentConfig);
    }
    interface ScrollPositionConfig extends Ext.util.translatable.DomConfig {
    }
    /**
    Scroll position implementation

    */
    export class ScrollPosition extends Ext.util.translatable.Dom {
    /**
     
    */
        constructor(config: Ext.util.translatable.ScrollPositionConfig);
    }
}
declare module Ext.ux.ajax {
    /**
    This base class is used to handle data preparation (e.g., sorting, filtering and
group summary).

    */
    export class DataSimlet extends Ext.Base {
    }
    /**
    JSON Simlet.

    */
    export class JsonSimlet extends Ext.ux.ajax.DataSimlet {
    }
    interface SimManagerConfig {
    /**
    The Ext.ux.ajax.Simlet instance to use for non-matching URL's. 
    */
    /**
    The default stype to apply to generic Ext.ux.ajax.Simlet configuration objects. 
    */
    /**
    The number of milliseconds to delay before delivering a response to an async request. 
    */
    }
    /**
    This singleton manages simulated Ajax responses. 
    */
    export class SimManager {
    /**
    Returns a specified config property value. 
    */
        static getConfig(name?: string, peek?: boolean):any;
    /**
    Returns the initial configuration passed to the constructor when
instantiating this class. 
    */
        static getInitialConfig(name?: string):any;
    /**
    Initializes this singleton and applies configuration options. 
    */
        static init(config: any):Ext.ux.ajax.SimManager;
    /**
    Registers one or more Ext.ux.ajax.Simlet instances. 
    */
        static register(simlet: any):void;
    /**
    Sets a single/multiple configuration options. 
    */
        static setConfig(name: any, value?: any):Ext.Base;
    /**
    Add methods / properties to the prototype of this class. 
    */
        static addMembers(members: any, isStatic?: boolean, privacy?: boolean):void;
    /**
    Add / override static properties of this class. 
    */
        static addStatics(members: any):Ext.Base;
    /**
    Create a new instance of this Class. 
    */
        static create():any;
    /**
    Create aliases for existing prototype methods. 
    */
        static createAlias(alias: any, origin: any):void;
    /**
    Get the current class' name in string format. 
    */
        static getName():string;
    /**
    Override members of this class. 
    */
        static override(members: any):Ext.Base;
    }
    /**
    Simulates an XMLHttpRequest object's methods and properties but is backed by a
Ext.ux.ajax.Simlet instance that provi
    */
    export class SimXhr extends Ext.Base {
    /**
     
    */
        constructor(config: any);
    }
    interface SimletConfig {
    /**
    

    */
        responseHeaders?: any;
    /**
    

    */
        responseText?: number;
    /**
    

    */
        responseXML?: number;
    /**
     
    */
        status?: number;
    /**
     
    */
        statusText?: string;
    }
    /**
    This is a base class for more advanced "simlets" (simulated servers). 
    */
    export class Simlet extends Ext.Base {
    /**
    Performs the action requested by the given XHR and returns an object to be applied
on to the XHR (containing status, 
    */
        exec(xhr: Ext.ux.ajax.SimXhr):any;
    }
    /**
    This class simulates XML-based requests.

    */
    export class XmlSimlet extends Ext.ux.ajax.DataSimlet {
    /**
    This template is used to populate the XML response. 
    */
        xmlTpl: any[];
    }
}
declare module Ext.view {
    interface AbstractViewConfig extends Ext.ComponentConfig {
    /**
    Set this to true to ignore refresh events on the bound store. 
    */
        blockRefresh?: boolean;
    /**
    True to defer emptyText being applied until the store's first load. 
    */
        deferEmptyText?: boolean;
    /**
    Configure as 'true` to defer the initial refresh of the view. 
    */
        deferInitialRefresh?: boolean;
    /**
    True to disable selection within the DataView. 
    */
        disableSelection?: boolean;
    /**
    The text to display in the view when there is no data to display. 
    */
        emptyText?: string;
    /**
    Specifies the class to be assigned to each element in the view when used in conjunction with the
itemTpl configuration. 
    */
        itemCls?: string;
    /**
    This is a required setting. 
    */
        itemSelector?: string;
    /**
    The inner portion of the item template to be rendered. 
    */
        itemTpl?: string|string[]|Ext.XTemplate;
    /**
    False to disable a load mask from displaying while the view is loading. 
    */
        loadMask?: any;
    /**
    The CSS class to apply to the loading message element. 
    */
        loadingCls?: string;
    /**
    If specified, gives an explicit height for the data view when it is showing the loadingText,
if that is specified. 
    */
        loadingHeight?: number;
    /**
    A string to display during data load operations. 
    */
        loadingText?: string;
    /**
    True to allow selection of more than one item at a time, false to allow selection of only a single item
at a time or 
    */
        multiSelect?: boolean;
    /**
    A CSS class to apply to each item in the view on mouseover. 
    */
        overItemCls?: string;
    /**
    True to preserve scroll position across refresh operations. 
    */
        preserveScrollOnRefresh?: boolean;
    /**
    True to preserve scroll position when the store is reloaded. 
    */
        preserveScrollOnReload?: boolean;
    /**
    A CSS class to apply to each selected item in the view. 
    */
        selectedItemCls?: string;
    /**
    The selected model. 
    */
        selection?: Ext.data.Model;
    /**
    The selection model [dataviewmodel] config or alias to use. 
    */
        selectionModel?: any;
    /**
    True to enable multiselection by clicking on multiple items without requiring the user to hold Shift or Ctrl,
false t
    */
        simpleSelect?: boolean;
    /**
    Allows selection of exactly one item at a time. 
    */
        singleSelect?: boolean;
    /**
    The Ext.data.Store to bind this DataView to. 
    */
        store?: Ext.data.Store;
    /**
    Configure as true to have this view participate in the global throttled update queue which flushes store changes to t
    */
        throttledUpdate?: boolean;
    /**
    When true the overItemCls will be applied to items when hovered over. 
    */
        trackOver?: boolean;
    /**
    Global config for use when using throttled view updating if the data in the backing store
is being changed rapidly, f
    */
        updateDelay?: number;
    }
    /**
    This is an abstract superclass and should not be used directly. 
    */
    export class AbstractView extends Ext.Component {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.view.AbstractViewConfig);
    /**
    Adds a CSS Class to a specific item. 
    */
        addItemCls(itemInfo: HTMLElement|string|number|Ext.data.Model, cls: string):void;
    /**
    Changes the data store bound to this view and refreshes it. 
    */
        bindStore(store: Ext.data.Store):void;
    /**
    Binds listeners for this component to the store. 
    */
        bindStoreListeners(store: Ext.data.AbstractStore):void;
    /**
    Deselects all selected records. 
    */
        clearSelections():void;
    /**
    Function which can be overridden which returns the data object passed to this
DataView's template to render the whole
    */
        collectData(records: Ext.data.Model[], startIndex: number):any[];
    /**
    Deselects a record instance by record instance or index. 
    */
        deselect(records: Ext.data.Model[]|number, suppressEvent: boolean):void;
    /**
    Returns the template node the passed child belongs to, or null if it doesn't belong to one. 
    */
        findItemByChild(node: HTMLElement):HTMLElement;
    /**
    Returns the template node by the Ext.event.Event or null if it is not found. 
    */
        findTargetByEvent(e: Ext.event.Event):void;
    /**
    Gets a template node. 
    */
        getNode(nodeInfo: HTMLElement|string|number|Ext.data.Model):HTMLElement;
    /**
    Returns a CSS selector which selects the element which contains record nodes. 
    */
        getNodeContainerSelector():void;
    /**
    Gets a range nodes. 
    */
        getNodes(start?: number, end?: number):HTMLElement[];
    /**
    Gets a record from a node 
    */
        getRecord(node: Ext.dom.Element|HTMLElement):Ext.data.Model;
    /**
    Gets an array of the records from an array of nodes 
    */
        getRecords(nodes: HTMLElement[]):Ext.data.Model[];
    /**
    Gets the currently selected nodes. 
    */
        getSelectedNodes():HTMLElement[];
    /**
    Gets an array of the selected records 
    */
        getSelectedRecords():Ext.data.Model[];
    /**
    Gets the number of selected nodes. 
    */
        getSelectionCount():number;
    /**
    Returns the value of selectionModel. 
    */
        getSelectionModel():any;
    /**
    Returns the value of store. 
    */
        getStore():Ext.data.Store;
    /**
    Gets the listeners to bind to a new store. 
    */
        getStoreListeners():any;
    /**
    Finds the index of the passed node. 
    */
        indexOf(nodeInfo: HTMLElement|string|number|Ext.data.Model):number;
    /**
    Returns true if the passed node is selected, else false. 
    */
        isSelected(node: HTMLElement|number|Ext.data.Model):boolean;
    /**
    Template method, it is called when a new store is bound
to the current instance. 
    */
        onBindStore(store: any, oldStore: any):void;
    /**
    Template method, it is called when an existing store is unbound
from the current instance. 
    */
        onUnbindStore(store: any):void;
    /**
    Function which can be overridden to provide custom formatting for each Record that is used by this
DataView's templat
    */
        prepareData(data: any, recordIndex: number, record: Ext.data.Model):any;
    /**
    Refreshes the view by reloading the data from the store and re-rendering the template. 
    */
        refresh():void;
    /**
    Refreshes an individual node's data from the store. 
    */
        refreshNode(record: Ext.data.Model|number):void;
    /**
    Removes a CSS Class from a specific item. 
    */
        removeItemCls(itemInfo: HTMLElement|string|number|Ext.data.Model, cls: string):void;
    /**
    Selects a record instance by record instance or index. 
    */
        select(records: Ext.data.Model[]|number, keepExisting: boolean, suppressEvent: boolean):void;
    /**
    Sets the value of selection. 
    */
        setSelection(selection: Ext.data.Model):void;
    /**
    Sets the value of selectionModel. 
    */
        setSelectionModel(selectionModel: any):void;
    /**
    Sets the store to the specified store. 
    */
        setStore(newStore: any):void;
    /**
    Unbinds listeners from this component to the store. 
    */
        unbindStoreListeners(store: Ext.data.AbstractStore):void;
    }
    interface BoundListConfig extends Ext.view.ViewConfig {
    /**
    The field from the store to show in the view. 
    */
        displayField?: string;
    /**
    If greater than 0, a Ext.toolbar.Paging is displayed at the bottom of the list and store
queries will execute with pa
    */
        pageSize?: number;
    }
    /**
    An internally used DataView for ComboBox.

    */
    export class BoundList extends Ext.view.View {
    /**
    A reference to the PagingToolbar instance in this view. 
    */
        pagingToolbar: Ext.toolbar.Paging;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.view.BoundListConfig);
    /**
    Retrieves the first direct child of this container which matches the passed selector or component. 
    */
        child(selector?: string|Ext.Component):any;
    /**
    Retrieves the first descendant of this container which matches the passed selector. 
    */
        down(selector?: string|Ext.Component):any;
    /**
    A method that returns the inner template for displaying items in the list. 
    */
        getInnerTpl(displayField: string):string;
    /**
    Retrieves all descendant components which match the passed selector. 
    */
        query(selector?: string):Ext.Component[];
    /**
    Retrieves all descendant components which match the passed function. 
    */
        queryBy(fn: Function, scope?: any):Ext.Component[];
    /**
    Finds a component at any level under this container matching the id/itemId. 
    */
        queryById(id: string):Ext.Component;
    /**
    Traverses the tree rooted at this node in post-order mode, calling the passed function on the nodes at each level. 
    */
        visitPostOrder(selector: any, fn: (node: any) => any, scope?: any, extraArgs?: any[]):void;
    /**
    Traverses the tree rooted at this node in pre-order mode, calling the passed function on the nodes at each level. 
    */
        visitPreOrder(selector: any, fn: (node: any) => any, scope?: any, extraArgs?: any[]):void;
    }
    interface BoundListKeyNavConfig extends Ext.view.NavigationModelConfig {
    /**
    The Ext.view.BoundList instance for which key navigation will be managed.

    */
        boundList?: Ext.view.BoundList;
    }
    /**
    A specialized Ext.util.KeyNav implementation for navigating a Ext.view.BoundList using
the keyboard. 
    */
    export class BoundListKeyNav extends Ext.view.NavigationModel {
    /**
     
    */
        constructor();
    /**
    Triggers selection of the currently highlighted item according to the behavior of
the configured SelectionModel. 
    */
        selectHighlighted(e: any):void;
    }
    interface DragZoneConfig extends Ext.dd.DragZoneConfig {
    }
    /**
    

    */
    export class DragZone extends Ext.dd.DragZone {
    /**
    Creates new DragZone. 
    */
        constructor(config: Ext.view.DragZoneConfig);
    /**
    Template method called upon mousedown. 
    */
        isPreventDrag(e: Ext.event.Event, record: Ext.data.Model, item: HTMLElement, index: number):void;
    }
    interface DropZoneConfig extends Ext.dd.DropZoneConfig {
    }
    /**
    

    */
    export class DropZone extends Ext.dd.DropZone {
    /**
    Creates new DropTarget. 
    */
        constructor(config: Ext.view.DropZoneConfig);
    }
    interface MultiSelectorConfig extends Ext.grid.PanelConfig {
    /**
    The tooltip to display when the user hovers over the "+" tool in the panel header. 
    */
        addToolText?: string;
    /**
    The name of the data field to display in the primary column of the grid. 
    */
        fieldName?: string;
    /**
    The text to display in the column header for the primary column of the grid.

    */
        fieldTitle?: string;
    /**
    The text to display in the "remove this row" column. 
    */
        removeRowText?: string;
    /**
    The tooltip to display when the user hovers over the remove cell. 
    */
        removeRowTip?: string;
    /**
    This object configures the search popup component. 
    */
        search?: any;
    }
    /**
    This component provides a grid holding selected items from a second store of potential
members. 
    */
    export class MultiSelector extends Ext.grid.Panel {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.view.MultiSelectorConfig);
    /**
    Returns the value of search. 
    */
        getSearch():any;
    /**
    Sets the value of search. 
    */
        setSearch(search: any):void;
    }
    interface MultiSelectorSearchConfig extends Ext.panel.PanelConfig {
    /**
    A field from your grid's store that will be used for filtering your search results.

    */
        field?: string;
    /**
    This text is displayed as the "emptyText" of the search textfield. 
    */
        searchText?: string;
    /**
    The data source to which the grid / tree is bound. 
    */
        store?: any;
    }
    /**
    This component provides a grid holding selected items from a second store of potential
members. 
    */
    export class MultiSelectorSearch extends Ext.panel.Panel {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.view.MultiSelectorSearchConfig);
    /**
    Returns the store that holds search results. 
    */
        getSearchStore():Ext.data.Store;
    }
    interface NavigationModelConfig {
    /**
    A config object containing one or more event handlers to be added to this object during initialization. 
    */
        listeners?: any;
    }
    /**
    This class listens for key events fired from a DataView, and moves the currently focused item
by adding the class foc
    */
    export class NavigationModel extends Ext.Base {
    /**
    If this property is specified by the target class of this mixin its properties are
used to configure the created Ext.
    */
        factoryConfig: any;
    /**
    This object holds a key for any event that has a listener. 
    */
        hasListeners: any;
    /**
    true in this class to identify an object as an instantiated Observable, or subclass thereof. 
    */
        isObservable: boolean;
    /**
     
    */
        constructor();
    /**
    Appends an after-event handler. 
    */
        addAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Appends a before-event handler. 
    */
        addBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        addListener(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    The addManagedListener method is used when some object (call it "A") is listening
to an event on another observable o
    */
        addManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Called by Ext.view.AbstractView.refresh before refresh to allow
the current focus position to be cached. 
    */
        beforeViewRefresh():void;
    /**
    Removes all listeners for this object including the managed listeners 
    */
        clearListeners():void;
    /**
    Removes all managed listeners for this object. 
    */
        clearManagedListeners():void;
    /**
    Enables events fired by this Observable to bubble up an owner hierarchy by calling this.getBubbleTarget() if
present. 
    */
        enableBubble(eventNames: string|string[]):void;
    /**
    Fires the specified event with the passed parameters and executes a function (action). 
    */
        fireAction(eventName: string, args: any[], fn: Function, scope?: any, options?: any, order?: string):void;
    /**
    Fires the specified event with the passed parameters (minus the event name, plus the options object passed
to addList
    */
        fireEvent(eventName: string, ...args: any[]):boolean;
    /**
    Fires the specified event with the passed parameter list. 
    */
        fireEventArgs(eventName: string, args: any[]):boolean;
    /**
    Called to focus an item in the client DataView. 
    */
        focusItem(item: Ext.dom.Element):void;
    /**
    Checks to see if this object has any listeners for a specified event, or whether the event bubbles. 
    */
        hasListener(eventName: string):boolean;
    /**
    Checks if all events, or a specific event, is suspended. 
    */
        isSuspended(event?: string):boolean;
    /**
    Shorthand for addManagedListener. 
    */
        mon(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function|string, scope?: any, options?: any):any;
    /**
    Shorthand for removeManagedListener. 
    */
        mun(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    The on method is shorthand for
addListener. 
    */
        on(eventName: any, fn?: Function|string, scope?: any, options?: any, order?: string):any;
    /**
    Alias for addAfterListener. 
    */
        onAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for addBeforeListener. 
    */
        onBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Called by Ext.view.AbstractView.refresh after refresh to allow
cached focus position to be restored. 
    */
        onViewRefresh():void;
    /**
    Relays selected events from the specified Observable as if the events were fired by this. 
    */
        relayEvents(origin: any, events: string[], prefix?: string):any;
    /**
    Removes a before-event handler. 
    */
        removeAfterListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes a before-event handler. 
    */
        removeBeforeListener(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Removes an event handler. 
    */
        removeListener(eventName: string, fn: Function, scope?: any):void;
    /**
    Removes listeners that were added by the mon method. 
    */
        removeManagedListener(item: Ext.util.Observable|Ext.dom.Element, ename: any, fn?: Function, scope?: any):void;
    /**
    Gets the default scope for firing late bound events (string names with
no scope attached) at runtime. 
    */
        resolveListenerScope(defaultScope?: any):any;
    /**
    Resumes firing of the named event(s). 
    */
        resumeEvent(...eventName: string[]):void;
    /**
    Resumes firing events (see suspendEvents). 
    */
        resumeEvents(discardQueue?: boolean):void;
    /**
    An alias for addListener. 
    */
        setListeners(listeners: any):void;
    /**
    Suspends firing of the named event(s). 
    */
        suspendEvent(...eventName: string[]):void;
    /**
    Suspends the firing of all events. 
    */
        suspendEvents(queueSuspended: boolean):void;
    /**
    Shorthand for removeListener. 
    */
        un(eventName: string, fn: Function, scope?: any):void;
    /**
    Alias for removeAfterListener. 
    */
        unAfter(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    /**
    Alias for removeBeforeListener. 
    */
        unBefore(eventName: any, fn: Function|string, scope?: any, options?: any):void;
    }
    /**
    A cache of View elements keyed using the index of the associated record in the store. 
    */
    export class NodeCache extends Ext.Base {
    /**
     
    */
        constructor(view: any);
    /**
    Removes all elements from this NodeCache. 
    */
        clear(removeDom?: boolean):void;
    /**
    Clears this NodeCache and adds the elements passed. 
    */
        fill(els: HTMLElement[]):Ext.view.NodeCache;
    /**
    Find the index of the passed element within the composite collection. 
    */
        indexOf(el: string|HTMLElement|Ext.dom.Element|number):number;
    /**
    Removes the specified element(s). 
    */
        removeElement(el: string|HTMLElement|Ext.dom.Element|number, removeDom?: boolean):void;
    /**
    Replaces the specified element with the passed element. 
    */
        replaceElement(el: string|HTMLElement|Ext.dom.Element|number, replacement: string|Ext.dom.Element, domReplace?: boolean):Ext.view.NodeCache;
    /**
    Appends/prepends records depending on direction flag 
    */
        scroll(newRecords: Ext.data.Model[], direction: number, removeCount: number):HTMLElement[];
    }
    interface TableConfig extends Ext.view.ViewConfig {
    /**
    True to enable text selections.

    */
        enableTextSelection?: boolean;
    /**
    A CSS class to add to the first cell in every row to enable special styling for the first column. 
    */
        firstCls?: string;
    /**
    A CSS class to add to the last cell in every row to enable special styling for the last column. 
    */
        lastCls?: string;
    /**
    True to show the dirty cell indicator when a cell has been modified. 
    */
        markDirty?: boolean;
    /**
    True to stripe the rows. 
    */
        stripeRows?: boolean;
    }
    /**
    This class encapsulates the user interface for a tabular data set. 
    */
    export class Table extends Ext.view.View {
    /**
    true in this class to identify an object as an instantiated Ext.view.TableView, or subclass thereof. 
    */
        isTableView: boolean;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.view.TableConfig);
    /**
    Adds a CSS Class to a specific row. 
    */
        addRowCls(rowInfo: HTMLElement|string|number|Ext.data.Model, cls: string):void;
    /**
    Sizes the passed header to fit the max content width. 
    */
        autoSizeColumn(header: Ext.grid.column.Column|number):void;
    /**
    Expands a particular header to fit the max content width. 
    */
        expandToFit(header: any):void;
    /**
    Focuses a particular cell and brings it into view. 
    */
        focusCell(pos: Ext.grid.CellContext, delay?: boolean|number):void;
    /**
    Focuses a particular row and brings it into view. 
    */
        focusRow(row: HTMLElement|string|number|Ext.data.Model, delay?: boolean|number):void;
    /**
    Returns a CSS selector which selects the outermost element(s) in this view. 
    */
        getBodySelector():void;
    /**
    Returns a CSS selector which selects a particular column if the desired header is passed,
or a general cell selector 
    */
        getCellSelector(header?: Ext.grid.column.Column):void;
    /**
    Returns a CSS selector which selects the element(s) which define the width of a column. 
    */
        getColumnSizerSelector(header: any):void;
    /**
    Get a reference to a feature 
    */
        getFeature(id: string):Ext.grid.feature.Feature;
    /**
    Returns a CSS selector which selects items of the view rendered by the outerRowTpl 
    */
        getItemSelector():void;
    /**
    Returns the table row given the passed Record, or index or node. 
    */
        getRow(nodeInfo: HTMLElement|string|number|Ext.data.Model):HTMLElement;
    /**
    Override this function to apply custom CSS classes to rows during rendering. 
    */
        getRowClass(record: Ext.data.Model, index: number, rowParams: any, store: Ext.data.Store):string;
    /**
    Removes a CSS Class from a specific row. 
    */
        removeRowCls(rowInfo: HTMLElement|string|number|Ext.data.Model, cls: string):void;
    /**
    Navigates from the passed record by the passed increment which may be +ve or -ve

Skips hidden records. 
    */
        walkRecs(startRec: Ext.data.Model, distance: number):void;
    /**
    Increments the passed row index by the passed increment which may be +ve or -ve

Skips hidden rows. 
    */
        walkRows(startRow: number, distance: number):void;
    }
    interface TableLayoutConfig extends Ext.layout.component.AutoConfig {
    }
    /**
    Component layout for Ext.view.Table

    */
    export class TableLayout extends Ext.layout.component.Auto {
    /**
     
    */
        constructor(config: Ext.view.TableLayoutConfig);
    }
    interface ViewConfig extends Ext.view.AbstractViewConfig {
    }
    /**
    A mechanism for displaying data using custom layout templates and formatting. 
    */
    export class View extends Ext.view.AbstractView {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.view.ViewConfig);
    /**
    Un-highlights the currently highlighted item, if any. 
    */
        clearHighlight():void;
    /**
    Focuses a node in the view. 
    */
        focusNode(rec: Ext.data.Model):void;
    /**
    Highlights a given item in the View. 
    */
        highlightItem(item: HTMLElement):void;
    }
}
declare module Ext.window {
    interface MessageBoxConfig extends Ext.window.WindowConfig {
    }
    /**
    Utility class for generating different styles of message boxes. 
    */
    export class MessageBox extends Ext.window.Window {
    /**
    Button config that displays a single Cancel button 
    */
        CANCEL: number;
    /**
    The CSS class that provides the ERROR icon image 
    */
        ERROR: string;
    /**
    The CSS class that provides the INFO icon image 
    */
        INFO: string;
    /**
    Button config that displays a single No button 
    */
        NO: number;
    /**
    Button config that displays a single OK button 
    */
        OK: number;
    /**
    Button config that displays OK and Cancel buttons 
    */
        OKCANCEL: number;
    /**
    The CSS class that provides the QUESTION icon image 
    */
        QUESTION: string;
    /**
    The CSS class that provides the WARNING icon image 
    */
        WARNING: string;
    /**
    Button config that displays a single Yes button 
    */
        YES: number;
    /**
    Button config that displays Yes and No buttons 
    */
        YESNO: number;
    /**
    Button config that displays Yes, No and Cancel buttons 
    */
        YESNOCANCEL: number;
    /**
    An object containing the default button text strings that can be overriden for localized language support. 
    */
        buttonText: any;
    /**
    The default height in pixels of the message box's multiline textarea if displayed. 
    */
        defaultTextHeight: number;
    /**
    The minimum width in pixels of the message box if it is a progress-style dialog. 
    */
        minProgressWidth: number;
    /**
    The minimum width in pixels of the message box if it is a prompt dialog. 
    */
        minPromptWidth: number;
    /**
     
    */
        constructor(cfg: Ext.window.MessageBoxConfig);
    /**
    Displays a standard read-only message box with an OK button (comparable to the basic JavaScript alert prompt). 
    */
        alert(title: string, message: string, fn?: Function, scope?: any):Ext.window.MessageBox;
    /**
    Displays a confirmation message box with Yes and No buttons (comparable to JavaScript's confirm). 
    */
        confirm(title: string, message: string, fn?: Function, scope?: any):Ext.window.MessageBox;
    /**
    Displays a message box with a progress bar. 
    */
        progress(title: string, message: string, progressText?: string):Ext.window.MessageBox;
    /**
    Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to JavaScript's p
    */
        prompt(title: string, message: string, fn?: Function, scope?: any, multiline?: boolean|number, value?: string):Ext.window.MessageBox;
    /**
    Adds the specified icon to the dialog. 
    */
        setIcon(icon: string, width?: number, height?: number):Ext.window.MessageBox;
    /**
    Updates a progress-style message box's text and progress bar. 
    */
        updateProgress(value?: number, progressText?: string, message?: string):Ext.window.MessageBox;
    /**
    Displays a message box with an infinitely auto-updating progress bar. 
    */
        wait(message: string, title?: string, config?: any):Ext.window.MessageBox;
    }
    interface ToastConfig extends Ext.window.WindowConfig {
    /**
    Specifies the basic alignment of the toast message with its anchor. 
    */
        align?: any;
    /**
    This string is a full specification of how to position the toast with respect to
its anchor. 
    */
        anchorAlign?: string;
    /**
    Directs the toast message to animate on the x-axis (if true) or y-axis (if false). 
    */
        useXAxis?: boolean;
    }
    /**
    This class provides for lightweight, auto-dismissing pop-up notifications called "toasts". 
    */
    export class Toast extends Ext.window.Window {
    /**
    Creates new Component. 
    */
        constructor(config: Ext.window.ToastConfig);
    }
    interface WindowConfig extends Ext.panel.PanelConfig {
    /**
    Id or element from which the window should animate while opening. 
    */
        animateTarget?: string|Ext.dom.Element;
    /**
    True to always expand the window when it is displayed, false to keep it in its current state (which may be
collapsed)
    */
        expandOnShow?: boolean;
    /**
    Set to false to disable the ghost panel during dragging the window. 
    */
        ghost?: boolean|Function;
    /**
    True to hide this Window's shadow when another floating item in the same z-index stack is activated. 
    */
        hideShadowOnDeactivate?: boolean;
    /**
    True to display the 'maximize' tool button and allow the user to maximize the window, false to hide the button
and di
    */
        maximizable?: boolean;
    /**
    True to initially display the window in a maximized state. 
    */
        maximized?: boolean;
    /**
    True to display the 'minimize' tool button and allow the user to minimize the window, false to hide the button
and di
    */
        minimizable?: boolean;
    /**
    true to listen to the viewport resize event and perform any layout updating if necessary. 
    */
        monitorResize?: boolean;
    /**
    Allows override of the built-in processing for the escape key. 
    */
        onEsc?: Function;
    /**
    True to render the window body with a transparent background so that it will blend into the framing elements,
false t
    */
        plain?: boolean;
    /**
    The X position of the left edge of the window on initial showing. 
    */
        x?: number;
    /**
    The Y position of the top edge of the window on initial showing. 
    */
        y?: number;
    }
    /**
    A specialized panel intended for use as an application window. 
    */
    export class Window extends Ext.panel.Panel {
    /**
    true in this class to identify an object as an instantiated Window, or subclass thereof. 
    */
        isWindow: boolean;
    /**
    Creates new Component. 
    */
        constructor(config: Ext.window.WindowConfig);
    /**
    Fits the window within its current container and automatically replaces the &#39;maximize&#39; tool
button with the '
    */
        maximize(animate?: boolean):Ext.window.Window;
    /**
    Placeholder method for minimizing the window. 
    */
        minimize():Ext.window.Window;
    /**
    Restores a maximized window back to its original size and position prior to being maximized
and also replaces the 're
    */
        restore(animate?: boolean):Ext.window.Window;
    /**
    A shortcut method for toggling between maximize and restore based on the current maximized
state of the window. 
    */
        toggleMaximize():Ext.window.Window;
    }
}